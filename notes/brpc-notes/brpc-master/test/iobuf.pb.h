// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iobuf.proto

#ifndef PROTOBUF_iobuf_2eproto__INCLUDED
#define PROTOBUF_iobuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_iobuf_2eproto();
void protobuf_AssignDesc_iobuf_2eproto();
void protobuf_ShutdownFile_iobuf_2eproto();

class Misc;

enum CompressType {
  CompressTypeNone = 0,
  CompressTypeGzip = 1,
  CompressTypeZlib = 2,
  CompressTypeSnappy = 3,
  CompressTypeLZ4 = 4
};
bool CompressType_IsValid(int value);
const CompressType CompressType_MIN = CompressTypeNone;
const CompressType CompressType_MAX = CompressTypeLZ4;
const int CompressType_ARRAYSIZE = CompressType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CompressType_descriptor();
inline const ::std::string& CompressType_Name(CompressType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CompressType_descriptor(), value);
}
inline bool CompressType_Parse(
    const ::std::string& name, CompressType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CompressType>(
    CompressType_descriptor(), name, value);
}
// ===================================================================

class Misc : public ::google::protobuf::Message {
 public:
  Misc();
  virtual ~Misc();

  Misc(const Misc& from);

  inline Misc& operator=(const Misc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Misc& default_instance();

  void Swap(Misc* other);

  // implements Message ----------------------------------------------

  Misc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Misc& from);
  void MergeFrom(const Misc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto.CompressType required_enum = 1;
  inline bool has_required_enum() const;
  inline void clear_required_enum();
  static const int kRequiredEnumFieldNumber = 1;
  inline ::proto::CompressType required_enum() const;
  inline void set_required_enum(::proto::CompressType value);

  // optional .proto.CompressType optional_enum = 2;
  inline bool has_optional_enum() const;
  inline void clear_optional_enum();
  static const int kOptionalEnumFieldNumber = 2;
  inline ::proto::CompressType optional_enum() const;
  inline void set_optional_enum(::proto::CompressType value);

  // repeated .proto.CompressType repeated_enum = 3;
  inline int repeated_enum_size() const;
  inline void clear_repeated_enum();
  static const int kRepeatedEnumFieldNumber = 3;
  inline ::proto::CompressType repeated_enum(int index) const;
  inline void set_repeated_enum(int index, ::proto::CompressType value);
  inline void add_repeated_enum(::proto::CompressType value);
  inline const ::google::protobuf::RepeatedField<int>& repeated_enum() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_repeated_enum();

  // required uint64 required_uint64 = 4;
  inline bool has_required_uint64() const;
  inline void clear_required_uint64();
  static const int kRequiredUint64FieldNumber = 4;
  inline ::google::protobuf::uint64 required_uint64() const;
  inline void set_required_uint64(::google::protobuf::uint64 value);

  // optional uint64 optional_uint64 = 5;
  inline bool has_optional_uint64() const;
  inline void clear_optional_uint64();
  static const int kOptionalUint64FieldNumber = 5;
  inline ::google::protobuf::uint64 optional_uint64() const;
  inline void set_optional_uint64(::google::protobuf::uint64 value);

  // repeated uint64 repeated_uint64 = 6;
  inline int repeated_uint64_size() const;
  inline void clear_repeated_uint64();
  static const int kRepeatedUint64FieldNumber = 6;
  inline ::google::protobuf::uint64 repeated_uint64(int index) const;
  inline void set_repeated_uint64(int index, ::google::protobuf::uint64 value);
  inline void add_repeated_uint64(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      repeated_uint64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_repeated_uint64();

  // required string required_string = 7;
  inline bool has_required_string() const;
  inline void clear_required_string();
  static const int kRequiredStringFieldNumber = 7;
  inline const ::std::string& required_string() const;
  inline void set_required_string(const ::std::string& value);
  inline void set_required_string(const char* value);
  inline void set_required_string(const char* value, size_t size);
  inline ::std::string* mutable_required_string();
  inline ::std::string* release_required_string();
  inline void set_allocated_required_string(::std::string* required_string);

  // optional string optional_string = 8;
  inline bool has_optional_string() const;
  inline void clear_optional_string();
  static const int kOptionalStringFieldNumber = 8;
  inline const ::std::string& optional_string() const;
  inline void set_optional_string(const ::std::string& value);
  inline void set_optional_string(const char* value);
  inline void set_optional_string(const char* value, size_t size);
  inline ::std::string* mutable_optional_string();
  inline ::std::string* release_optional_string();
  inline void set_allocated_optional_string(::std::string* optional_string);

  // repeated string repeated_string = 9;
  inline int repeated_string_size() const;
  inline void clear_repeated_string();
  static const int kRepeatedStringFieldNumber = 9;
  inline const ::std::string& repeated_string(int index) const;
  inline ::std::string* mutable_repeated_string(int index);
  inline void set_repeated_string(int index, const ::std::string& value);
  inline void set_repeated_string(int index, const char* value);
  inline void set_repeated_string(int index, const char* value, size_t size);
  inline ::std::string* add_repeated_string();
  inline void add_repeated_string(const ::std::string& value);
  inline void add_repeated_string(const char* value);
  inline void add_repeated_string(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& repeated_string() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_repeated_string();

  // required bool required_bool = 10;
  inline bool has_required_bool() const;
  inline void clear_required_bool();
  static const int kRequiredBoolFieldNumber = 10;
  inline bool required_bool() const;
  inline void set_required_bool(bool value);

  // optional bool optional_bool = 11;
  inline bool has_optional_bool() const;
  inline void clear_optional_bool();
  static const int kOptionalBoolFieldNumber = 11;
  inline bool optional_bool() const;
  inline void set_optional_bool(bool value);

  // repeated bool repeated_bool = 12;
  inline int repeated_bool_size() const;
  inline void clear_repeated_bool();
  static const int kRepeatedBoolFieldNumber = 12;
  inline bool repeated_bool(int index) const;
  inline void set_repeated_bool(int index, bool value);
  inline void add_repeated_bool(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      repeated_bool() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_repeated_bool();

  // required int32 required_int32 = 13;
  inline bool has_required_int32() const;
  inline void clear_required_int32();
  static const int kRequiredInt32FieldNumber = 13;
  inline ::google::protobuf::int32 required_int32() const;
  inline void set_required_int32(::google::protobuf::int32 value);

  // optional int32 optional_int32 = 14;
  inline bool has_optional_int32() const;
  inline void clear_optional_int32();
  static const int kOptionalInt32FieldNumber = 14;
  inline ::google::protobuf::int32 optional_int32() const;
  inline void set_optional_int32(::google::protobuf::int32 value);

  // repeated int32 repeated_int32 = 15;
  inline int repeated_int32_size() const;
  inline void clear_repeated_int32();
  static const int kRepeatedInt32FieldNumber = 15;
  inline ::google::protobuf::int32 repeated_int32(int index) const;
  inline void set_repeated_int32(int index, ::google::protobuf::int32 value);
  inline void add_repeated_int32(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      repeated_int32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_repeated_int32();

  // @@protoc_insertion_point(class_scope:proto.Misc)
 private:
  inline void set_has_required_enum();
  inline void clear_has_required_enum();
  inline void set_has_optional_enum();
  inline void clear_has_optional_enum();
  inline void set_has_required_uint64();
  inline void clear_has_required_uint64();
  inline void set_has_optional_uint64();
  inline void clear_has_optional_uint64();
  inline void set_has_required_string();
  inline void clear_has_required_string();
  inline void set_has_optional_string();
  inline void clear_has_optional_string();
  inline void set_has_required_bool();
  inline void clear_has_required_bool();
  inline void set_has_optional_bool();
  inline void clear_has_optional_bool();
  inline void set_has_required_int32();
  inline void clear_has_required_int32();
  inline void set_has_optional_int32();
  inline void clear_has_optional_int32();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int required_enum_;
  int optional_enum_;
  ::google::protobuf::RepeatedField<int> repeated_enum_;
  ::google::protobuf::uint64 required_uint64_;
  ::google::protobuf::uint64 optional_uint64_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > repeated_uint64_;
  ::std::string* required_string_;
  ::std::string* optional_string_;
  ::google::protobuf::RepeatedPtrField< ::std::string> repeated_string_;
  bool required_bool_;
  bool optional_bool_;
  ::google::protobuf::int32 required_int32_;
  ::google::protobuf::RepeatedField< bool > repeated_bool_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > repeated_int32_;
  ::google::protobuf::int32 optional_int32_;
  friend void  protobuf_AddDesc_iobuf_2eproto();
  friend void protobuf_AssignDesc_iobuf_2eproto();
  friend void protobuf_ShutdownFile_iobuf_2eproto();

  void InitAsDefaultInstance();
  static Misc* default_instance_;
};
// ===================================================================


// ===================================================================

// Misc

// required .proto.CompressType required_enum = 1;
inline bool Misc::has_required_enum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Misc::set_has_required_enum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Misc::clear_has_required_enum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Misc::clear_required_enum() {
  required_enum_ = 0;
  clear_has_required_enum();
}
inline ::proto::CompressType Misc::required_enum() const {
  // @@protoc_insertion_point(field_get:proto.Misc.required_enum)
  return static_cast< ::proto::CompressType >(required_enum_);
}
inline void Misc::set_required_enum(::proto::CompressType value) {
  assert(::proto::CompressType_IsValid(value));
  set_has_required_enum();
  required_enum_ = value;
  // @@protoc_insertion_point(field_set:proto.Misc.required_enum)
}

// optional .proto.CompressType optional_enum = 2;
inline bool Misc::has_optional_enum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Misc::set_has_optional_enum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Misc::clear_has_optional_enum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Misc::clear_optional_enum() {
  optional_enum_ = 0;
  clear_has_optional_enum();
}
inline ::proto::CompressType Misc::optional_enum() const {
  // @@protoc_insertion_point(field_get:proto.Misc.optional_enum)
  return static_cast< ::proto::CompressType >(optional_enum_);
}
inline void Misc::set_optional_enum(::proto::CompressType value) {
  assert(::proto::CompressType_IsValid(value));
  set_has_optional_enum();
  optional_enum_ = value;
  // @@protoc_insertion_point(field_set:proto.Misc.optional_enum)
}

// repeated .proto.CompressType repeated_enum = 3;
inline int Misc::repeated_enum_size() const {
  return repeated_enum_.size();
}
inline void Misc::clear_repeated_enum() {
  repeated_enum_.Clear();
}
inline ::proto::CompressType Misc::repeated_enum(int index) const {
  // @@protoc_insertion_point(field_get:proto.Misc.repeated_enum)
  return static_cast< ::proto::CompressType >(repeated_enum_.Get(index));
}
inline void Misc::set_repeated_enum(int index, ::proto::CompressType value) {
  assert(::proto::CompressType_IsValid(value));
  repeated_enum_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.Misc.repeated_enum)
}
inline void Misc::add_repeated_enum(::proto::CompressType value) {
  assert(::proto::CompressType_IsValid(value));
  repeated_enum_.Add(value);
  // @@protoc_insertion_point(field_add:proto.Misc.repeated_enum)
}
inline const ::google::protobuf::RepeatedField<int>&
Misc::repeated_enum() const {
  // @@protoc_insertion_point(field_list:proto.Misc.repeated_enum)
  return repeated_enum_;
}
inline ::google::protobuf::RepeatedField<int>*
Misc::mutable_repeated_enum() {
  // @@protoc_insertion_point(field_mutable_list:proto.Misc.repeated_enum)
  return &repeated_enum_;
}

// required uint64 required_uint64 = 4;
inline bool Misc::has_required_uint64() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Misc::set_has_required_uint64() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Misc::clear_has_required_uint64() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Misc::clear_required_uint64() {
  required_uint64_ = GOOGLE_ULONGLONG(0);
  clear_has_required_uint64();
}
inline ::google::protobuf::uint64 Misc::required_uint64() const {
  // @@protoc_insertion_point(field_get:proto.Misc.required_uint64)
  return required_uint64_;
}
inline void Misc::set_required_uint64(::google::protobuf::uint64 value) {
  set_has_required_uint64();
  required_uint64_ = value;
  // @@protoc_insertion_point(field_set:proto.Misc.required_uint64)
}

// optional uint64 optional_uint64 = 5;
inline bool Misc::has_optional_uint64() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Misc::set_has_optional_uint64() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Misc::clear_has_optional_uint64() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Misc::clear_optional_uint64() {
  optional_uint64_ = GOOGLE_ULONGLONG(0);
  clear_has_optional_uint64();
}
inline ::google::protobuf::uint64 Misc::optional_uint64() const {
  // @@protoc_insertion_point(field_get:proto.Misc.optional_uint64)
  return optional_uint64_;
}
inline void Misc::set_optional_uint64(::google::protobuf::uint64 value) {
  set_has_optional_uint64();
  optional_uint64_ = value;
  // @@protoc_insertion_point(field_set:proto.Misc.optional_uint64)
}

// repeated uint64 repeated_uint64 = 6;
inline int Misc::repeated_uint64_size() const {
  return repeated_uint64_.size();
}
inline void Misc::clear_repeated_uint64() {
  repeated_uint64_.Clear();
}
inline ::google::protobuf::uint64 Misc::repeated_uint64(int index) const {
  // @@protoc_insertion_point(field_get:proto.Misc.repeated_uint64)
  return repeated_uint64_.Get(index);
}
inline void Misc::set_repeated_uint64(int index, ::google::protobuf::uint64 value) {
  repeated_uint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.Misc.repeated_uint64)
}
inline void Misc::add_repeated_uint64(::google::protobuf::uint64 value) {
  repeated_uint64_.Add(value);
  // @@protoc_insertion_point(field_add:proto.Misc.repeated_uint64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Misc::repeated_uint64() const {
  // @@protoc_insertion_point(field_list:proto.Misc.repeated_uint64)
  return repeated_uint64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Misc::mutable_repeated_uint64() {
  // @@protoc_insertion_point(field_mutable_list:proto.Misc.repeated_uint64)
  return &repeated_uint64_;
}

// required string required_string = 7;
inline bool Misc::has_required_string() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Misc::set_has_required_string() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Misc::clear_has_required_string() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Misc::clear_required_string() {
  if (required_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    required_string_->clear();
  }
  clear_has_required_string();
}
inline const ::std::string& Misc::required_string() const {
  // @@protoc_insertion_point(field_get:proto.Misc.required_string)
  return *required_string_;
}
inline void Misc::set_required_string(const ::std::string& value) {
  set_has_required_string();
  if (required_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    required_string_ = new ::std::string;
  }
  required_string_->assign(value);
  // @@protoc_insertion_point(field_set:proto.Misc.required_string)
}
inline void Misc::set_required_string(const char* value) {
  set_has_required_string();
  if (required_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    required_string_ = new ::std::string;
  }
  required_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.Misc.required_string)
}
inline void Misc::set_required_string(const char* value, size_t size) {
  set_has_required_string();
  if (required_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    required_string_ = new ::std::string;
  }
  required_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.Misc.required_string)
}
inline ::std::string* Misc::mutable_required_string() {
  set_has_required_string();
  if (required_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    required_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.Misc.required_string)
  return required_string_;
}
inline ::std::string* Misc::release_required_string() {
  clear_has_required_string();
  if (required_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = required_string_;
    required_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Misc::set_allocated_required_string(::std::string* required_string) {
  if (required_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete required_string_;
  }
  if (required_string) {
    set_has_required_string();
    required_string_ = required_string;
  } else {
    clear_has_required_string();
    required_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Misc.required_string)
}

// optional string optional_string = 8;
inline bool Misc::has_optional_string() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Misc::set_has_optional_string() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Misc::clear_has_optional_string() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Misc::clear_optional_string() {
  if (optional_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    optional_string_->clear();
  }
  clear_has_optional_string();
}
inline const ::std::string& Misc::optional_string() const {
  // @@protoc_insertion_point(field_get:proto.Misc.optional_string)
  return *optional_string_;
}
inline void Misc::set_optional_string(const ::std::string& value) {
  set_has_optional_string();
  if (optional_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    optional_string_ = new ::std::string;
  }
  optional_string_->assign(value);
  // @@protoc_insertion_point(field_set:proto.Misc.optional_string)
}
inline void Misc::set_optional_string(const char* value) {
  set_has_optional_string();
  if (optional_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    optional_string_ = new ::std::string;
  }
  optional_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.Misc.optional_string)
}
inline void Misc::set_optional_string(const char* value, size_t size) {
  set_has_optional_string();
  if (optional_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    optional_string_ = new ::std::string;
  }
  optional_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.Misc.optional_string)
}
inline ::std::string* Misc::mutable_optional_string() {
  set_has_optional_string();
  if (optional_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    optional_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.Misc.optional_string)
  return optional_string_;
}
inline ::std::string* Misc::release_optional_string() {
  clear_has_optional_string();
  if (optional_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = optional_string_;
    optional_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Misc::set_allocated_optional_string(::std::string* optional_string) {
  if (optional_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete optional_string_;
  }
  if (optional_string) {
    set_has_optional_string();
    optional_string_ = optional_string;
  } else {
    clear_has_optional_string();
    optional_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Misc.optional_string)
}

// repeated string repeated_string = 9;
inline int Misc::repeated_string_size() const {
  return repeated_string_.size();
}
inline void Misc::clear_repeated_string() {
  repeated_string_.Clear();
}
inline const ::std::string& Misc::repeated_string(int index) const {
  // @@protoc_insertion_point(field_get:proto.Misc.repeated_string)
  return repeated_string_.Get(index);
}
inline ::std::string* Misc::mutable_repeated_string(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Misc.repeated_string)
  return repeated_string_.Mutable(index);
}
inline void Misc::set_repeated_string(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.Misc.repeated_string)
  repeated_string_.Mutable(index)->assign(value);
}
inline void Misc::set_repeated_string(int index, const char* value) {
  repeated_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.Misc.repeated_string)
}
inline void Misc::set_repeated_string(int index, const char* value, size_t size) {
  repeated_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.Misc.repeated_string)
}
inline ::std::string* Misc::add_repeated_string() {
  return repeated_string_.Add();
}
inline void Misc::add_repeated_string(const ::std::string& value) {
  repeated_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.Misc.repeated_string)
}
inline void Misc::add_repeated_string(const char* value) {
  repeated_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.Misc.repeated_string)
}
inline void Misc::add_repeated_string(const char* value, size_t size) {
  repeated_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.Misc.repeated_string)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Misc::repeated_string() const {
  // @@protoc_insertion_point(field_list:proto.Misc.repeated_string)
  return repeated_string_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Misc::mutable_repeated_string() {
  // @@protoc_insertion_point(field_mutable_list:proto.Misc.repeated_string)
  return &repeated_string_;
}

// required bool required_bool = 10;
inline bool Misc::has_required_bool() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Misc::set_has_required_bool() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Misc::clear_has_required_bool() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Misc::clear_required_bool() {
  required_bool_ = false;
  clear_has_required_bool();
}
inline bool Misc::required_bool() const {
  // @@protoc_insertion_point(field_get:proto.Misc.required_bool)
  return required_bool_;
}
inline void Misc::set_required_bool(bool value) {
  set_has_required_bool();
  required_bool_ = value;
  // @@protoc_insertion_point(field_set:proto.Misc.required_bool)
}

// optional bool optional_bool = 11;
inline bool Misc::has_optional_bool() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Misc::set_has_optional_bool() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Misc::clear_has_optional_bool() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Misc::clear_optional_bool() {
  optional_bool_ = false;
  clear_has_optional_bool();
}
inline bool Misc::optional_bool() const {
  // @@protoc_insertion_point(field_get:proto.Misc.optional_bool)
  return optional_bool_;
}
inline void Misc::set_optional_bool(bool value) {
  set_has_optional_bool();
  optional_bool_ = value;
  // @@protoc_insertion_point(field_set:proto.Misc.optional_bool)
}

// repeated bool repeated_bool = 12;
inline int Misc::repeated_bool_size() const {
  return repeated_bool_.size();
}
inline void Misc::clear_repeated_bool() {
  repeated_bool_.Clear();
}
inline bool Misc::repeated_bool(int index) const {
  // @@protoc_insertion_point(field_get:proto.Misc.repeated_bool)
  return repeated_bool_.Get(index);
}
inline void Misc::set_repeated_bool(int index, bool value) {
  repeated_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.Misc.repeated_bool)
}
inline void Misc::add_repeated_bool(bool value) {
  repeated_bool_.Add(value);
  // @@protoc_insertion_point(field_add:proto.Misc.repeated_bool)
}
inline const ::google::protobuf::RepeatedField< bool >&
Misc::repeated_bool() const {
  // @@protoc_insertion_point(field_list:proto.Misc.repeated_bool)
  return repeated_bool_;
}
inline ::google::protobuf::RepeatedField< bool >*
Misc::mutable_repeated_bool() {
  // @@protoc_insertion_point(field_mutable_list:proto.Misc.repeated_bool)
  return &repeated_bool_;
}

// required int32 required_int32 = 13;
inline bool Misc::has_required_int32() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Misc::set_has_required_int32() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Misc::clear_has_required_int32() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Misc::clear_required_int32() {
  required_int32_ = 0;
  clear_has_required_int32();
}
inline ::google::protobuf::int32 Misc::required_int32() const {
  // @@protoc_insertion_point(field_get:proto.Misc.required_int32)
  return required_int32_;
}
inline void Misc::set_required_int32(::google::protobuf::int32 value) {
  set_has_required_int32();
  required_int32_ = value;
  // @@protoc_insertion_point(field_set:proto.Misc.required_int32)
}

// optional int32 optional_int32 = 14;
inline bool Misc::has_optional_int32() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Misc::set_has_optional_int32() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Misc::clear_has_optional_int32() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Misc::clear_optional_int32() {
  optional_int32_ = 0;
  clear_has_optional_int32();
}
inline ::google::protobuf::int32 Misc::optional_int32() const {
  // @@protoc_insertion_point(field_get:proto.Misc.optional_int32)
  return optional_int32_;
}
inline void Misc::set_optional_int32(::google::protobuf::int32 value) {
  set_has_optional_int32();
  optional_int32_ = value;
  // @@protoc_insertion_point(field_set:proto.Misc.optional_int32)
}

// repeated int32 repeated_int32 = 15;
inline int Misc::repeated_int32_size() const {
  return repeated_int32_.size();
}
inline void Misc::clear_repeated_int32() {
  repeated_int32_.Clear();
}
inline ::google::protobuf::int32 Misc::repeated_int32(int index) const {
  // @@protoc_insertion_point(field_get:proto.Misc.repeated_int32)
  return repeated_int32_.Get(index);
}
inline void Misc::set_repeated_int32(int index, ::google::protobuf::int32 value) {
  repeated_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.Misc.repeated_int32)
}
inline void Misc::add_repeated_int32(::google::protobuf::int32 value) {
  repeated_int32_.Add(value);
  // @@protoc_insertion_point(field_add:proto.Misc.repeated_int32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Misc::repeated_int32() const {
  // @@protoc_insertion_point(field_list:proto.Misc.repeated_int32)
  return repeated_int32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Misc::mutable_repeated_int32() {
  // @@protoc_insertion_point(field_mutable_list:proto.Misc.repeated_int32)
  return &repeated_int32_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::CompressType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::CompressType>() {
  return ::proto::CompressType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_iobuf_2eproto__INCLUDED
