// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/span.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "brpc/span.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace brpc {

namespace {

const ::google::protobuf::Descriptor* RpczSpan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpczSpan_reflection_ = NULL;
const ::google::protobuf::Descriptor* BriefSpan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BriefSpan_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpanAnnotation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpanAnnotation_reflection_ = NULL;
const ::google::protobuf::Descriptor* TracingSpan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TracingSpan_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SpanType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_brpc_2fspan_2eproto() {
  protobuf_AddDesc_brpc_2fspan_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "brpc/span.proto");
  GOOGLE_CHECK(file != NULL);
  RpczSpan_descriptor_ = file->message_type(0);
  static const int RpczSpan_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, trace_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, span_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, parent_span_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, log_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, base_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, ending_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, remote_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, remote_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, async_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, request_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, response_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, received_real_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, start_parse_real_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, start_callback_real_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, start_send_real_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, sent_real_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, client_spans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, full_method_name_),
  };
  RpczSpan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpczSpan_descriptor_,
      RpczSpan::default_instance_,
      RpczSpan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSpan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpczSpan));
  BriefSpan_descriptor_ = file->message_type(1);
  static const int BriefSpan_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefSpan, trace_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefSpan, span_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefSpan, log_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefSpan, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefSpan, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefSpan, request_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefSpan, response_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefSpan, start_real_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefSpan, latency_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefSpan, full_method_name_),
  };
  BriefSpan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BriefSpan_descriptor_,
      BriefSpan::default_instance_,
      BriefSpan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefSpan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefSpan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BriefSpan));
  SpanAnnotation_descriptor_ = file->message_type(2);
  static const int SpanAnnotation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanAnnotation, realtime_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanAnnotation, content_),
  };
  SpanAnnotation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpanAnnotation_descriptor_,
      SpanAnnotation::default_instance_,
      SpanAnnotation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanAnnotation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanAnnotation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpanAnnotation));
  TracingSpan_descriptor_ = file->message_type(3);
  static const int TracingSpan_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingSpan, trace_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingSpan, span_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingSpan, parent_span_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingSpan, log_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingSpan, remote_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingSpan, remote_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingSpan, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingSpan, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingSpan, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingSpan, request_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingSpan, response_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingSpan, received_real_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingSpan, start_parse_real_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingSpan, start_callback_real_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingSpan, start_send_real_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingSpan, sent_real_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingSpan, span_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingSpan, annotations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingSpan, client_spans_),
  };
  TracingSpan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TracingSpan_descriptor_,
      TracingSpan::default_instance_,
      TracingSpan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingSpan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingSpan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TracingSpan));
  SpanType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_brpc_2fspan_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpczSpan_descriptor_, &RpczSpan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BriefSpan_descriptor_, &BriefSpan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpanAnnotation_descriptor_, &SpanAnnotation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TracingSpan_descriptor_, &TracingSpan::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_brpc_2fspan_2eproto() {
  delete RpczSpan::default_instance_;
  delete RpczSpan_reflection_;
  delete BriefSpan::default_instance_;
  delete BriefSpan_reflection_;
  delete SpanAnnotation::default_instance_;
  delete SpanAnnotation_reflection_;
  delete TracingSpan::default_instance_;
  delete TracingSpan_reflection_;
}

void protobuf_AddDesc_brpc_2fspan_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::brpc::protobuf_AddDesc_brpc_2foptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017brpc/span.proto\022\004brpc\032\022brpc/options.pr"
    "oto\"\216\004\n\010RpczSpan\022\020\n\010trace_id\030\001 \002(\004\022\017\n\007sp"
    "an_id\030\002 \002(\004\022\026\n\016parent_span_id\030\003 \002(\004\022\016\n\006l"
    "og_id\030\004 \001(\004\022\020\n\010base_cid\030\005 \001(\004\022\022\n\nending_"
    "cid\030\006 \001(\004\022\021\n\tremote_ip\030\007 \001(\r\022\023\n\013remote_p"
    "ort\030\010 \001(\r\022\034\n\004type\030\t \001(\0162\016.brpc.SpanType\022"
    "\r\n\005async\030\n \001(\010\022$\n\010protocol\030\013 \001(\0162\022.brpc."
    "ProtocolType\022\022\n\nerror_code\030\014 \001(\005\022\024\n\014requ"
    "est_size\030\r \001(\005\022\025\n\rresponse_size\030\016 \001(\005\022\030\n"
    "\020received_real_us\030\017 \001(\003\022\033\n\023start_parse_r"
    "eal_us\030\020 \001(\003\022\036\n\026start_callback_real_us\030\021"
    " \001(\003\022\032\n\022start_send_real_us\030\022 \001(\003\022\024\n\014sent"
    "_real_us\030\023 \001(\003\022\014\n\004info\030\024 \001(\014\022$\n\014client_s"
    "pans\030\025 \003(\0132\016.brpc.RpczSpan\022\030\n\020full_metho"
    "d_name\030\026 \001(\014\"\342\001\n\tBriefSpan\022\020\n\010trace_id\030\001"
    " \002(\004\022\017\n\007span_id\030\002 \002(\004\022\016\n\006log_id\030\003 \001(\004\022\034\n"
    "\004type\030\004 \001(\0162\016.brpc.SpanType\022\022\n\nerror_cod"
    "e\030\005 \001(\005\022\024\n\014request_size\030\006 \001(\005\022\025\n\rrespons"
    "e_size\030\007 \001(\005\022\025\n\rstart_real_us\030\010 \001(\003\022\022\n\nl"
    "atency_us\030\t \001(\003\022\030\n\020full_method_name\030\n \001("
    "\014\"6\n\016SpanAnnotation\022\023\n\013realtime_us\030\001 \002(\003"
    "\022\017\n\007content\030\002 \002(\t\"\365\003\n\013TracingSpan\022\020\n\010tra"
    "ce_id\030\001 \002(\004\022\017\n\007span_id\030\002 \002(\004\022\026\n\016parent_s"
    "pan_id\030\003 \002(\004\022\016\n\006log_id\030\004 \001(\004\022\021\n\tremote_i"
    "p\030\005 \001(\r\022\023\n\013remote_port\030\006 \001(\r\022\034\n\004type\030\007 \001"
    "(\0162\016.brpc.SpanType\022$\n\010protocol\030\010 \001(\0162\022.b"
    "rpc.ProtocolType\022\022\n\nerror_code\030\t \001(\005\022\024\n\014"
    "request_size\030\n \001(\005\022\025\n\rresponse_size\030\013 \001("
    "\005\022\030\n\020received_real_us\030\014 \001(\003\022\033\n\023start_par"
    "se_real_us\030\r \001(\003\022\036\n\026start_callback_real_"
    "us\030\016 \001(\003\022\032\n\022start_send_real_us\030\017 \001(\003\022\024\n\014"
    "sent_real_us\030\020 \001(\003\022\021\n\tspan_name\030\021 \001(\t\022)\n"
    "\013annotations\030\022 \003(\0132\024.brpc.SpanAnnotation"
    "\022\'\n\014client_spans\030\023 \003(\0132\021.brpc.TracingSpa"
    "n*6\n\010SpanType\022\024\n\020SPAN_TYPE_SERVER\020\000\022\024\n\020S"
    "PAN_TYPE_CLIENT\020\001B\020\n\010com.brpcB\004Span", 1435);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/span.proto", &protobuf_RegisterTypes);
  RpczSpan::default_instance_ = new RpczSpan();
  BriefSpan::default_instance_ = new BriefSpan();
  SpanAnnotation::default_instance_ = new SpanAnnotation();
  TracingSpan::default_instance_ = new TracingSpan();
  RpczSpan::default_instance_->InitAsDefaultInstance();
  BriefSpan::default_instance_->InitAsDefaultInstance();
  SpanAnnotation::default_instance_->InitAsDefaultInstance();
  TracingSpan::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_brpc_2fspan_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_brpc_2fspan_2eproto {
  StaticDescriptorInitializer_brpc_2fspan_2eproto() {
    protobuf_AddDesc_brpc_2fspan_2eproto();
  }
} static_descriptor_initializer_brpc_2fspan_2eproto_;
const ::google::protobuf::EnumDescriptor* SpanType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpanType_descriptor_;
}
bool SpanType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RpczSpan::kTraceIdFieldNumber;
const int RpczSpan::kSpanIdFieldNumber;
const int RpczSpan::kParentSpanIdFieldNumber;
const int RpczSpan::kLogIdFieldNumber;
const int RpczSpan::kBaseCidFieldNumber;
const int RpczSpan::kEndingCidFieldNumber;
const int RpczSpan::kRemoteIpFieldNumber;
const int RpczSpan::kRemotePortFieldNumber;
const int RpczSpan::kTypeFieldNumber;
const int RpczSpan::kAsyncFieldNumber;
const int RpczSpan::kProtocolFieldNumber;
const int RpczSpan::kErrorCodeFieldNumber;
const int RpczSpan::kRequestSizeFieldNumber;
const int RpczSpan::kResponseSizeFieldNumber;
const int RpczSpan::kReceivedRealUsFieldNumber;
const int RpczSpan::kStartParseRealUsFieldNumber;
const int RpczSpan::kStartCallbackRealUsFieldNumber;
const int RpczSpan::kStartSendRealUsFieldNumber;
const int RpczSpan::kSentRealUsFieldNumber;
const int RpczSpan::kInfoFieldNumber;
const int RpczSpan::kClientSpansFieldNumber;
const int RpczSpan::kFullMethodNameFieldNumber;
#endif  // !_MSC_VER

RpczSpan::RpczSpan()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.RpczSpan)
}

void RpczSpan::InitAsDefaultInstance() {
}

RpczSpan::RpczSpan(const RpczSpan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.RpczSpan)
}

void RpczSpan::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  trace_id_ = GOOGLE_ULONGLONG(0);
  span_id_ = GOOGLE_ULONGLONG(0);
  parent_span_id_ = GOOGLE_ULONGLONG(0);
  log_id_ = GOOGLE_ULONGLONG(0);
  base_cid_ = GOOGLE_ULONGLONG(0);
  ending_cid_ = GOOGLE_ULONGLONG(0);
  remote_ip_ = 0u;
  remote_port_ = 0u;
  type_ = 0;
  async_ = false;
  protocol_ = 0;
  error_code_ = 0;
  request_size_ = 0;
  response_size_ = 0;
  received_real_us_ = GOOGLE_LONGLONG(0);
  start_parse_real_us_ = GOOGLE_LONGLONG(0);
  start_callback_real_us_ = GOOGLE_LONGLONG(0);
  start_send_real_us_ = GOOGLE_LONGLONG(0);
  sent_real_us_ = GOOGLE_LONGLONG(0);
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpczSpan::~RpczSpan() {
  // @@protoc_insertion_point(destructor:brpc.RpczSpan)
  SharedDtor();
}

void RpczSpan::SharedDtor() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (full_method_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete full_method_name_;
  }
  if (this != default_instance_) {
  }
}

void RpczSpan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpczSpan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpczSpan_descriptor_;
}

const RpczSpan& RpczSpan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fspan_2eproto();
  return *default_instance_;
}

RpczSpan* RpczSpan::default_instance_ = NULL;

RpczSpan* RpczSpan::New() const {
  return new RpczSpan;
}

void RpczSpan::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpczSpan*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(trace_id_, remote_port_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(type_, start_parse_real_us_);
  }
  if (_has_bits_[16 / 32] & 3080192) {
    ZR_(start_callback_real_us_, sent_real_us_);
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_->clear();
      }
    }
    if (has_full_method_name()) {
      if (full_method_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        full_method_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  client_spans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpczSpan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.RpczSpan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 trace_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trace_id_)));
          set_has_trace_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_span_id;
        break;
      }

      // required uint64 span_id = 2;
      case 2: {
        if (tag == 16) {
         parse_span_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &span_id_)));
          set_has_span_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_parent_span_id;
        break;
      }

      // required uint64 parent_span_id = 3;
      case 3: {
        if (tag == 24) {
         parse_parent_span_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parent_span_id_)));
          set_has_parent_span_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_log_id;
        break;
      }

      // optional uint64 log_id = 4;
      case 4: {
        if (tag == 32) {
         parse_log_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_id_)));
          set_has_log_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_base_cid;
        break;
      }

      // optional uint64 base_cid = 5;
      case 5: {
        if (tag == 40) {
         parse_base_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_cid_)));
          set_has_base_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ending_cid;
        break;
      }

      // optional uint64 ending_cid = 6;
      case 6: {
        if (tag == 48) {
         parse_ending_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ending_cid_)));
          set_has_ending_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_remote_ip;
        break;
      }

      // optional uint32 remote_ip = 7;
      case 7: {
        if (tag == 56) {
         parse_remote_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_ip_)));
          set_has_remote_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_remote_port;
        break;
      }

      // optional uint32 remote_port = 8;
      case 8: {
        if (tag == 64) {
         parse_remote_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_port_)));
          set_has_remote_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // optional .brpc.SpanType type = 9;
      case 9: {
        if (tag == 72) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::SpanType_IsValid(value)) {
            set_type(static_cast< ::brpc::SpanType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_async;
        break;
      }

      // optional bool async = 10;
      case 10: {
        if (tag == 80) {
         parse_async:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &async_)));
          set_has_async();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_protocol;
        break;
      }

      // optional .brpc.ProtocolType protocol = 11;
      case 11: {
        if (tag == 88) {
         parse_protocol:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::ProtocolType_IsValid(value)) {
            set_protocol(static_cast< ::brpc::ProtocolType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 12;
      case 12: {
        if (tag == 96) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_request_size;
        break;
      }

      // optional int32 request_size = 13;
      case 13: {
        if (tag == 104) {
         parse_request_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_size_)));
          set_has_request_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_response_size;
        break;
      }

      // optional int32 response_size = 14;
      case 14: {
        if (tag == 112) {
         parse_response_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_size_)));
          set_has_response_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_received_real_us;
        break;
      }

      // optional int64 received_real_us = 15;
      case 15: {
        if (tag == 120) {
         parse_received_real_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &received_real_us_)));
          set_has_received_real_us();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_start_parse_real_us;
        break;
      }

      // optional int64 start_parse_real_us = 16;
      case 16: {
        if (tag == 128) {
         parse_start_parse_real_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_parse_real_us_)));
          set_has_start_parse_real_us();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_start_callback_real_us;
        break;
      }

      // optional int64 start_callback_real_us = 17;
      case 17: {
        if (tag == 136) {
         parse_start_callback_real_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_callback_real_us_)));
          set_has_start_callback_real_us();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_start_send_real_us;
        break;
      }

      // optional int64 start_send_real_us = 18;
      case 18: {
        if (tag == 144) {
         parse_start_send_real_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_send_real_us_)));
          set_has_start_send_real_us();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_sent_real_us;
        break;
      }

      // optional int64 sent_real_us = 19;
      case 19: {
        if (tag == 152) {
         parse_sent_real_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sent_real_us_)));
          set_has_sent_real_us();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_info;
        break;
      }

      // optional bytes info = 20;
      case 20: {
        if (tag == 162) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_client_spans;
        break;
      }

      // repeated .brpc.RpczSpan client_spans = 21;
      case 21: {
        if (tag == 170) {
         parse_client_spans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_client_spans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_client_spans;
        if (input->ExpectTag(178)) goto parse_full_method_name;
        break;
      }

      // optional bytes full_method_name = 22;
      case 22: {
        if (tag == 178) {
         parse_full_method_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_full_method_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.RpczSpan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.RpczSpan)
  return false;
#undef DO_
}

void RpczSpan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.RpczSpan)
  // required uint64 trace_id = 1;
  if (has_trace_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->trace_id(), output);
  }

  // required uint64 span_id = 2;
  if (has_span_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->span_id(), output);
  }

  // required uint64 parent_span_id = 3;
  if (has_parent_span_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->parent_span_id(), output);
  }

  // optional uint64 log_id = 4;
  if (has_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->log_id(), output);
  }

  // optional uint64 base_cid = 5;
  if (has_base_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->base_cid(), output);
  }

  // optional uint64 ending_cid = 6;
  if (has_ending_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->ending_cid(), output);
  }

  // optional uint32 remote_ip = 7;
  if (has_remote_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->remote_ip(), output);
  }

  // optional uint32 remote_port = 8;
  if (has_remote_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->remote_port(), output);
  }

  // optional .brpc.SpanType type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // optional bool async = 10;
  if (has_async()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->async(), output);
  }

  // optional .brpc.ProtocolType protocol = 11;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->protocol(), output);
  }

  // optional int32 error_code = 12;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->error_code(), output);
  }

  // optional int32 request_size = 13;
  if (has_request_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->request_size(), output);
  }

  // optional int32 response_size = 14;
  if (has_response_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->response_size(), output);
  }

  // optional int64 received_real_us = 15;
  if (has_received_real_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->received_real_us(), output);
  }

  // optional int64 start_parse_real_us = 16;
  if (has_start_parse_real_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->start_parse_real_us(), output);
  }

  // optional int64 start_callback_real_us = 17;
  if (has_start_callback_real_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->start_callback_real_us(), output);
  }

  // optional int64 start_send_real_us = 18;
  if (has_start_send_real_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->start_send_real_us(), output);
  }

  // optional int64 sent_real_us = 19;
  if (has_sent_real_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->sent_real_us(), output);
  }

  // optional bytes info = 20;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->info(), output);
  }

  // repeated .brpc.RpczSpan client_spans = 21;
  for (int i = 0; i < this->client_spans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->client_spans(i), output);
  }

  // optional bytes full_method_name = 22;
  if (has_full_method_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->full_method_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.RpczSpan)
}

::google::protobuf::uint8* RpczSpan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.RpczSpan)
  // required uint64 trace_id = 1;
  if (has_trace_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->trace_id(), target);
  }

  // required uint64 span_id = 2;
  if (has_span_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->span_id(), target);
  }

  // required uint64 parent_span_id = 3;
  if (has_parent_span_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->parent_span_id(), target);
  }

  // optional uint64 log_id = 4;
  if (has_log_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->log_id(), target);
  }

  // optional uint64 base_cid = 5;
  if (has_base_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->base_cid(), target);
  }

  // optional uint64 ending_cid = 6;
  if (has_ending_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->ending_cid(), target);
  }

  // optional uint32 remote_ip = 7;
  if (has_remote_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->remote_ip(), target);
  }

  // optional uint32 remote_port = 8;
  if (has_remote_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->remote_port(), target);
  }

  // optional .brpc.SpanType type = 9;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // optional bool async = 10;
  if (has_async()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->async(), target);
  }

  // optional .brpc.ProtocolType protocol = 11;
  if (has_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->protocol(), target);
  }

  // optional int32 error_code = 12;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->error_code(), target);
  }

  // optional int32 request_size = 13;
  if (has_request_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->request_size(), target);
  }

  // optional int32 response_size = 14;
  if (has_response_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->response_size(), target);
  }

  // optional int64 received_real_us = 15;
  if (has_received_real_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->received_real_us(), target);
  }

  // optional int64 start_parse_real_us = 16;
  if (has_start_parse_real_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->start_parse_real_us(), target);
  }

  // optional int64 start_callback_real_us = 17;
  if (has_start_callback_real_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->start_callback_real_us(), target);
  }

  // optional int64 start_send_real_us = 18;
  if (has_start_send_real_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->start_send_real_us(), target);
  }

  // optional int64 sent_real_us = 19;
  if (has_sent_real_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->sent_real_us(), target);
  }

  // optional bytes info = 20;
  if (has_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->info(), target);
  }

  // repeated .brpc.RpczSpan client_spans = 21;
  for (int i = 0; i < this->client_spans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->client_spans(i), target);
  }

  // optional bytes full_method_name = 22;
  if (has_full_method_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->full_method_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.RpczSpan)
  return target;
}

int RpczSpan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 trace_id = 1;
    if (has_trace_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trace_id());
    }

    // required uint64 span_id = 2;
    if (has_span_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->span_id());
    }

    // required uint64 parent_span_id = 3;
    if (has_parent_span_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parent_span_id());
    }

    // optional uint64 log_id = 4;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_id());
    }

    // optional uint64 base_cid = 5;
    if (has_base_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_cid());
    }

    // optional uint64 ending_cid = 6;
    if (has_ending_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ending_cid());
    }

    // optional uint32 remote_ip = 7;
    if (has_remote_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remote_ip());
    }

    // optional uint32 remote_port = 8;
    if (has_remote_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remote_port());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .brpc.SpanType type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool async = 10;
    if (has_async()) {
      total_size += 1 + 1;
    }

    // optional .brpc.ProtocolType protocol = 11;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());
    }

    // optional int32 error_code = 12;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional int32 request_size = 13;
    if (has_request_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_size());
    }

    // optional int32 response_size = 14;
    if (has_response_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response_size());
    }

    // optional int64 received_real_us = 15;
    if (has_received_real_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->received_real_us());
    }

    // optional int64 start_parse_real_us = 16;
    if (has_start_parse_real_us()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_parse_real_us());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 start_callback_real_us = 17;
    if (has_start_callback_real_us()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_callback_real_us());
    }

    // optional int64 start_send_real_us = 18;
    if (has_start_send_real_us()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_send_real_us());
    }

    // optional int64 sent_real_us = 19;
    if (has_sent_real_us()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sent_real_us());
    }

    // optional bytes info = 20;
    if (has_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->info());
    }

    // optional bytes full_method_name = 22;
    if (has_full_method_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->full_method_name());
    }

  }
  // repeated .brpc.RpczSpan client_spans = 21;
  total_size += 2 * this->client_spans_size();
  for (int i = 0; i < this->client_spans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->client_spans(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpczSpan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpczSpan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpczSpan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpczSpan::MergeFrom(const RpczSpan& from) {
  GOOGLE_CHECK_NE(&from, this);
  client_spans_.MergeFrom(from.client_spans_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trace_id()) {
      set_trace_id(from.trace_id());
    }
    if (from.has_span_id()) {
      set_span_id(from.span_id());
    }
    if (from.has_parent_span_id()) {
      set_parent_span_id(from.parent_span_id());
    }
    if (from.has_log_id()) {
      set_log_id(from.log_id());
    }
    if (from.has_base_cid()) {
      set_base_cid(from.base_cid());
    }
    if (from.has_ending_cid()) {
      set_ending_cid(from.ending_cid());
    }
    if (from.has_remote_ip()) {
      set_remote_ip(from.remote_ip());
    }
    if (from.has_remote_port()) {
      set_remote_port(from.remote_port());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_async()) {
      set_async(from.async());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_request_size()) {
      set_request_size(from.request_size());
    }
    if (from.has_response_size()) {
      set_response_size(from.response_size());
    }
    if (from.has_received_real_us()) {
      set_received_real_us(from.received_real_us());
    }
    if (from.has_start_parse_real_us()) {
      set_start_parse_real_us(from.start_parse_real_us());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_start_callback_real_us()) {
      set_start_callback_real_us(from.start_callback_real_us());
    }
    if (from.has_start_send_real_us()) {
      set_start_send_real_us(from.start_send_real_us());
    }
    if (from.has_sent_real_us()) {
      set_sent_real_us(from.sent_real_us());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_full_method_name()) {
      set_full_method_name(from.full_method_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpczSpan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpczSpan::CopyFrom(const RpczSpan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpczSpan::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->client_spans())) return false;
  return true;
}

void RpczSpan::Swap(RpczSpan* other) {
  if (other != this) {
    std::swap(trace_id_, other->trace_id_);
    std::swap(span_id_, other->span_id_);
    std::swap(parent_span_id_, other->parent_span_id_);
    std::swap(log_id_, other->log_id_);
    std::swap(base_cid_, other->base_cid_);
    std::swap(ending_cid_, other->ending_cid_);
    std::swap(remote_ip_, other->remote_ip_);
    std::swap(remote_port_, other->remote_port_);
    std::swap(type_, other->type_);
    std::swap(async_, other->async_);
    std::swap(protocol_, other->protocol_);
    std::swap(error_code_, other->error_code_);
    std::swap(request_size_, other->request_size_);
    std::swap(response_size_, other->response_size_);
    std::swap(received_real_us_, other->received_real_us_);
    std::swap(start_parse_real_us_, other->start_parse_real_us_);
    std::swap(start_callback_real_us_, other->start_callback_real_us_);
    std::swap(start_send_real_us_, other->start_send_real_us_);
    std::swap(sent_real_us_, other->sent_real_us_);
    std::swap(info_, other->info_);
    client_spans_.Swap(&other->client_spans_);
    std::swap(full_method_name_, other->full_method_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpczSpan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpczSpan_descriptor_;
  metadata.reflection = RpczSpan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BriefSpan::kTraceIdFieldNumber;
const int BriefSpan::kSpanIdFieldNumber;
const int BriefSpan::kLogIdFieldNumber;
const int BriefSpan::kTypeFieldNumber;
const int BriefSpan::kErrorCodeFieldNumber;
const int BriefSpan::kRequestSizeFieldNumber;
const int BriefSpan::kResponseSizeFieldNumber;
const int BriefSpan::kStartRealUsFieldNumber;
const int BriefSpan::kLatencyUsFieldNumber;
const int BriefSpan::kFullMethodNameFieldNumber;
#endif  // !_MSC_VER

BriefSpan::BriefSpan()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.BriefSpan)
}

void BriefSpan::InitAsDefaultInstance() {
}

BriefSpan::BriefSpan(const BriefSpan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.BriefSpan)
}

void BriefSpan::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  trace_id_ = GOOGLE_ULONGLONG(0);
  span_id_ = GOOGLE_ULONGLONG(0);
  log_id_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  error_code_ = 0;
  request_size_ = 0;
  response_size_ = 0;
  start_real_us_ = GOOGLE_LONGLONG(0);
  latency_us_ = GOOGLE_LONGLONG(0);
  full_method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BriefSpan::~BriefSpan() {
  // @@protoc_insertion_point(destructor:brpc.BriefSpan)
  SharedDtor();
}

void BriefSpan::SharedDtor() {
  if (full_method_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete full_method_name_;
  }
  if (this != default_instance_) {
  }
}

void BriefSpan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BriefSpan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BriefSpan_descriptor_;
}

const BriefSpan& BriefSpan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fspan_2eproto();
  return *default_instance_;
}

BriefSpan* BriefSpan::default_instance_ = NULL;

BriefSpan* BriefSpan::New() const {
  return new BriefSpan;
}

void BriefSpan::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BriefSpan*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(trace_id_, start_real_us_);
  }
  if (_has_bits_[8 / 32] & 768) {
    latency_us_ = GOOGLE_LONGLONG(0);
    if (has_full_method_name()) {
      if (full_method_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        full_method_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BriefSpan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.BriefSpan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 trace_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trace_id_)));
          set_has_trace_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_span_id;
        break;
      }

      // required uint64 span_id = 2;
      case 2: {
        if (tag == 16) {
         parse_span_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &span_id_)));
          set_has_span_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_log_id;
        break;
      }

      // optional uint64 log_id = 3;
      case 3: {
        if (tag == 24) {
         parse_log_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_id_)));
          set_has_log_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .brpc.SpanType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::SpanType_IsValid(value)) {
            set_type(static_cast< ::brpc::SpanType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 5;
      case 5: {
        if (tag == 40) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_request_size;
        break;
      }

      // optional int32 request_size = 6;
      case 6: {
        if (tag == 48) {
         parse_request_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_size_)));
          set_has_request_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_response_size;
        break;
      }

      // optional int32 response_size = 7;
      case 7: {
        if (tag == 56) {
         parse_response_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_size_)));
          set_has_response_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_start_real_us;
        break;
      }

      // optional int64 start_real_us = 8;
      case 8: {
        if (tag == 64) {
         parse_start_real_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_real_us_)));
          set_has_start_real_us();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_latency_us;
        break;
      }

      // optional int64 latency_us = 9;
      case 9: {
        if (tag == 72) {
         parse_latency_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &latency_us_)));
          set_has_latency_us();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_full_method_name;
        break;
      }

      // optional bytes full_method_name = 10;
      case 10: {
        if (tag == 82) {
         parse_full_method_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_full_method_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.BriefSpan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.BriefSpan)
  return false;
#undef DO_
}

void BriefSpan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.BriefSpan)
  // required uint64 trace_id = 1;
  if (has_trace_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->trace_id(), output);
  }

  // required uint64 span_id = 2;
  if (has_span_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->span_id(), output);
  }

  // optional uint64 log_id = 3;
  if (has_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->log_id(), output);
  }

  // optional .brpc.SpanType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional int32 error_code = 5;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->error_code(), output);
  }

  // optional int32 request_size = 6;
  if (has_request_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->request_size(), output);
  }

  // optional int32 response_size = 7;
  if (has_response_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->response_size(), output);
  }

  // optional int64 start_real_us = 8;
  if (has_start_real_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->start_real_us(), output);
  }

  // optional int64 latency_us = 9;
  if (has_latency_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->latency_us(), output);
  }

  // optional bytes full_method_name = 10;
  if (has_full_method_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->full_method_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.BriefSpan)
}

::google::protobuf::uint8* BriefSpan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.BriefSpan)
  // required uint64 trace_id = 1;
  if (has_trace_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->trace_id(), target);
  }

  // required uint64 span_id = 2;
  if (has_span_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->span_id(), target);
  }

  // optional uint64 log_id = 3;
  if (has_log_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->log_id(), target);
  }

  // optional .brpc.SpanType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional int32 error_code = 5;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->error_code(), target);
  }

  // optional int32 request_size = 6;
  if (has_request_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->request_size(), target);
  }

  // optional int32 response_size = 7;
  if (has_response_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->response_size(), target);
  }

  // optional int64 start_real_us = 8;
  if (has_start_real_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->start_real_us(), target);
  }

  // optional int64 latency_us = 9;
  if (has_latency_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->latency_us(), target);
  }

  // optional bytes full_method_name = 10;
  if (has_full_method_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->full_method_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.BriefSpan)
  return target;
}

int BriefSpan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 trace_id = 1;
    if (has_trace_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trace_id());
    }

    // required uint64 span_id = 2;
    if (has_span_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->span_id());
    }

    // optional uint64 log_id = 3;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_id());
    }

    // optional .brpc.SpanType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 error_code = 5;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional int32 request_size = 6;
    if (has_request_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_size());
    }

    // optional int32 response_size = 7;
    if (has_response_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response_size());
    }

    // optional int64 start_real_us = 8;
    if (has_start_real_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_real_us());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 latency_us = 9;
    if (has_latency_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->latency_us());
    }

    // optional bytes full_method_name = 10;
    if (has_full_method_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->full_method_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BriefSpan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BriefSpan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BriefSpan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BriefSpan::MergeFrom(const BriefSpan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trace_id()) {
      set_trace_id(from.trace_id());
    }
    if (from.has_span_id()) {
      set_span_id(from.span_id());
    }
    if (from.has_log_id()) {
      set_log_id(from.log_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_request_size()) {
      set_request_size(from.request_size());
    }
    if (from.has_response_size()) {
      set_response_size(from.response_size());
    }
    if (from.has_start_real_us()) {
      set_start_real_us(from.start_real_us());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_latency_us()) {
      set_latency_us(from.latency_us());
    }
    if (from.has_full_method_name()) {
      set_full_method_name(from.full_method_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BriefSpan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BriefSpan::CopyFrom(const BriefSpan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BriefSpan::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BriefSpan::Swap(BriefSpan* other) {
  if (other != this) {
    std::swap(trace_id_, other->trace_id_);
    std::swap(span_id_, other->span_id_);
    std::swap(log_id_, other->log_id_);
    std::swap(type_, other->type_);
    std::swap(error_code_, other->error_code_);
    std::swap(request_size_, other->request_size_);
    std::swap(response_size_, other->response_size_);
    std::swap(start_real_us_, other->start_real_us_);
    std::swap(latency_us_, other->latency_us_);
    std::swap(full_method_name_, other->full_method_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BriefSpan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BriefSpan_descriptor_;
  metadata.reflection = BriefSpan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpanAnnotation::kRealtimeUsFieldNumber;
const int SpanAnnotation::kContentFieldNumber;
#endif  // !_MSC_VER

SpanAnnotation::SpanAnnotation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.SpanAnnotation)
}

void SpanAnnotation::InitAsDefaultInstance() {
}

SpanAnnotation::SpanAnnotation(const SpanAnnotation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.SpanAnnotation)
}

void SpanAnnotation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  realtime_us_ = GOOGLE_LONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpanAnnotation::~SpanAnnotation() {
  // @@protoc_insertion_point(destructor:brpc.SpanAnnotation)
  SharedDtor();
}

void SpanAnnotation::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void SpanAnnotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpanAnnotation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpanAnnotation_descriptor_;
}

const SpanAnnotation& SpanAnnotation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fspan_2eproto();
  return *default_instance_;
}

SpanAnnotation* SpanAnnotation::default_instance_ = NULL;

SpanAnnotation* SpanAnnotation::New() const {
  return new SpanAnnotation;
}

void SpanAnnotation::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    realtime_us_ = GOOGLE_LONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpanAnnotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.SpanAnnotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 realtime_us = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &realtime_us_)));
          set_has_realtime_us();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // required string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.SpanAnnotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.SpanAnnotation)
  return false;
#undef DO_
}

void SpanAnnotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.SpanAnnotation)
  // required int64 realtime_us = 1;
  if (has_realtime_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->realtime_us(), output);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.SpanAnnotation)
}

::google::protobuf::uint8* SpanAnnotation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.SpanAnnotation)
  // required int64 realtime_us = 1;
  if (has_realtime_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->realtime_us(), target);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.SpanAnnotation)
  return target;
}

int SpanAnnotation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 realtime_us = 1;
    if (has_realtime_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->realtime_us());
    }

    // required string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpanAnnotation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpanAnnotation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpanAnnotation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpanAnnotation::MergeFrom(const SpanAnnotation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_realtime_us()) {
      set_realtime_us(from.realtime_us());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpanAnnotation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpanAnnotation::CopyFrom(const SpanAnnotation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanAnnotation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SpanAnnotation::Swap(SpanAnnotation* other) {
  if (other != this) {
    std::swap(realtime_us_, other->realtime_us_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpanAnnotation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpanAnnotation_descriptor_;
  metadata.reflection = SpanAnnotation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TracingSpan::kTraceIdFieldNumber;
const int TracingSpan::kSpanIdFieldNumber;
const int TracingSpan::kParentSpanIdFieldNumber;
const int TracingSpan::kLogIdFieldNumber;
const int TracingSpan::kRemoteIpFieldNumber;
const int TracingSpan::kRemotePortFieldNumber;
const int TracingSpan::kTypeFieldNumber;
const int TracingSpan::kProtocolFieldNumber;
const int TracingSpan::kErrorCodeFieldNumber;
const int TracingSpan::kRequestSizeFieldNumber;
const int TracingSpan::kResponseSizeFieldNumber;
const int TracingSpan::kReceivedRealUsFieldNumber;
const int TracingSpan::kStartParseRealUsFieldNumber;
const int TracingSpan::kStartCallbackRealUsFieldNumber;
const int TracingSpan::kStartSendRealUsFieldNumber;
const int TracingSpan::kSentRealUsFieldNumber;
const int TracingSpan::kSpanNameFieldNumber;
const int TracingSpan::kAnnotationsFieldNumber;
const int TracingSpan::kClientSpansFieldNumber;
#endif  // !_MSC_VER

TracingSpan::TracingSpan()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.TracingSpan)
}

void TracingSpan::InitAsDefaultInstance() {
}

TracingSpan::TracingSpan(const TracingSpan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.TracingSpan)
}

void TracingSpan::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  trace_id_ = GOOGLE_ULONGLONG(0);
  span_id_ = GOOGLE_ULONGLONG(0);
  parent_span_id_ = GOOGLE_ULONGLONG(0);
  log_id_ = GOOGLE_ULONGLONG(0);
  remote_ip_ = 0u;
  remote_port_ = 0u;
  type_ = 0;
  protocol_ = 0;
  error_code_ = 0;
  request_size_ = 0;
  response_size_ = 0;
  received_real_us_ = GOOGLE_LONGLONG(0);
  start_parse_real_us_ = GOOGLE_LONGLONG(0);
  start_callback_real_us_ = GOOGLE_LONGLONG(0);
  start_send_real_us_ = GOOGLE_LONGLONG(0);
  sent_real_us_ = GOOGLE_LONGLONG(0);
  span_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TracingSpan::~TracingSpan() {
  // @@protoc_insertion_point(destructor:brpc.TracingSpan)
  SharedDtor();
}

void TracingSpan::SharedDtor() {
  if (span_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete span_name_;
  }
  if (this != default_instance_) {
  }
}

void TracingSpan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TracingSpan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TracingSpan_descriptor_;
}

const TracingSpan& TracingSpan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fspan_2eproto();
  return *default_instance_;
}

TracingSpan* TracingSpan::default_instance_ = NULL;

TracingSpan* TracingSpan::New() const {
  return new TracingSpan;
}

void TracingSpan::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TracingSpan*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(trace_id_, protocol_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(error_code_, sent_real_us_);
    response_size_ = 0;
  }
  if (has_span_name()) {
    if (span_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      span_name_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  annotations_.Clear();
  client_spans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TracingSpan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.TracingSpan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 trace_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trace_id_)));
          set_has_trace_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_span_id;
        break;
      }

      // required uint64 span_id = 2;
      case 2: {
        if (tag == 16) {
         parse_span_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &span_id_)));
          set_has_span_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_parent_span_id;
        break;
      }

      // required uint64 parent_span_id = 3;
      case 3: {
        if (tag == 24) {
         parse_parent_span_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parent_span_id_)));
          set_has_parent_span_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_log_id;
        break;
      }

      // optional uint64 log_id = 4;
      case 4: {
        if (tag == 32) {
         parse_log_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_id_)));
          set_has_log_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_remote_ip;
        break;
      }

      // optional uint32 remote_ip = 5;
      case 5: {
        if (tag == 40) {
         parse_remote_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_ip_)));
          set_has_remote_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_remote_port;
        break;
      }

      // optional uint32 remote_port = 6;
      case 6: {
        if (tag == 48) {
         parse_remote_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_port_)));
          set_has_remote_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional .brpc.SpanType type = 7;
      case 7: {
        if (tag == 56) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::SpanType_IsValid(value)) {
            set_type(static_cast< ::brpc::SpanType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_protocol;
        break;
      }

      // optional .brpc.ProtocolType protocol = 8;
      case 8: {
        if (tag == 64) {
         parse_protocol:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::ProtocolType_IsValid(value)) {
            set_protocol(static_cast< ::brpc::ProtocolType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 9;
      case 9: {
        if (tag == 72) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_request_size;
        break;
      }

      // optional int32 request_size = 10;
      case 10: {
        if (tag == 80) {
         parse_request_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_size_)));
          set_has_request_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_response_size;
        break;
      }

      // optional int32 response_size = 11;
      case 11: {
        if (tag == 88) {
         parse_response_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_size_)));
          set_has_response_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_received_real_us;
        break;
      }

      // optional int64 received_real_us = 12;
      case 12: {
        if (tag == 96) {
         parse_received_real_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &received_real_us_)));
          set_has_received_real_us();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_start_parse_real_us;
        break;
      }

      // optional int64 start_parse_real_us = 13;
      case 13: {
        if (tag == 104) {
         parse_start_parse_real_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_parse_real_us_)));
          set_has_start_parse_real_us();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_start_callback_real_us;
        break;
      }

      // optional int64 start_callback_real_us = 14;
      case 14: {
        if (tag == 112) {
         parse_start_callback_real_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_callback_real_us_)));
          set_has_start_callback_real_us();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_start_send_real_us;
        break;
      }

      // optional int64 start_send_real_us = 15;
      case 15: {
        if (tag == 120) {
         parse_start_send_real_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_send_real_us_)));
          set_has_start_send_real_us();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_sent_real_us;
        break;
      }

      // optional int64 sent_real_us = 16;
      case 16: {
        if (tag == 128) {
         parse_sent_real_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sent_real_us_)));
          set_has_sent_real_us();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_span_name;
        break;
      }

      // optional string span_name = 17;
      case 17: {
        if (tag == 138) {
         parse_span_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_span_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->span_name().data(), this->span_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "span_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_annotations;
        break;
      }

      // repeated .brpc.SpanAnnotation annotations = 18;
      case 18: {
        if (tag == 146) {
         parse_annotations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_annotations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_annotations;
        if (input->ExpectTag(154)) goto parse_client_spans;
        break;
      }

      // repeated .brpc.TracingSpan client_spans = 19;
      case 19: {
        if (tag == 154) {
         parse_client_spans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_client_spans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_client_spans;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.TracingSpan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.TracingSpan)
  return false;
#undef DO_
}

void TracingSpan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.TracingSpan)
  // required uint64 trace_id = 1;
  if (has_trace_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->trace_id(), output);
  }

  // required uint64 span_id = 2;
  if (has_span_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->span_id(), output);
  }

  // required uint64 parent_span_id = 3;
  if (has_parent_span_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->parent_span_id(), output);
  }

  // optional uint64 log_id = 4;
  if (has_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->log_id(), output);
  }

  // optional uint32 remote_ip = 5;
  if (has_remote_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->remote_ip(), output);
  }

  // optional uint32 remote_port = 6;
  if (has_remote_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->remote_port(), output);
  }

  // optional .brpc.SpanType type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  // optional .brpc.ProtocolType protocol = 8;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->protocol(), output);
  }

  // optional int32 error_code = 9;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->error_code(), output);
  }

  // optional int32 request_size = 10;
  if (has_request_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->request_size(), output);
  }

  // optional int32 response_size = 11;
  if (has_response_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->response_size(), output);
  }

  // optional int64 received_real_us = 12;
  if (has_received_real_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->received_real_us(), output);
  }

  // optional int64 start_parse_real_us = 13;
  if (has_start_parse_real_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->start_parse_real_us(), output);
  }

  // optional int64 start_callback_real_us = 14;
  if (has_start_callback_real_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->start_callback_real_us(), output);
  }

  // optional int64 start_send_real_us = 15;
  if (has_start_send_real_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->start_send_real_us(), output);
  }

  // optional int64 sent_real_us = 16;
  if (has_sent_real_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->sent_real_us(), output);
  }

  // optional string span_name = 17;
  if (has_span_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->span_name().data(), this->span_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "span_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->span_name(), output);
  }

  // repeated .brpc.SpanAnnotation annotations = 18;
  for (int i = 0; i < this->annotations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->annotations(i), output);
  }

  // repeated .brpc.TracingSpan client_spans = 19;
  for (int i = 0; i < this->client_spans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->client_spans(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.TracingSpan)
}

::google::protobuf::uint8* TracingSpan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.TracingSpan)
  // required uint64 trace_id = 1;
  if (has_trace_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->trace_id(), target);
  }

  // required uint64 span_id = 2;
  if (has_span_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->span_id(), target);
  }

  // required uint64 parent_span_id = 3;
  if (has_parent_span_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->parent_span_id(), target);
  }

  // optional uint64 log_id = 4;
  if (has_log_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->log_id(), target);
  }

  // optional uint32 remote_ip = 5;
  if (has_remote_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->remote_ip(), target);
  }

  // optional uint32 remote_port = 6;
  if (has_remote_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->remote_port(), target);
  }

  // optional .brpc.SpanType type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  // optional .brpc.ProtocolType protocol = 8;
  if (has_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->protocol(), target);
  }

  // optional int32 error_code = 9;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->error_code(), target);
  }

  // optional int32 request_size = 10;
  if (has_request_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->request_size(), target);
  }

  // optional int32 response_size = 11;
  if (has_response_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->response_size(), target);
  }

  // optional int64 received_real_us = 12;
  if (has_received_real_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->received_real_us(), target);
  }

  // optional int64 start_parse_real_us = 13;
  if (has_start_parse_real_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->start_parse_real_us(), target);
  }

  // optional int64 start_callback_real_us = 14;
  if (has_start_callback_real_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->start_callback_real_us(), target);
  }

  // optional int64 start_send_real_us = 15;
  if (has_start_send_real_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->start_send_real_us(), target);
  }

  // optional int64 sent_real_us = 16;
  if (has_sent_real_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->sent_real_us(), target);
  }

  // optional string span_name = 17;
  if (has_span_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->span_name().data(), this->span_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "span_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->span_name(), target);
  }

  // repeated .brpc.SpanAnnotation annotations = 18;
  for (int i = 0; i < this->annotations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->annotations(i), target);
  }

  // repeated .brpc.TracingSpan client_spans = 19;
  for (int i = 0; i < this->client_spans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->client_spans(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.TracingSpan)
  return target;
}

int TracingSpan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 trace_id = 1;
    if (has_trace_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trace_id());
    }

    // required uint64 span_id = 2;
    if (has_span_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->span_id());
    }

    // required uint64 parent_span_id = 3;
    if (has_parent_span_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parent_span_id());
    }

    // optional uint64 log_id = 4;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_id());
    }

    // optional uint32 remote_ip = 5;
    if (has_remote_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remote_ip());
    }

    // optional uint32 remote_port = 6;
    if (has_remote_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remote_port());
    }

    // optional .brpc.SpanType type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .brpc.ProtocolType protocol = 8;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 error_code = 9;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional int32 request_size = 10;
    if (has_request_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_size());
    }

    // optional int32 response_size = 11;
    if (has_response_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response_size());
    }

    // optional int64 received_real_us = 12;
    if (has_received_real_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->received_real_us());
    }

    // optional int64 start_parse_real_us = 13;
    if (has_start_parse_real_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_parse_real_us());
    }

    // optional int64 start_callback_real_us = 14;
    if (has_start_callback_real_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_callback_real_us());
    }

    // optional int64 start_send_real_us = 15;
    if (has_start_send_real_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_send_real_us());
    }

    // optional int64 sent_real_us = 16;
    if (has_sent_real_us()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sent_real_us());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string span_name = 17;
    if (has_span_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->span_name());
    }

  }
  // repeated .brpc.SpanAnnotation annotations = 18;
  total_size += 2 * this->annotations_size();
  for (int i = 0; i < this->annotations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->annotations(i));
  }

  // repeated .brpc.TracingSpan client_spans = 19;
  total_size += 2 * this->client_spans_size();
  for (int i = 0; i < this->client_spans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->client_spans(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TracingSpan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TracingSpan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TracingSpan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TracingSpan::MergeFrom(const TracingSpan& from) {
  GOOGLE_CHECK_NE(&from, this);
  annotations_.MergeFrom(from.annotations_);
  client_spans_.MergeFrom(from.client_spans_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trace_id()) {
      set_trace_id(from.trace_id());
    }
    if (from.has_span_id()) {
      set_span_id(from.span_id());
    }
    if (from.has_parent_span_id()) {
      set_parent_span_id(from.parent_span_id());
    }
    if (from.has_log_id()) {
      set_log_id(from.log_id());
    }
    if (from.has_remote_ip()) {
      set_remote_ip(from.remote_ip());
    }
    if (from.has_remote_port()) {
      set_remote_port(from.remote_port());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_request_size()) {
      set_request_size(from.request_size());
    }
    if (from.has_response_size()) {
      set_response_size(from.response_size());
    }
    if (from.has_received_real_us()) {
      set_received_real_us(from.received_real_us());
    }
    if (from.has_start_parse_real_us()) {
      set_start_parse_real_us(from.start_parse_real_us());
    }
    if (from.has_start_callback_real_us()) {
      set_start_callback_real_us(from.start_callback_real_us());
    }
    if (from.has_start_send_real_us()) {
      set_start_send_real_us(from.start_send_real_us());
    }
    if (from.has_sent_real_us()) {
      set_sent_real_us(from.sent_real_us());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_span_name()) {
      set_span_name(from.span_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TracingSpan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TracingSpan::CopyFrom(const TracingSpan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingSpan::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->annotations())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->client_spans())) return false;
  return true;
}

void TracingSpan::Swap(TracingSpan* other) {
  if (other != this) {
    std::swap(trace_id_, other->trace_id_);
    std::swap(span_id_, other->span_id_);
    std::swap(parent_span_id_, other->parent_span_id_);
    std::swap(log_id_, other->log_id_);
    std::swap(remote_ip_, other->remote_ip_);
    std::swap(remote_port_, other->remote_port_);
    std::swap(type_, other->type_);
    std::swap(protocol_, other->protocol_);
    std::swap(error_code_, other->error_code_);
    std::swap(request_size_, other->request_size_);
    std::swap(response_size_, other->response_size_);
    std::swap(received_real_us_, other->received_real_us_);
    std::swap(start_parse_real_us_, other->start_parse_real_us_);
    std::swap(start_callback_real_us_, other->start_callback_real_us_);
    std::swap(start_send_real_us_, other->start_send_real_us_);
    std::swap(sent_real_us_, other->sent_real_us_);
    std::swap(span_name_, other->span_name_);
    annotations_.Swap(&other->annotations_);
    client_spans_.Swap(&other->client_spans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TracingSpan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TracingSpan_descriptor_;
  metadata.reflection = TracingSpan_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace brpc

// @@protoc_insertion_point(global_scope)
