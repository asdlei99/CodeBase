// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/public_pbrpc_meta.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "brpc/policy/public_pbrpc_meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace brpc {
namespace policy {

namespace {

const ::google::protobuf::Descriptor* PublicPbrpcRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublicPbrpcRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublicPbrpcResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublicPbrpcResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseBody_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto() {
  protobuf_AddDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "brpc/policy/public_pbrpc_meta.proto");
  GOOGLE_CHECK(file != NULL);
  PublicPbrpcRequest_descriptor_ = file->message_type(0);
  static const int PublicPbrpcRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicPbrpcRequest, requesthead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicPbrpcRequest, requestbody_),
  };
  PublicPbrpcRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PublicPbrpcRequest_descriptor_,
      PublicPbrpcRequest::default_instance_,
      PublicPbrpcRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicPbrpcRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicPbrpcRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PublicPbrpcRequest));
  RequestHead_descriptor_ = file->message_type(1);
  static const int RequestHead_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHead, from_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHead, content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHead, connection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHead, charset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHead, accept_charset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHead, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHead, log_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHead, compress_type_),
  };
  RequestHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestHead_descriptor_,
      RequestHead::default_instance_,
      RequestHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestHead));
  RequestBody_descriptor_ = file->message_type(2);
  static const int RequestBody_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBody, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBody, charset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBody, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBody, method_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBody, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBody, serialized_request_),
  };
  RequestBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestBody_descriptor_,
      RequestBody::default_instance_,
      RequestBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestBody));
  PublicPbrpcResponse_descriptor_ = file->message_type(3);
  static const int PublicPbrpcResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicPbrpcResponse, responsehead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicPbrpcResponse, responsebody_),
  };
  PublicPbrpcResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PublicPbrpcResponse_descriptor_,
      PublicPbrpcResponse::default_instance_,
      PublicPbrpcResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicPbrpcResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicPbrpcResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PublicPbrpcResponse));
  ResponseHead_descriptor_ = file->message_type(4);
  static const int ResponseHead_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHead, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHead, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHead, from_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHead, compress_type_),
  };
  ResponseHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseHead_descriptor_,
      ResponseHead::default_instance_,
      ResponseHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseHead));
  ResponseBody_descriptor_ = file->message_type(5);
  static const int ResponseBody_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBody, serialized_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBody, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBody, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBody, id_),
  };
  ResponseBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseBody_descriptor_,
      ResponseBody::default_instance_,
      ResponseBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseBody));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PublicPbrpcRequest_descriptor_, &PublicPbrpcRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestHead_descriptor_, &RequestHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestBody_descriptor_, &RequestBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PublicPbrpcResponse_descriptor_, &PublicPbrpcResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseHead_descriptor_, &ResponseHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseBody_descriptor_, &ResponseBody::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto() {
  delete PublicPbrpcRequest::default_instance_;
  delete PublicPbrpcRequest_reflection_;
  delete RequestHead::default_instance_;
  delete RequestHead_reflection_;
  delete RequestBody::default_instance_;
  delete RequestBody_reflection_;
  delete PublicPbrpcResponse::default_instance_;
  delete PublicPbrpcResponse_reflection_;
  delete ResponseHead::default_instance_;
  delete ResponseHead_reflection_;
  delete ResponseBody::default_instance_;
  delete ResponseBody_reflection_;
}

void protobuf_AddDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#brpc/policy/public_pbrpc_meta.proto\022\013b"
    "rpc.policy\"r\n\022PublicPbrpcRequest\022-\n\013requ"
    "estHead\030\001 \001(\0132\030.brpc.policy.RequestHead\022"
    "-\n\013requestBody\030\002 \003(\0132\030.brpc.policy.Reque"
    "stBody\"\257\001\n\013RequestHead\022\021\n\tfrom_host\030\001 \001("
    "\t\022\024\n\014content_type\030\002 \001(\r\022\022\n\nconnection\030\003 "
    "\001(\010\022\017\n\007charset\030\004 \001(\t\022\026\n\016accept_charset\030\005"
    " \001(\t\022\023\n\013create_time\030\006 \001(\t\022\016\n\006log_id\030\007 \001("
    "\004\022\025\n\rcompress_type\030\010 \001(\r\"{\n\013RequestBody\022"
    "\017\n\007version\030\001 \001(\t\022\017\n\007charset\030\002 \001(\t\022\017\n\007ser"
    "vice\030\003 \002(\t\022\021\n\tmethod_id\030\004 \002(\r\022\n\n\002id\030\005 \002("
    "\004\022\032\n\022serialized_request\030\006 \001(\014\"w\n\023PublicP"
    "brpcResponse\022/\n\014responseHead\030\001 \001(\0132\031.brp"
    "c.policy.ResponseHead\022/\n\014responseBody\030\002 "
    "\003(\0132\031.brpc.policy.ResponseBody\"T\n\014Respon"
    "seHead\022\014\n\004code\030\001 \002(\021\022\014\n\004text\030\002 \001(\t\022\021\n\tfr"
    "om_host\030\003 \001(\t\022\025\n\rcompress_type\030\004 \001(\r\"W\n\014"
    "ResponseBody\022\033\n\023serialized_response\030\001 \001("
    "\014\022\017\n\007version\030\002 \001(\t\022\r\n\005error\030\003 \001(\005\022\n\n\002id\030"
    "\004 \002(\004B#\n\017com.brpc.policyB\020PublicPbrpcPro"
    "to", 802);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/policy/public_pbrpc_meta.proto", &protobuf_RegisterTypes);
  PublicPbrpcRequest::default_instance_ = new PublicPbrpcRequest();
  RequestHead::default_instance_ = new RequestHead();
  RequestBody::default_instance_ = new RequestBody();
  PublicPbrpcResponse::default_instance_ = new PublicPbrpcResponse();
  ResponseHead::default_instance_ = new ResponseHead();
  ResponseBody::default_instance_ = new ResponseBody();
  PublicPbrpcRequest::default_instance_->InitAsDefaultInstance();
  RequestHead::default_instance_->InitAsDefaultInstance();
  RequestBody::default_instance_->InitAsDefaultInstance();
  PublicPbrpcResponse::default_instance_->InitAsDefaultInstance();
  ResponseHead::default_instance_->InitAsDefaultInstance();
  ResponseBody::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto {
  StaticDescriptorInitializer_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto() {
    protobuf_AddDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto();
  }
} static_descriptor_initializer_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PublicPbrpcRequest::kRequestHeadFieldNumber;
const int PublicPbrpcRequest::kRequestBodyFieldNumber;
#endif  // !_MSC_VER

PublicPbrpcRequest::PublicPbrpcRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.PublicPbrpcRequest)
}

void PublicPbrpcRequest::InitAsDefaultInstance() {
  requesthead_ = const_cast< ::brpc::policy::RequestHead*>(&::brpc::policy::RequestHead::default_instance());
}

PublicPbrpcRequest::PublicPbrpcRequest(const PublicPbrpcRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.policy.PublicPbrpcRequest)
}

void PublicPbrpcRequest::SharedCtor() {
  _cached_size_ = 0;
  requesthead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublicPbrpcRequest::~PublicPbrpcRequest() {
  // @@protoc_insertion_point(destructor:brpc.policy.PublicPbrpcRequest)
  SharedDtor();
}

void PublicPbrpcRequest::SharedDtor() {
  if (this != default_instance_) {
    delete requesthead_;
  }
}

void PublicPbrpcRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublicPbrpcRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublicPbrpcRequest_descriptor_;
}

const PublicPbrpcRequest& PublicPbrpcRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto();
  return *default_instance_;
}

PublicPbrpcRequest* PublicPbrpcRequest::default_instance_ = NULL;

PublicPbrpcRequest* PublicPbrpcRequest::New() const {
  return new PublicPbrpcRequest;
}

void PublicPbrpcRequest::Clear() {
  if (has_requesthead()) {
    if (requesthead_ != NULL) requesthead_->::brpc::policy::RequestHead::Clear();
  }
  requestbody_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PublicPbrpcRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.PublicPbrpcRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .brpc.policy.RequestHead requestHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requesthead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_requestBody;
        break;
      }

      // repeated .brpc.policy.RequestBody requestBody = 2;
      case 2: {
        if (tag == 18) {
         parse_requestBody:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requestbody()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_requestBody;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.PublicPbrpcRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.PublicPbrpcRequest)
  return false;
#undef DO_
}

void PublicPbrpcRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.PublicPbrpcRequest)
  // optional .brpc.policy.RequestHead requestHead = 1;
  if (has_requesthead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requesthead(), output);
  }

  // repeated .brpc.policy.RequestBody requestBody = 2;
  for (int i = 0; i < this->requestbody_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->requestbody(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.PublicPbrpcRequest)
}

::google::protobuf::uint8* PublicPbrpcRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.PublicPbrpcRequest)
  // optional .brpc.policy.RequestHead requestHead = 1;
  if (has_requesthead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requesthead(), target);
  }

  // repeated .brpc.policy.RequestBody requestBody = 2;
  for (int i = 0; i < this->requestbody_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->requestbody(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.PublicPbrpcRequest)
  return target;
}

int PublicPbrpcRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .brpc.policy.RequestHead requestHead = 1;
    if (has_requesthead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requesthead());
    }

  }
  // repeated .brpc.policy.RequestBody requestBody = 2;
  total_size += 1 * this->requestbody_size();
  for (int i = 0; i < this->requestbody_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requestbody(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublicPbrpcRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PublicPbrpcRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PublicPbrpcRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublicPbrpcRequest::MergeFrom(const PublicPbrpcRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  requestbody_.MergeFrom(from.requestbody_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesthead()) {
      mutable_requesthead()->::brpc::policy::RequestHead::MergeFrom(from.requesthead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PublicPbrpcRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicPbrpcRequest::CopyFrom(const PublicPbrpcRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicPbrpcRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->requestbody())) return false;
  return true;
}

void PublicPbrpcRequest::Swap(PublicPbrpcRequest* other) {
  if (other != this) {
    std::swap(requesthead_, other->requesthead_);
    requestbody_.Swap(&other->requestbody_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PublicPbrpcRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublicPbrpcRequest_descriptor_;
  metadata.reflection = PublicPbrpcRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestHead::kFromHostFieldNumber;
const int RequestHead::kContentTypeFieldNumber;
const int RequestHead::kConnectionFieldNumber;
const int RequestHead::kCharsetFieldNumber;
const int RequestHead::kAcceptCharsetFieldNumber;
const int RequestHead::kCreateTimeFieldNumber;
const int RequestHead::kLogIdFieldNumber;
const int RequestHead::kCompressTypeFieldNumber;
#endif  // !_MSC_VER

RequestHead::RequestHead()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.RequestHead)
}

void RequestHead::InitAsDefaultInstance() {
}

RequestHead::RequestHead(const RequestHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.policy.RequestHead)
}

void RequestHead::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_ = 0u;
  connection_ = false;
  charset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accept_charset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_id_ = GOOGLE_ULONGLONG(0);
  compress_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestHead::~RequestHead() {
  // @@protoc_insertion_point(destructor:brpc.policy.RequestHead)
  SharedDtor();
}

void RequestHead::SharedDtor() {
  if (from_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_host_;
  }
  if (charset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charset_;
  }
  if (accept_charset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accept_charset_;
  }
  if (create_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete create_time_;
  }
  if (this != default_instance_) {
  }
}

void RequestHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestHead_descriptor_;
}

const RequestHead& RequestHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto();
  return *default_instance_;
}

RequestHead* RequestHead::default_instance_ = NULL;

RequestHead* RequestHead::New() const {
  return new RequestHead;
}

void RequestHead::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestHead*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(content_type_, connection_);
    ZR_(log_id_, compress_type_);
    if (has_from_host()) {
      if (from_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_host_->clear();
      }
    }
    if (has_charset()) {
      if (charset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charset_->clear();
      }
    }
    if (has_accept_charset()) {
      if (accept_charset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accept_charset_->clear();
      }
    }
    if (has_create_time()) {
      if (create_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        create_time_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.RequestHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string from_host = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_host().data(), this->from_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "from_host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_content_type;
        break;
      }

      // optional uint32 content_type = 2;
      case 2: {
        if (tag == 16) {
         parse_content_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &content_type_)));
          set_has_content_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_connection;
        break;
      }

      // optional bool connection = 3;
      case 3: {
        if (tag == 24) {
         parse_connection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connection_)));
          set_has_connection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charset;
        break;
      }

      // optional string charset = 4;
      case 4: {
        if (tag == 34) {
         parse_charset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charset().data(), this->charset().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charset");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_accept_charset;
        break;
      }

      // optional string accept_charset = 5;
      case 5: {
        if (tag == 42) {
         parse_accept_charset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accept_charset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accept_charset().data(), this->accept_charset().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accept_charset");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_create_time;
        break;
      }

      // optional string create_time = 6;
      case 6: {
        if (tag == 50) {
         parse_create_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->create_time().data(), this->create_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "create_time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_log_id;
        break;
      }

      // optional uint64 log_id = 7;
      case 7: {
        if (tag == 56) {
         parse_log_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_id_)));
          set_has_log_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_compress_type;
        break;
      }

      // optional uint32 compress_type = 8;
      case 8: {
        if (tag == 64) {
         parse_compress_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compress_type_)));
          set_has_compress_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.RequestHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.RequestHead)
  return false;
#undef DO_
}

void RequestHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.RequestHead)
  // optional string from_host = 1;
  if (has_from_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_host().data(), this->from_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_host(), output);
  }

  // optional uint32 content_type = 2;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->content_type(), output);
  }

  // optional bool connection = 3;
  if (has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->connection(), output);
  }

  // optional string charset = 4;
  if (has_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charset().data(), this->charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->charset(), output);
  }

  // optional string accept_charset = 5;
  if (has_accept_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accept_charset().data(), this->accept_charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accept_charset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->accept_charset(), output);
  }

  // optional string create_time = 6;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->create_time().data(), this->create_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "create_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->create_time(), output);
  }

  // optional uint64 log_id = 7;
  if (has_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->log_id(), output);
  }

  // optional uint32 compress_type = 8;
  if (has_compress_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->compress_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.RequestHead)
}

::google::protobuf::uint8* RequestHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.RequestHead)
  // optional string from_host = 1;
  if (has_from_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_host().data(), this->from_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_host(), target);
  }

  // optional uint32 content_type = 2;
  if (has_content_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->content_type(), target);
  }

  // optional bool connection = 3;
  if (has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->connection(), target);
  }

  // optional string charset = 4;
  if (has_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charset().data(), this->charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->charset(), target);
  }

  // optional string accept_charset = 5;
  if (has_accept_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accept_charset().data(), this->accept_charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accept_charset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->accept_charset(), target);
  }

  // optional string create_time = 6;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->create_time().data(), this->create_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "create_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->create_time(), target);
  }

  // optional uint64 log_id = 7;
  if (has_log_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->log_id(), target);
  }

  // optional uint32 compress_type = 8;
  if (has_compress_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->compress_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.RequestHead)
  return target;
}

int RequestHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string from_host = 1;
    if (has_from_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_host());
    }

    // optional uint32 content_type = 2;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->content_type());
    }

    // optional bool connection = 3;
    if (has_connection()) {
      total_size += 1 + 1;
    }

    // optional string charset = 4;
    if (has_charset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charset());
    }

    // optional string accept_charset = 5;
    if (has_accept_charset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accept_charset());
    }

    // optional string create_time = 6;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_time());
    }

    // optional uint64 log_id = 7;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_id());
    }

    // optional uint32 compress_type = 8;
    if (has_compress_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compress_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestHead::MergeFrom(const RequestHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_host()) {
      set_from_host(from.from_host());
    }
    if (from.has_content_type()) {
      set_content_type(from.content_type());
    }
    if (from.has_connection()) {
      set_connection(from.connection());
    }
    if (from.has_charset()) {
      set_charset(from.charset());
    }
    if (from.has_accept_charset()) {
      set_accept_charset(from.accept_charset());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_log_id()) {
      set_log_id(from.log_id());
    }
    if (from.has_compress_type()) {
      set_compress_type(from.compress_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHead::CopyFrom(const RequestHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHead::IsInitialized() const {

  return true;
}

void RequestHead::Swap(RequestHead* other) {
  if (other != this) {
    std::swap(from_host_, other->from_host_);
    std::swap(content_type_, other->content_type_);
    std::swap(connection_, other->connection_);
    std::swap(charset_, other->charset_);
    std::swap(accept_charset_, other->accept_charset_);
    std::swap(create_time_, other->create_time_);
    std::swap(log_id_, other->log_id_);
    std::swap(compress_type_, other->compress_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestHead_descriptor_;
  metadata.reflection = RequestHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestBody::kVersionFieldNumber;
const int RequestBody::kCharsetFieldNumber;
const int RequestBody::kServiceFieldNumber;
const int RequestBody::kMethodIdFieldNumber;
const int RequestBody::kIdFieldNumber;
const int RequestBody::kSerializedRequestFieldNumber;
#endif  // !_MSC_VER

RequestBody::RequestBody()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.RequestBody)
}

void RequestBody::InitAsDefaultInstance() {
}

RequestBody::RequestBody(const RequestBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.policy.RequestBody)
}

void RequestBody::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_id_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  serialized_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBody::~RequestBody() {
  // @@protoc_insertion_point(destructor:brpc.policy.RequestBody)
  SharedDtor();
}

void RequestBody::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (charset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charset_;
  }
  if (service_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_;
  }
  if (serialized_request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serialized_request_;
  }
  if (this != default_instance_) {
  }
}

void RequestBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestBody_descriptor_;
}

const RequestBody& RequestBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto();
  return *default_instance_;
}

RequestBody* RequestBody::default_instance_ = NULL;

RequestBody* RequestBody::New() const {
  return new RequestBody;
}

void RequestBody::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_charset()) {
      if (charset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charset_->clear();
      }
    }
    if (has_service()) {
      if (service_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        service_->clear();
      }
    }
    method_id_ = 0u;
    id_ = GOOGLE_ULONGLONG(0);
    if (has_serialized_request()) {
      if (serialized_request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serialized_request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.RequestBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_charset;
        break;
      }

      // optional string charset = 2;
      case 2: {
        if (tag == 18) {
         parse_charset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charset().data(), this->charset().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charset");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_service;
        break;
      }

      // required string service = 3;
      case 3: {
        if (tag == 26) {
         parse_service:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service().data(), this->service().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_method_id;
        break;
      }

      // required uint32 method_id = 4;
      case 4: {
        if (tag == 32) {
         parse_method_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &method_id_)));
          set_has_method_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // required uint64 id = 5;
      case 5: {
        if (tag == 40) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_serialized_request;
        break;
      }

      // optional bytes serialized_request = 6;
      case 6: {
        if (tag == 50) {
         parse_serialized_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.RequestBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.RequestBody)
  return false;
#undef DO_
}

void RequestBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.RequestBody)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional string charset = 2;
  if (has_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charset().data(), this->charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->charset(), output);
  }

  // required string service = 3;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->service(), output);
  }

  // required uint32 method_id = 4;
  if (has_method_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->method_id(), output);
  }

  // required uint64 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->id(), output);
  }

  // optional bytes serialized_request = 6;
  if (has_serialized_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->serialized_request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.RequestBody)
}

::google::protobuf::uint8* RequestBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.RequestBody)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional string charset = 2;
  if (has_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charset().data(), this->charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charset(), target);
  }

  // required string service = 3;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->service(), target);
  }

  // required uint32 method_id = 4;
  if (has_method_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->method_id(), target);
  }

  // required uint64 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->id(), target);
  }

  // optional bytes serialized_request = 6;
  if (has_serialized_request()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->serialized_request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.RequestBody)
  return target;
}

int RequestBody::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string charset = 2;
    if (has_charset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charset());
    }

    // required string service = 3;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service());
    }

    // required uint32 method_id = 4;
    if (has_method_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->method_id());
    }

    // required uint64 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional bytes serialized_request = 6;
    if (has_serialized_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_request());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestBody::MergeFrom(const RequestBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_charset()) {
      set_charset(from.charset());
    }
    if (from.has_service()) {
      set_service(from.service());
    }
    if (from.has_method_id()) {
      set_method_id(from.method_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_serialized_request()) {
      set_serialized_request(from.serialized_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBody::CopyFrom(const RequestBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBody::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;

  return true;
}

void RequestBody::Swap(RequestBody* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(charset_, other->charset_);
    std::swap(service_, other->service_);
    std::swap(method_id_, other->method_id_);
    std::swap(id_, other->id_);
    std::swap(serialized_request_, other->serialized_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestBody_descriptor_;
  metadata.reflection = RequestBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PublicPbrpcResponse::kResponseHeadFieldNumber;
const int PublicPbrpcResponse::kResponseBodyFieldNumber;
#endif  // !_MSC_VER

PublicPbrpcResponse::PublicPbrpcResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.PublicPbrpcResponse)
}

void PublicPbrpcResponse::InitAsDefaultInstance() {
  responsehead_ = const_cast< ::brpc::policy::ResponseHead*>(&::brpc::policy::ResponseHead::default_instance());
}

PublicPbrpcResponse::PublicPbrpcResponse(const PublicPbrpcResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.policy.PublicPbrpcResponse)
}

void PublicPbrpcResponse::SharedCtor() {
  _cached_size_ = 0;
  responsehead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublicPbrpcResponse::~PublicPbrpcResponse() {
  // @@protoc_insertion_point(destructor:brpc.policy.PublicPbrpcResponse)
  SharedDtor();
}

void PublicPbrpcResponse::SharedDtor() {
  if (this != default_instance_) {
    delete responsehead_;
  }
}

void PublicPbrpcResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublicPbrpcResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublicPbrpcResponse_descriptor_;
}

const PublicPbrpcResponse& PublicPbrpcResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto();
  return *default_instance_;
}

PublicPbrpcResponse* PublicPbrpcResponse::default_instance_ = NULL;

PublicPbrpcResponse* PublicPbrpcResponse::New() const {
  return new PublicPbrpcResponse;
}

void PublicPbrpcResponse::Clear() {
  if (has_responsehead()) {
    if (responsehead_ != NULL) responsehead_->::brpc::policy::ResponseHead::Clear();
  }
  responsebody_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PublicPbrpcResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.PublicPbrpcResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .brpc.policy.ResponseHead responseHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_responsehead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_responseBody;
        break;
      }

      // repeated .brpc.policy.ResponseBody responseBody = 2;
      case 2: {
        if (tag == 18) {
         parse_responseBody:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_responsebody()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_responseBody;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.PublicPbrpcResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.PublicPbrpcResponse)
  return false;
#undef DO_
}

void PublicPbrpcResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.PublicPbrpcResponse)
  // optional .brpc.policy.ResponseHead responseHead = 1;
  if (has_responsehead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->responsehead(), output);
  }

  // repeated .brpc.policy.ResponseBody responseBody = 2;
  for (int i = 0; i < this->responsebody_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->responsebody(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.PublicPbrpcResponse)
}

::google::protobuf::uint8* PublicPbrpcResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.PublicPbrpcResponse)
  // optional .brpc.policy.ResponseHead responseHead = 1;
  if (has_responsehead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->responsehead(), target);
  }

  // repeated .brpc.policy.ResponseBody responseBody = 2;
  for (int i = 0; i < this->responsebody_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->responsebody(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.PublicPbrpcResponse)
  return target;
}

int PublicPbrpcResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .brpc.policy.ResponseHead responseHead = 1;
    if (has_responsehead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->responsehead());
    }

  }
  // repeated .brpc.policy.ResponseBody responseBody = 2;
  total_size += 1 * this->responsebody_size();
  for (int i = 0; i < this->responsebody_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->responsebody(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublicPbrpcResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PublicPbrpcResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PublicPbrpcResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublicPbrpcResponse::MergeFrom(const PublicPbrpcResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  responsebody_.MergeFrom(from.responsebody_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsehead()) {
      mutable_responsehead()->::brpc::policy::ResponseHead::MergeFrom(from.responsehead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PublicPbrpcResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicPbrpcResponse::CopyFrom(const PublicPbrpcResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicPbrpcResponse::IsInitialized() const {

  if (has_responsehead()) {
    if (!this->responsehead().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->responsebody())) return false;
  return true;
}

void PublicPbrpcResponse::Swap(PublicPbrpcResponse* other) {
  if (other != this) {
    std::swap(responsehead_, other->responsehead_);
    responsebody_.Swap(&other->responsebody_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PublicPbrpcResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublicPbrpcResponse_descriptor_;
  metadata.reflection = PublicPbrpcResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseHead::kCodeFieldNumber;
const int ResponseHead::kTextFieldNumber;
const int ResponseHead::kFromHostFieldNumber;
const int ResponseHead::kCompressTypeFieldNumber;
#endif  // !_MSC_VER

ResponseHead::ResponseHead()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.ResponseHead)
}

void ResponseHead::InitAsDefaultInstance() {
}

ResponseHead::ResponseHead(const ResponseHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.policy.ResponseHead)
}

void ResponseHead::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compress_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseHead::~ResponseHead() {
  // @@protoc_insertion_point(destructor:brpc.policy.ResponseHead)
  SharedDtor();
}

void ResponseHead::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (from_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_host_;
  }
  if (this != default_instance_) {
  }
}

void ResponseHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseHead_descriptor_;
}

const ResponseHead& ResponseHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto();
  return *default_instance_;
}

ResponseHead* ResponseHead::default_instance_ = NULL;

ResponseHead* ResponseHead::New() const {
  return new ResponseHead;
}

void ResponseHead::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ResponseHead*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(code_, compress_type_);
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    if (has_from_host()) {
      if (from_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_host_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.ResponseHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_from_host;
        break;
      }

      // optional string from_host = 3;
      case 3: {
        if (tag == 26) {
         parse_from_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_host().data(), this->from_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "from_host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_compress_type;
        break;
      }

      // optional uint32 compress_type = 4;
      case 4: {
        if (tag == 32) {
         parse_compress_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compress_type_)));
          set_has_compress_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.ResponseHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.ResponseHead)
  return false;
#undef DO_
}

void ResponseHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.ResponseHead)
  // required sint32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->code(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional string from_host = 3;
  if (has_from_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_host().data(), this->from_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from_host(), output);
  }

  // optional uint32 compress_type = 4;
  if (has_compress_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->compress_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.ResponseHead)
}

::google::protobuf::uint8* ResponseHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.ResponseHead)
  // required sint32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->code(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional string from_host = 3;
  if (has_from_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_host().data(), this->from_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_host(), target);
  }

  // optional uint32 compress_type = 4;
  if (has_compress_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->compress_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.ResponseHead)
  return target;
}

int ResponseHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->code());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string from_host = 3;
    if (has_from_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_host());
    }

    // optional uint32 compress_type = 4;
    if (has_compress_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compress_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseHead::MergeFrom(const ResponseHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_from_host()) {
      set_from_host(from.from_host());
    }
    if (from.has_compress_type()) {
      set_compress_type(from.compress_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHead::CopyFrom(const ResponseHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResponseHead::Swap(ResponseHead* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(text_, other->text_);
    std::swap(from_host_, other->from_host_);
    std::swap(compress_type_, other->compress_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseHead_descriptor_;
  metadata.reflection = ResponseHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseBody::kSerializedResponseFieldNumber;
const int ResponseBody::kVersionFieldNumber;
const int ResponseBody::kErrorFieldNumber;
const int ResponseBody::kIdFieldNumber;
#endif  // !_MSC_VER

ResponseBody::ResponseBody()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.ResponseBody)
}

void ResponseBody::InitAsDefaultInstance() {
}

ResponseBody::ResponseBody(const ResponseBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.policy.ResponseBody)
}

void ResponseBody::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serialized_response_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseBody::~ResponseBody() {
  // @@protoc_insertion_point(destructor:brpc.policy.ResponseBody)
  SharedDtor();
}

void ResponseBody::SharedDtor() {
  if (serialized_response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serialized_response_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void ResponseBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseBody_descriptor_;
}

const ResponseBody& ResponseBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto();
  return *default_instance_;
}

ResponseBody* ResponseBody::default_instance_ = NULL;

ResponseBody* ResponseBody::New() const {
  return new ResponseBody;
}

void ResponseBody::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ResponseBody*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, error_);
    if (has_serialized_response()) {
      if (serialized_response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serialized_response_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.ResponseBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes serialized_response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional int32 error = 3;
      case 3: {
        if (tag == 24) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // required uint64 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.ResponseBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.ResponseBody)
  return false;
#undef DO_
}

void ResponseBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.ResponseBody)
  // optional bytes serialized_response = 1;
  if (has_serialized_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->serialized_response(), output);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional int32 error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->error(), output);
  }

  // required uint64 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.ResponseBody)
}

::google::protobuf::uint8* ResponseBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.ResponseBody)
  // optional bytes serialized_response = 1;
  if (has_serialized_response()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->serialized_response(), target);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional int32 error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->error(), target);
  }

  // required uint64 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.ResponseBody)
  return target;
}

int ResponseBody::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes serialized_response = 1;
    if (has_serialized_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_response());
    }

    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int32 error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // required uint64 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseBody::MergeFrom(const ResponseBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialized_response()) {
      set_serialized_response(from.serialized_response());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseBody::CopyFrom(const ResponseBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBody::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  return true;
}

void ResponseBody::Swap(ResponseBody* other) {
  if (other != this) {
    std::swap(serialized_response_, other->serialized_response_);
    std::swap(version_, other->version_);
    std::swap(error_, other->error_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseBody_descriptor_;
  metadata.reflection = ResponseBody_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace policy
}  // namespace brpc

// @@protoc_insertion_point(global_scope)
