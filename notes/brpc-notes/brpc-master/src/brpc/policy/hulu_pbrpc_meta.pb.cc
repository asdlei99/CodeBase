// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/hulu_pbrpc_meta.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "brpc/policy/hulu_pbrpc_meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace brpc {
namespace policy {

namespace {

const ::google::protobuf::Descriptor* HuluRpcRequestMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HuluRpcRequestMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* HuluRpcResponseMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HuluRpcResponseMeta_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto() {
  protobuf_AddDesc_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "brpc/policy/hulu_pbrpc_meta.proto");
  GOOGLE_CHECK(file != NULL);
  HuluRpcRequestMeta_descriptor_ = file->message_type(0);
  static const int HuluRpcRequestMeta_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcRequestMeta, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcRequestMeta, method_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcRequestMeta, compress_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcRequestMeta, correlation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcRequestMeta, log_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcRequestMeta, chuck_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcRequestMeta, trace_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcRequestMeta, parent_span_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcRequestMeta, span_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcRequestMeta, request_talk_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcRequestMeta, user_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcRequestMeta, user_message_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcRequestMeta, user_defined_source_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcRequestMeta, method_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcRequestMeta, credential_data_),
  };
  HuluRpcRequestMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HuluRpcRequestMeta_descriptor_,
      HuluRpcRequestMeta::default_instance_,
      HuluRpcRequestMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcRequestMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcRequestMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HuluRpcRequestMeta));
  HuluRpcResponseMeta_descriptor_ = file->message_type(1);
  static const int HuluRpcResponseMeta_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcResponseMeta, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcResponseMeta, error_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcResponseMeta, correlation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcResponseMeta, compress_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcResponseMeta, chuck_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcResponseMeta, response_talk_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcResponseMeta, user_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcResponseMeta, user_message_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcResponseMeta, user_defined_source_addr_),
  };
  HuluRpcResponseMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HuluRpcResponseMeta_descriptor_,
      HuluRpcResponseMeta::default_instance_,
      HuluRpcResponseMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcResponseMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuluRpcResponseMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HuluRpcResponseMeta));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HuluRpcRequestMeta_descriptor_, &HuluRpcRequestMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HuluRpcResponseMeta_descriptor_, &HuluRpcResponseMeta::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto() {
  delete HuluRpcRequestMeta::default_instance_;
  delete HuluRpcRequestMeta_reflection_;
  delete HuluRpcResponseMeta::default_instance_;
  delete HuluRpcResponseMeta_reflection_;
}

void protobuf_AddDesc_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::brpc::protobuf_AddDesc_brpc_2foptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!brpc/policy/hulu_pbrpc_meta.proto\022\013brp"
    "c.policy\032\022brpc/options.proto\"\210\003\n\022HuluRpc"
    "RequestMeta\022\024\n\014service_name\030\001 \002(\t\022\024\n\014met"
    "hod_index\030\002 \002(\005\022\025\n\rcompress_type\030\003 \001(\005\022\026"
    "\n\016correlation_id\030\004 \001(\003\022\016\n\006log_id\030\005 \001(\003\022#"
    "\n\nchuck_info\030\006 \001(\0132\017.brpc.ChunkInfo\022\020\n\010t"
    "race_id\030\007 \001(\003\022\026\n\016parent_span_id\030\010 \001(\003\022\017\n"
    "\007span_id\030\t \001(\003\022)\n\021request_talk_type\030\n \001("
    "\0162\016.brpc.TalkType\022\021\n\tuser_data\030\013 \001(\014\022\031\n\021"
    "user_message_size\030\014 \001(\005\022 \n\030user_defined_"
    "source_addr\030\r \001(\003\022\023\n\013method_name\030\016 \001(\t\022\027"
    "\n\017credential_data\030\017 \001(\014\"\215\002\n\023HuluRpcRespo"
    "nseMeta\022\022\n\nerror_code\030\001 \001(\005\022\022\n\nerror_tex"
    "t\030\002 \001(\t\022\026\n\016correlation_id\030\003 \001(\022\022\025\n\rcompr"
    "ess_type\030\004 \001(\005\022#\n\nchuck_info\030\005 \001(\0132\017.brp"
    "c.ChunkInfo\022*\n\022response_talk_type\030\006 \001(\0162"
    "\016.brpc.TalkType\022\021\n\tuser_data\030\007 \001(\014\022\031\n\021us"
    "er_message_size\030\010 \001(\005\022 \n\030user_defined_so"
    "urce_addr\030\t \001(\003B\037\n\017com.brpc.policyB\014Hulu"
    "RpcProto", 768);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/policy/hulu_pbrpc_meta.proto", &protobuf_RegisterTypes);
  HuluRpcRequestMeta::default_instance_ = new HuluRpcRequestMeta();
  HuluRpcResponseMeta::default_instance_ = new HuluRpcResponseMeta();
  HuluRpcRequestMeta::default_instance_->InitAsDefaultInstance();
  HuluRpcResponseMeta::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto {
  StaticDescriptorInitializer_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto() {
    protobuf_AddDesc_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto();
  }
} static_descriptor_initializer_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HuluRpcRequestMeta::kServiceNameFieldNumber;
const int HuluRpcRequestMeta::kMethodIndexFieldNumber;
const int HuluRpcRequestMeta::kCompressTypeFieldNumber;
const int HuluRpcRequestMeta::kCorrelationIdFieldNumber;
const int HuluRpcRequestMeta::kLogIdFieldNumber;
const int HuluRpcRequestMeta::kChuckInfoFieldNumber;
const int HuluRpcRequestMeta::kTraceIdFieldNumber;
const int HuluRpcRequestMeta::kParentSpanIdFieldNumber;
const int HuluRpcRequestMeta::kSpanIdFieldNumber;
const int HuluRpcRequestMeta::kRequestTalkTypeFieldNumber;
const int HuluRpcRequestMeta::kUserDataFieldNumber;
const int HuluRpcRequestMeta::kUserMessageSizeFieldNumber;
const int HuluRpcRequestMeta::kUserDefinedSourceAddrFieldNumber;
const int HuluRpcRequestMeta::kMethodNameFieldNumber;
const int HuluRpcRequestMeta::kCredentialDataFieldNumber;
#endif  // !_MSC_VER

HuluRpcRequestMeta::HuluRpcRequestMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.HuluRpcRequestMeta)
}

void HuluRpcRequestMeta::InitAsDefaultInstance() {
  chuck_info_ = const_cast< ::brpc::ChunkInfo*>(&::brpc::ChunkInfo::default_instance());
}

HuluRpcRequestMeta::HuluRpcRequestMeta(const HuluRpcRequestMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.policy.HuluRpcRequestMeta)
}

void HuluRpcRequestMeta::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_index_ = 0;
  compress_type_ = 0;
  correlation_id_ = GOOGLE_LONGLONG(0);
  log_id_ = GOOGLE_LONGLONG(0);
  chuck_info_ = NULL;
  trace_id_ = GOOGLE_LONGLONG(0);
  parent_span_id_ = GOOGLE_LONGLONG(0);
  span_id_ = GOOGLE_LONGLONG(0);
  request_talk_type_ = 0;
  user_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_message_size_ = 0;
  user_defined_source_addr_ = GOOGLE_LONGLONG(0);
  method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  credential_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HuluRpcRequestMeta::~HuluRpcRequestMeta() {
  // @@protoc_insertion_point(destructor:brpc.policy.HuluRpcRequestMeta)
  SharedDtor();
}

void HuluRpcRequestMeta::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (user_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_data_;
  }
  if (method_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete method_name_;
  }
  if (credential_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete credential_data_;
  }
  if (this != default_instance_) {
    delete chuck_info_;
  }
}

void HuluRpcRequestMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HuluRpcRequestMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HuluRpcRequestMeta_descriptor_;
}

const HuluRpcRequestMeta& HuluRpcRequestMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto();
  return *default_instance_;
}

HuluRpcRequestMeta* HuluRpcRequestMeta::default_instance_ = NULL;

HuluRpcRequestMeta* HuluRpcRequestMeta::New() const {
  return new HuluRpcRequestMeta;
}

void HuluRpcRequestMeta::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HuluRpcRequestMeta*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(method_index_, log_id_);
    ZR_(trace_id_, parent_span_id_);
    if (has_service_name()) {
      if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        service_name_->clear();
      }
    }
    if (has_chuck_info()) {
      if (chuck_info_ != NULL) chuck_info_->::brpc::ChunkInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(request_talk_type_, user_defined_source_addr_);
    span_id_ = GOOGLE_LONGLONG(0);
    if (has_user_data()) {
      if (user_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_data_->clear();
      }
    }
    if (has_method_name()) {
      if (method_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        method_name_->clear();
      }
    }
    if (has_credential_data()) {
      if (credential_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        credential_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HuluRpcRequestMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.HuluRpcRequestMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_method_index;
        break;
      }

      // required int32 method_index = 2;
      case 2: {
        if (tag == 16) {
         parse_method_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &method_index_)));
          set_has_method_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_compress_type;
        break;
      }

      // optional int32 compress_type = 3;
      case 3: {
        if (tag == 24) {
         parse_compress_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compress_type_)));
          set_has_compress_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_correlation_id;
        break;
      }

      // optional int64 correlation_id = 4;
      case 4: {
        if (tag == 32) {
         parse_correlation_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &correlation_id_)));
          set_has_correlation_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_log_id;
        break;
      }

      // optional int64 log_id = 5;
      case 5: {
        if (tag == 40) {
         parse_log_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &log_id_)));
          set_has_log_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_chuck_info;
        break;
      }

      // optional .brpc.ChunkInfo chuck_info = 6;
      case 6: {
        if (tag == 50) {
         parse_chuck_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chuck_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_trace_id;
        break;
      }

      // optional int64 trace_id = 7;
      case 7: {
        if (tag == 56) {
         parse_trace_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &trace_id_)));
          set_has_trace_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_parent_span_id;
        break;
      }

      // optional int64 parent_span_id = 8;
      case 8: {
        if (tag == 64) {
         parse_parent_span_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parent_span_id_)));
          set_has_parent_span_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_span_id;
        break;
      }

      // optional int64 span_id = 9;
      case 9: {
        if (tag == 72) {
         parse_span_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &span_id_)));
          set_has_span_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_request_talk_type;
        break;
      }

      // optional .brpc.TalkType request_talk_type = 10;
      case 10: {
        if (tag == 80) {
         parse_request_talk_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::TalkType_IsValid(value)) {
            set_request_talk_type(static_cast< ::brpc::TalkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_user_data;
        break;
      }

      // optional bytes user_data = 11;
      case 11: {
        if (tag == 90) {
         parse_user_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_user_message_size;
        break;
      }

      // optional int32 user_message_size = 12;
      case 12: {
        if (tag == 96) {
         parse_user_message_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_message_size_)));
          set_has_user_message_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_user_defined_source_addr;
        break;
      }

      // optional int64 user_defined_source_addr = 13;
      case 13: {
        if (tag == 104) {
         parse_user_defined_source_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_defined_source_addr_)));
          set_has_user_defined_source_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_method_name;
        break;
      }

      // optional string method_name = 14;
      case 14: {
        if (tag == 114) {
         parse_method_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method_name().data(), this->method_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "method_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_credential_data;
        break;
      }

      // optional bytes credential_data = 15;
      case 15: {
        if (tag == 122) {
         parse_credential_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_credential_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.HuluRpcRequestMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.HuluRpcRequestMeta)
  return false;
#undef DO_
}

void HuluRpcRequestMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.HuluRpcRequestMeta)
  // required string service_name = 1;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // required int32 method_index = 2;
  if (has_method_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->method_index(), output);
  }

  // optional int32 compress_type = 3;
  if (has_compress_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->compress_type(), output);
  }

  // optional int64 correlation_id = 4;
  if (has_correlation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->correlation_id(), output);
  }

  // optional int64 log_id = 5;
  if (has_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->log_id(), output);
  }

  // optional .brpc.ChunkInfo chuck_info = 6;
  if (has_chuck_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->chuck_info(), output);
  }

  // optional int64 trace_id = 7;
  if (has_trace_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->trace_id(), output);
  }

  // optional int64 parent_span_id = 8;
  if (has_parent_span_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->parent_span_id(), output);
  }

  // optional int64 span_id = 9;
  if (has_span_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->span_id(), output);
  }

  // optional .brpc.TalkType request_talk_type = 10;
  if (has_request_talk_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->request_talk_type(), output);
  }

  // optional bytes user_data = 11;
  if (has_user_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->user_data(), output);
  }

  // optional int32 user_message_size = 12;
  if (has_user_message_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->user_message_size(), output);
  }

  // optional int64 user_defined_source_addr = 13;
  if (has_user_defined_source_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->user_defined_source_addr(), output);
  }

  // optional string method_name = 14;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->method_name(), output);
  }

  // optional bytes credential_data = 15;
  if (has_credential_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->credential_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.HuluRpcRequestMeta)
}

::google::protobuf::uint8* HuluRpcRequestMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.HuluRpcRequestMeta)
  // required string service_name = 1;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // required int32 method_index = 2;
  if (has_method_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->method_index(), target);
  }

  // optional int32 compress_type = 3;
  if (has_compress_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->compress_type(), target);
  }

  // optional int64 correlation_id = 4;
  if (has_correlation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->correlation_id(), target);
  }

  // optional int64 log_id = 5;
  if (has_log_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->log_id(), target);
  }

  // optional .brpc.ChunkInfo chuck_info = 6;
  if (has_chuck_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->chuck_info(), target);
  }

  // optional int64 trace_id = 7;
  if (has_trace_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->trace_id(), target);
  }

  // optional int64 parent_span_id = 8;
  if (has_parent_span_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->parent_span_id(), target);
  }

  // optional int64 span_id = 9;
  if (has_span_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->span_id(), target);
  }

  // optional .brpc.TalkType request_talk_type = 10;
  if (has_request_talk_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->request_talk_type(), target);
  }

  // optional bytes user_data = 11;
  if (has_user_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->user_data(), target);
  }

  // optional int32 user_message_size = 12;
  if (has_user_message_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->user_message_size(), target);
  }

  // optional int64 user_defined_source_addr = 13;
  if (has_user_defined_source_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->user_defined_source_addr(), target);
  }

  // optional string method_name = 14;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->method_name(), target);
  }

  // optional bytes credential_data = 15;
  if (has_credential_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->credential_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.HuluRpcRequestMeta)
  return target;
}

int HuluRpcRequestMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_name = 1;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }

    // required int32 method_index = 2;
    if (has_method_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->method_index());
    }

    // optional int32 compress_type = 3;
    if (has_compress_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->compress_type());
    }

    // optional int64 correlation_id = 4;
    if (has_correlation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->correlation_id());
    }

    // optional int64 log_id = 5;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->log_id());
    }

    // optional .brpc.ChunkInfo chuck_info = 6;
    if (has_chuck_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chuck_info());
    }

    // optional int64 trace_id = 7;
    if (has_trace_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->trace_id());
    }

    // optional int64 parent_span_id = 8;
    if (has_parent_span_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->parent_span_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 span_id = 9;
    if (has_span_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->span_id());
    }

    // optional .brpc.TalkType request_talk_type = 10;
    if (has_request_talk_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_talk_type());
    }

    // optional bytes user_data = 11;
    if (has_user_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_data());
    }

    // optional int32 user_message_size = 12;
    if (has_user_message_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_message_size());
    }

    // optional int64 user_defined_source_addr = 13;
    if (has_user_defined_source_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_defined_source_addr());
    }

    // optional string method_name = 14;
    if (has_method_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_name());
    }

    // optional bytes credential_data = 15;
    if (has_credential_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->credential_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HuluRpcRequestMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HuluRpcRequestMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HuluRpcRequestMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HuluRpcRequestMeta::MergeFrom(const HuluRpcRequestMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_method_index()) {
      set_method_index(from.method_index());
    }
    if (from.has_compress_type()) {
      set_compress_type(from.compress_type());
    }
    if (from.has_correlation_id()) {
      set_correlation_id(from.correlation_id());
    }
    if (from.has_log_id()) {
      set_log_id(from.log_id());
    }
    if (from.has_chuck_info()) {
      mutable_chuck_info()->::brpc::ChunkInfo::MergeFrom(from.chuck_info());
    }
    if (from.has_trace_id()) {
      set_trace_id(from.trace_id());
    }
    if (from.has_parent_span_id()) {
      set_parent_span_id(from.parent_span_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_span_id()) {
      set_span_id(from.span_id());
    }
    if (from.has_request_talk_type()) {
      set_request_talk_type(from.request_talk_type());
    }
    if (from.has_user_data()) {
      set_user_data(from.user_data());
    }
    if (from.has_user_message_size()) {
      set_user_message_size(from.user_message_size());
    }
    if (from.has_user_defined_source_addr()) {
      set_user_defined_source_addr(from.user_defined_source_addr());
    }
    if (from.has_method_name()) {
      set_method_name(from.method_name());
    }
    if (from.has_credential_data()) {
      set_credential_data(from.credential_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HuluRpcRequestMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuluRpcRequestMeta::CopyFrom(const HuluRpcRequestMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuluRpcRequestMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_chuck_info()) {
    if (!this->chuck_info().IsInitialized()) return false;
  }
  return true;
}

void HuluRpcRequestMeta::Swap(HuluRpcRequestMeta* other) {
  if (other != this) {
    std::swap(service_name_, other->service_name_);
    std::swap(method_index_, other->method_index_);
    std::swap(compress_type_, other->compress_type_);
    std::swap(correlation_id_, other->correlation_id_);
    std::swap(log_id_, other->log_id_);
    std::swap(chuck_info_, other->chuck_info_);
    std::swap(trace_id_, other->trace_id_);
    std::swap(parent_span_id_, other->parent_span_id_);
    std::swap(span_id_, other->span_id_);
    std::swap(request_talk_type_, other->request_talk_type_);
    std::swap(user_data_, other->user_data_);
    std::swap(user_message_size_, other->user_message_size_);
    std::swap(user_defined_source_addr_, other->user_defined_source_addr_);
    std::swap(method_name_, other->method_name_);
    std::swap(credential_data_, other->credential_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HuluRpcRequestMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HuluRpcRequestMeta_descriptor_;
  metadata.reflection = HuluRpcRequestMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HuluRpcResponseMeta::kErrorCodeFieldNumber;
const int HuluRpcResponseMeta::kErrorTextFieldNumber;
const int HuluRpcResponseMeta::kCorrelationIdFieldNumber;
const int HuluRpcResponseMeta::kCompressTypeFieldNumber;
const int HuluRpcResponseMeta::kChuckInfoFieldNumber;
const int HuluRpcResponseMeta::kResponseTalkTypeFieldNumber;
const int HuluRpcResponseMeta::kUserDataFieldNumber;
const int HuluRpcResponseMeta::kUserMessageSizeFieldNumber;
const int HuluRpcResponseMeta::kUserDefinedSourceAddrFieldNumber;
#endif  // !_MSC_VER

HuluRpcResponseMeta::HuluRpcResponseMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.HuluRpcResponseMeta)
}

void HuluRpcResponseMeta::InitAsDefaultInstance() {
  chuck_info_ = const_cast< ::brpc::ChunkInfo*>(&::brpc::ChunkInfo::default_instance());
}

HuluRpcResponseMeta::HuluRpcResponseMeta(const HuluRpcResponseMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.policy.HuluRpcResponseMeta)
}

void HuluRpcResponseMeta::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_code_ = 0;
  error_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  correlation_id_ = GOOGLE_LONGLONG(0);
  compress_type_ = 0;
  chuck_info_ = NULL;
  response_talk_type_ = 0;
  user_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_message_size_ = 0;
  user_defined_source_addr_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HuluRpcResponseMeta::~HuluRpcResponseMeta() {
  // @@protoc_insertion_point(destructor:brpc.policy.HuluRpcResponseMeta)
  SharedDtor();
}

void HuluRpcResponseMeta::SharedDtor() {
  if (error_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_text_;
  }
  if (user_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_data_;
  }
  if (this != default_instance_) {
    delete chuck_info_;
  }
}

void HuluRpcResponseMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HuluRpcResponseMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HuluRpcResponseMeta_descriptor_;
}

const HuluRpcResponseMeta& HuluRpcResponseMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto();
  return *default_instance_;
}

HuluRpcResponseMeta* HuluRpcResponseMeta::default_instance_ = NULL;

HuluRpcResponseMeta* HuluRpcResponseMeta::New() const {
  return new HuluRpcResponseMeta;
}

void HuluRpcResponseMeta::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HuluRpcResponseMeta*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(error_code_, correlation_id_);
    ZR_(response_talk_type_, user_message_size_);
    if (has_error_text()) {
      if (error_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_text_->clear();
      }
    }
    if (has_chuck_info()) {
      if (chuck_info_ != NULL) chuck_info_->::brpc::ChunkInfo::Clear();
    }
    if (has_user_data()) {
      if (user_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_data_->clear();
      }
    }
  }
  user_defined_source_addr_ = GOOGLE_LONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HuluRpcResponseMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.HuluRpcResponseMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_text;
        break;
      }

      // optional string error_text = 2;
      case 2: {
        if (tag == 18) {
         parse_error_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_text().data(), this->error_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error_text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_correlation_id;
        break;
      }

      // optional sint64 correlation_id = 3;
      case 3: {
        if (tag == 24) {
         parse_correlation_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &correlation_id_)));
          set_has_correlation_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_compress_type;
        break;
      }

      // optional int32 compress_type = 4;
      case 4: {
        if (tag == 32) {
         parse_compress_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compress_type_)));
          set_has_compress_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_chuck_info;
        break;
      }

      // optional .brpc.ChunkInfo chuck_info = 5;
      case 5: {
        if (tag == 42) {
         parse_chuck_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chuck_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_response_talk_type;
        break;
      }

      // optional .brpc.TalkType response_talk_type = 6;
      case 6: {
        if (tag == 48) {
         parse_response_talk_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::TalkType_IsValid(value)) {
            set_response_talk_type(static_cast< ::brpc::TalkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_user_data;
        break;
      }

      // optional bytes user_data = 7;
      case 7: {
        if (tag == 58) {
         parse_user_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_user_message_size;
        break;
      }

      // optional int32 user_message_size = 8;
      case 8: {
        if (tag == 64) {
         parse_user_message_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_message_size_)));
          set_has_user_message_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_user_defined_source_addr;
        break;
      }

      // optional int64 user_defined_source_addr = 9;
      case 9: {
        if (tag == 72) {
         parse_user_defined_source_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_defined_source_addr_)));
          set_has_user_defined_source_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.HuluRpcResponseMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.HuluRpcResponseMeta)
  return false;
#undef DO_
}

void HuluRpcResponseMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.HuluRpcResponseMeta)
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional string error_text = 2;
  if (has_error_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_text(), output);
  }

  // optional sint64 correlation_id = 3;
  if (has_correlation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->correlation_id(), output);
  }

  // optional int32 compress_type = 4;
  if (has_compress_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->compress_type(), output);
  }

  // optional .brpc.ChunkInfo chuck_info = 5;
  if (has_chuck_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->chuck_info(), output);
  }

  // optional .brpc.TalkType response_talk_type = 6;
  if (has_response_talk_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->response_talk_type(), output);
  }

  // optional bytes user_data = 7;
  if (has_user_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->user_data(), output);
  }

  // optional int32 user_message_size = 8;
  if (has_user_message_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->user_message_size(), output);
  }

  // optional int64 user_defined_source_addr = 9;
  if (has_user_defined_source_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->user_defined_source_addr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.HuluRpcResponseMeta)
}

::google::protobuf::uint8* HuluRpcResponseMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.HuluRpcResponseMeta)
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // optional string error_text = 2;
  if (has_error_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_text(), target);
  }

  // optional sint64 correlation_id = 3;
  if (has_correlation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->correlation_id(), target);
  }

  // optional int32 compress_type = 4;
  if (has_compress_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->compress_type(), target);
  }

  // optional .brpc.ChunkInfo chuck_info = 5;
  if (has_chuck_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->chuck_info(), target);
  }

  // optional .brpc.TalkType response_talk_type = 6;
  if (has_response_talk_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->response_talk_type(), target);
  }

  // optional bytes user_data = 7;
  if (has_user_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->user_data(), target);
  }

  // optional int32 user_message_size = 8;
  if (has_user_message_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->user_message_size(), target);
  }

  // optional int64 user_defined_source_addr = 9;
  if (has_user_defined_source_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->user_defined_source_addr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.HuluRpcResponseMeta)
  return target;
}

int HuluRpcResponseMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional string error_text = 2;
    if (has_error_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_text());
    }

    // optional sint64 correlation_id = 3;
    if (has_correlation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->correlation_id());
    }

    // optional int32 compress_type = 4;
    if (has_compress_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->compress_type());
    }

    // optional .brpc.ChunkInfo chuck_info = 5;
    if (has_chuck_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chuck_info());
    }

    // optional .brpc.TalkType response_talk_type = 6;
    if (has_response_talk_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_talk_type());
    }

    // optional bytes user_data = 7;
    if (has_user_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_data());
    }

    // optional int32 user_message_size = 8;
    if (has_user_message_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_message_size());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 user_defined_source_addr = 9;
    if (has_user_defined_source_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_defined_source_addr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HuluRpcResponseMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HuluRpcResponseMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HuluRpcResponseMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HuluRpcResponseMeta::MergeFrom(const HuluRpcResponseMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_error_text()) {
      set_error_text(from.error_text());
    }
    if (from.has_correlation_id()) {
      set_correlation_id(from.correlation_id());
    }
    if (from.has_compress_type()) {
      set_compress_type(from.compress_type());
    }
    if (from.has_chuck_info()) {
      mutable_chuck_info()->::brpc::ChunkInfo::MergeFrom(from.chuck_info());
    }
    if (from.has_response_talk_type()) {
      set_response_talk_type(from.response_talk_type());
    }
    if (from.has_user_data()) {
      set_user_data(from.user_data());
    }
    if (from.has_user_message_size()) {
      set_user_message_size(from.user_message_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_user_defined_source_addr()) {
      set_user_defined_source_addr(from.user_defined_source_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HuluRpcResponseMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuluRpcResponseMeta::CopyFrom(const HuluRpcResponseMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuluRpcResponseMeta::IsInitialized() const {

  if (has_chuck_info()) {
    if (!this->chuck_info().IsInitialized()) return false;
  }
  return true;
}

void HuluRpcResponseMeta::Swap(HuluRpcResponseMeta* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(error_text_, other->error_text_);
    std::swap(correlation_id_, other->correlation_id_);
    std::swap(compress_type_, other->compress_type_);
    std::swap(chuck_info_, other->chuck_info_);
    std::swap(response_talk_type_, other->response_talk_type_);
    std::swap(user_data_, other->user_data_);
    std::swap(user_message_size_, other->user_message_size_);
    std::swap(user_defined_source_addr_, other->user_defined_source_addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HuluRpcResponseMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HuluRpcResponseMeta_descriptor_;
  metadata.reflection = HuluRpcResponseMeta_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace policy
}  // namespace brpc

// @@protoc_insertion_point(global_scope)
