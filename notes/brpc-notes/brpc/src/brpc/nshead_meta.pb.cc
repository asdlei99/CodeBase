// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/nshead_meta.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "brpc/nshead_meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace brpc {

namespace {

const ::google::protobuf::Descriptor* NsheadMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NsheadMeta_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_brpc_2fnshead_5fmeta_2eproto() {
  protobuf_AddDesc_brpc_2fnshead_5fmeta_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "brpc/nshead_meta.proto");
  GOOGLE_CHECK(file != NULL);
  NsheadMeta_descriptor_ = file->message_type(0);
  static const int NsheadMeta_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NsheadMeta, full_method_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NsheadMeta, correlation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NsheadMeta, log_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NsheadMeta, attachment_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NsheadMeta, compress_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NsheadMeta, trace_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NsheadMeta, span_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NsheadMeta, parent_span_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NsheadMeta, user_string_),
  };
  NsheadMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NsheadMeta_descriptor_,
      NsheadMeta::default_instance_,
      NsheadMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NsheadMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NsheadMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NsheadMeta));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_brpc_2fnshead_5fmeta_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NsheadMeta_descriptor_, &NsheadMeta::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_brpc_2fnshead_5fmeta_2eproto() {
  delete NsheadMeta::default_instance_;
  delete NsheadMeta_reflection_;
}

void protobuf_AddDesc_brpc_2fnshead_5fmeta_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::brpc::protobuf_AddDesc_brpc_2foptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026brpc/nshead_meta.proto\022\004brpc\032\022brpc/opt"
    "ions.proto\"\342\001\n\nNsheadMeta\022\030\n\020full_method"
    "_name\030\001 \002(\t\022\026\n\016correlation_id\030\002 \001(\003\022\016\n\006l"
    "og_id\030\003 \001(\003\022\027\n\017attachment_size\030\004 \001(\005\022)\n\r"
    "compress_type\030\005 \001(\0162\022.brpc.CompressType\022"
    "\020\n\010trace_id\030\006 \001(\003\022\017\n\007span_id\030\007 \001(\003\022\026\n\016pa"
    "rent_span_id\030\010 \001(\003\022\023\n\013user_string\030\t \001(\014B"
    "\027\n\010com.brpcB\013NsheadProto", 304);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/nshead_meta.proto", &protobuf_RegisterTypes);
  NsheadMeta::default_instance_ = new NsheadMeta();
  NsheadMeta::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_brpc_2fnshead_5fmeta_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_brpc_2fnshead_5fmeta_2eproto {
  StaticDescriptorInitializer_brpc_2fnshead_5fmeta_2eproto() {
    protobuf_AddDesc_brpc_2fnshead_5fmeta_2eproto();
  }
} static_descriptor_initializer_brpc_2fnshead_5fmeta_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NsheadMeta::kFullMethodNameFieldNumber;
const int NsheadMeta::kCorrelationIdFieldNumber;
const int NsheadMeta::kLogIdFieldNumber;
const int NsheadMeta::kAttachmentSizeFieldNumber;
const int NsheadMeta::kCompressTypeFieldNumber;
const int NsheadMeta::kTraceIdFieldNumber;
const int NsheadMeta::kSpanIdFieldNumber;
const int NsheadMeta::kParentSpanIdFieldNumber;
const int NsheadMeta::kUserStringFieldNumber;
#endif  // !_MSC_VER

NsheadMeta::NsheadMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.NsheadMeta)
}

void NsheadMeta::InitAsDefaultInstance() {
}

NsheadMeta::NsheadMeta(const NsheadMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.NsheadMeta)
}

void NsheadMeta::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  full_method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  correlation_id_ = GOOGLE_LONGLONG(0);
  log_id_ = GOOGLE_LONGLONG(0);
  attachment_size_ = 0;
  compress_type_ = 0;
  trace_id_ = GOOGLE_LONGLONG(0);
  span_id_ = GOOGLE_LONGLONG(0);
  parent_span_id_ = GOOGLE_LONGLONG(0);
  user_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NsheadMeta::~NsheadMeta() {
  // @@protoc_insertion_point(destructor:brpc.NsheadMeta)
  SharedDtor();
}

void NsheadMeta::SharedDtor() {
  if (full_method_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete full_method_name_;
  }
  if (user_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_string_;
  }
  if (this != default_instance_) {
  }
}

void NsheadMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NsheadMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NsheadMeta_descriptor_;
}

const NsheadMeta& NsheadMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fnshead_5fmeta_2eproto();
  return *default_instance_;
}

NsheadMeta* NsheadMeta::default_instance_ = NULL;

NsheadMeta* NsheadMeta::New() const {
  return new NsheadMeta;
}

void NsheadMeta::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NsheadMeta*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(correlation_id_, parent_span_id_);
    if (has_full_method_name()) {
      if (full_method_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        full_method_name_->clear();
      }
    }
  }
  if (has_user_string()) {
    if (user_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      user_string_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NsheadMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.NsheadMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string full_method_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->full_method_name().data(), this->full_method_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "full_method_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_correlation_id;
        break;
      }

      // optional int64 correlation_id = 2;
      case 2: {
        if (tag == 16) {
         parse_correlation_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &correlation_id_)));
          set_has_correlation_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_log_id;
        break;
      }

      // optional int64 log_id = 3;
      case 3: {
        if (tag == 24) {
         parse_log_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &log_id_)));
          set_has_log_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_attachment_size;
        break;
      }

      // optional int32 attachment_size = 4;
      case 4: {
        if (tag == 32) {
         parse_attachment_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachment_size_)));
          set_has_attachment_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_compress_type;
        break;
      }

      // optional .brpc.CompressType compress_type = 5;
      case 5: {
        if (tag == 40) {
         parse_compress_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::CompressType_IsValid(value)) {
            set_compress_type(static_cast< ::brpc::CompressType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_trace_id;
        break;
      }

      // optional int64 trace_id = 6;
      case 6: {
        if (tag == 48) {
         parse_trace_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &trace_id_)));
          set_has_trace_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_span_id;
        break;
      }

      // optional int64 span_id = 7;
      case 7: {
        if (tag == 56) {
         parse_span_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &span_id_)));
          set_has_span_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_parent_span_id;
        break;
      }

      // optional int64 parent_span_id = 8;
      case 8: {
        if (tag == 64) {
         parse_parent_span_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parent_span_id_)));
          set_has_parent_span_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_user_string;
        break;
      }

      // optional bytes user_string = 9;
      case 9: {
        if (tag == 74) {
         parse_user_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_string()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.NsheadMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.NsheadMeta)
  return false;
#undef DO_
}

void NsheadMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.NsheadMeta)
  // required string full_method_name = 1;
  if (has_full_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_method_name().data(), this->full_method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "full_method_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->full_method_name(), output);
  }

  // optional int64 correlation_id = 2;
  if (has_correlation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->correlation_id(), output);
  }

  // optional int64 log_id = 3;
  if (has_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->log_id(), output);
  }

  // optional int32 attachment_size = 4;
  if (has_attachment_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attachment_size(), output);
  }

  // optional .brpc.CompressType compress_type = 5;
  if (has_compress_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->compress_type(), output);
  }

  // optional int64 trace_id = 6;
  if (has_trace_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->trace_id(), output);
  }

  // optional int64 span_id = 7;
  if (has_span_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->span_id(), output);
  }

  // optional int64 parent_span_id = 8;
  if (has_parent_span_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->parent_span_id(), output);
  }

  // optional bytes user_string = 9;
  if (has_user_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->user_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.NsheadMeta)
}

::google::protobuf::uint8* NsheadMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.NsheadMeta)
  // required string full_method_name = 1;
  if (has_full_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_method_name().data(), this->full_method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "full_method_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->full_method_name(), target);
  }

  // optional int64 correlation_id = 2;
  if (has_correlation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->correlation_id(), target);
  }

  // optional int64 log_id = 3;
  if (has_log_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->log_id(), target);
  }

  // optional int32 attachment_size = 4;
  if (has_attachment_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->attachment_size(), target);
  }

  // optional .brpc.CompressType compress_type = 5;
  if (has_compress_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->compress_type(), target);
  }

  // optional int64 trace_id = 6;
  if (has_trace_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->trace_id(), target);
  }

  // optional int64 span_id = 7;
  if (has_span_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->span_id(), target);
  }

  // optional int64 parent_span_id = 8;
  if (has_parent_span_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->parent_span_id(), target);
  }

  // optional bytes user_string = 9;
  if (has_user_string()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->user_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.NsheadMeta)
  return target;
}

int NsheadMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string full_method_name = 1;
    if (has_full_method_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_method_name());
    }

    // optional int64 correlation_id = 2;
    if (has_correlation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->correlation_id());
    }

    // optional int64 log_id = 3;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->log_id());
    }

    // optional int32 attachment_size = 4;
    if (has_attachment_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachment_size());
    }

    // optional .brpc.CompressType compress_type = 5;
    if (has_compress_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->compress_type());
    }

    // optional int64 trace_id = 6;
    if (has_trace_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->trace_id());
    }

    // optional int64 span_id = 7;
    if (has_span_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->span_id());
    }

    // optional int64 parent_span_id = 8;
    if (has_parent_span_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->parent_span_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes user_string = 9;
    if (has_user_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NsheadMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NsheadMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NsheadMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NsheadMeta::MergeFrom(const NsheadMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_full_method_name()) {
      set_full_method_name(from.full_method_name());
    }
    if (from.has_correlation_id()) {
      set_correlation_id(from.correlation_id());
    }
    if (from.has_log_id()) {
      set_log_id(from.log_id());
    }
    if (from.has_attachment_size()) {
      set_attachment_size(from.attachment_size());
    }
    if (from.has_compress_type()) {
      set_compress_type(from.compress_type());
    }
    if (from.has_trace_id()) {
      set_trace_id(from.trace_id());
    }
    if (from.has_span_id()) {
      set_span_id(from.span_id());
    }
    if (from.has_parent_span_id()) {
      set_parent_span_id(from.parent_span_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_user_string()) {
      set_user_string(from.user_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NsheadMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NsheadMeta::CopyFrom(const NsheadMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NsheadMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NsheadMeta::Swap(NsheadMeta* other) {
  if (other != this) {
    std::swap(full_method_name_, other->full_method_name_);
    std::swap(correlation_id_, other->correlation_id_);
    std::swap(log_id_, other->log_id_);
    std::swap(attachment_size_, other->attachment_size_);
    std::swap(compress_type_, other->compress_type_);
    std::swap(trace_id_, other->trace_id_);
    std::swap(span_id_, other->span_id_);
    std::swap(parent_span_id_, other->parent_span_id_);
    std::swap(user_string_, other->user_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NsheadMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NsheadMeta_descriptor_;
  metadata.reflection = NsheadMeta_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace brpc

// @@protoc_insertion_point(global_scope)
