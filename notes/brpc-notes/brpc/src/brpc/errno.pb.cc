// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/errno.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "brpc/errno.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace brpc {

namespace {

const ::google::protobuf::EnumDescriptor* Errno_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_brpc_2ferrno_2eproto() {
  protobuf_AddDesc_brpc_2ferrno_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "brpc/errno.proto");
  GOOGLE_CHECK(file != NULL);
  Errno_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_brpc_2ferrno_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_brpc_2ferrno_2eproto() {
}

void protobuf_AddDesc_brpc_2ferrno_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020brpc/errno.proto\022\004brpc*\377\023\n\005Errno\022\r\n\tSY"
    "S_EPERM\020\001\022\016\n\nSYS_ENOENT\020\002\022\r\n\tSYS_ESRCH\020\003"
    "\022\r\n\tSYS_EINTR\020\004\022\013\n\007SYS_EIO\020\005\022\r\n\tSYS_ENXI"
    "O\020\006\022\r\n\tSYS_E2BIG\020\007\022\017\n\013SYS_ENOEXEC\020\010\022\r\n\tS"
    "YS_EBADF\020\t\022\016\n\nSYS_ECHILD\020\n\022\016\n\nSYS_EAGAIN"
    "\020\013\022\016\n\nSYS_ENOMEM\020\014\022\016\n\nSYS_EACCES\020\r\022\016\n\nSY"
    "S_EFAULT\020\016\022\017\n\013SYS_ENOTBLK\020\017\022\r\n\tSYS_EBUSY"
    "\020\020\022\016\n\nSYS_EEXIST\020\021\022\r\n\tSYS_EXDEV\020\022\022\016\n\nSYS"
    "_ENODEV\020\023\022\017\n\013SYS_ENOTDIR\020\024\022\016\n\nSYS_EISDIR"
    "\020\025\022\016\n\nSYS_EINVAL\020\026\022\016\n\nSYS_ENFILE\020\027\022\016\n\nSY"
    "S_EMFILE\020\030\022\016\n\nSYS_ENOTTY\020\031\022\017\n\013SYS_ETXTBS"
    "Y\020\032\022\r\n\tSYS_EFBIG\020\033\022\016\n\nSYS_ENOSPC\020\034\022\016\n\nSY"
    "S_ESPIPE\020\035\022\r\n\tSYS_EROFS\020\036\022\016\n\nSYS_EMLINK\020"
    "\037\022\r\n\tSYS_EPIPE\020 \022\014\n\010SYS_EDOM\020!\022\016\n\nSYS_ER"
    "ANGE\020\"\022\017\n\013SYS_EDEADLK\020#\022\024\n\020SYS_ENAMETOOL"
    "ONG\020$\022\016\n\nSYS_ENOLCK\020%\022\016\n\nSYS_ENOSYS\020&\022\021\n"
    "\rSYS_ENOTEMPTY\020\'\022\r\n\tSYS_ELOOP\020(\022\016\n\nSYS_E"
    "NOMSG\020*\022\r\n\tSYS_EIDRM\020+\022\016\n\nSYS_ECHRNG\020,\022\020"
    "\n\014SYS_EL2NSYNC\020-\022\016\n\nSYS_EL3HLT\020.\022\016\n\nSYS_"
    "EL3RST\020/\022\016\n\nSYS_ELNRNG\0200\022\017\n\013SYS_EUNATCH\020"
    "1\022\016\n\nSYS_ENOCSI\0202\022\016\n\nSYS_EL2HLT\0203\022\r\n\tSYS"
    "_EBADE\0204\022\r\n\tSYS_EBADR\0205\022\016\n\nSYS_EXFULL\0206\022"
    "\016\n\nSYS_ENOANO\0207\022\017\n\013SYS_EBADRQC\0208\022\017\n\013SYS_"
    "EBADSLT\0209\022\016\n\nSYS_EBFONT\020;\022\016\n\nSYS_ENOSTR\020"
    "<\022\017\n\013SYS_ENODATA\020=\022\r\n\tSYS_ETIME\020>\022\r\n\tSYS"
    "_ENOSR\020\?\022\016\n\nSYS_ENONET\020@\022\016\n\nSYS_ENOPKG\020A"
    "\022\017\n\013SYS_EREMOTE\020B\022\017\n\013SYS_ENOLINK\020C\022\014\n\010SY"
    "S_EADV\020D\022\016\n\nSYS_ESRMNT\020E\022\r\n\tSYS_ECOMM\020F\022"
    "\016\n\nSYS_EPROTO\020G\022\021\n\rSYS_EMULTIHOP\020H\022\017\n\013SY"
    "S_EDOTDOT\020I\022\017\n\013SYS_EBADMSG\020J\022\021\n\rSYS_EOVE"
    "RFLOW\020K\022\020\n\014SYS_ENOTUNIQ\020L\022\016\n\nSYS_EBADFD\020"
    "M\022\017\n\013SYS_EREMCHG\020N\022\017\n\013SYS_ELIBACC\020O\022\017\n\013S"
    "YS_ELIBBAD\020P\022\017\n\013SYS_ELIBSCN\020Q\022\017\n\013SYS_ELI"
    "BMAX\020R\022\020\n\014SYS_ELIBEXEC\020S\022\016\n\nSYS_EILSEQ\020T"
    "\022\020\n\014SYS_ERESTART\020U\022\020\n\014SYS_ESTRPIPE\020V\022\016\n\n"
    "SYS_EUSERS\020W\022\020\n\014SYS_ENOTSOCK\020X\022\024\n\020SYS_ED"
    "ESTADDRREQ\020Y\022\020\n\014SYS_EMSGSIZE\020Z\022\022\n\016SYS_EP"
    "ROTOTYPE\020[\022\023\n\017SYS_ENOPROTOOPT\020\\\022\027\n\023SYS_E"
    "PROTONOSUPPORT\020]\022\027\n\023SYS_ESOCKTNOSUPPORT\020"
    "^\022\022\n\016SYS_EOPNOTSUPP\020_\022\024\n\020SYS_EPFNOSUPPOR"
    "T\020`\022\024\n\020SYS_EAFNOSUPPORT\020a\022\022\n\016SYS_EADDRIN"
    "USE\020b\022\025\n\021SYS_EADDRNOTAVAIL\020c\022\020\n\014SYS_ENET"
    "DOWN\020d\022\023\n\017SYS_ENETUNREACH\020e\022\021\n\rSYS_ENETR"
    "ESET\020f\022\024\n\020SYS_ECONNABORTED\020g\022\022\n\016SYS_ECON"
    "NRESET\020h\022\017\n\013SYS_ENOBUFS\020i\022\017\n\013SYS_EISCONN"
    "\020j\022\020\n\014SYS_ENOTCONN\020k\022\021\n\rSYS_ESHUTDOWN\020l\022"
    "\024\n\020SYS_ETOOMANYREFS\020m\022\021\n\rSYS_ETIMEDOUT\020n"
    "\022\024\n\020SYS_ECONNREFUSED\020o\022\021\n\rSYS_EHOSTDOWN\020"
    "p\022\024\n\020SYS_EHOSTUNREACH\020q\022\020\n\014SYS_EALREADY\020"
    "r\022\023\n\017SYS_EINPROGRESS\020s\022\016\n\nSYS_ESTALE\020t\022\017"
    "\n\013SYS_EUCLEAN\020u\022\017\n\013SYS_ENOTNAM\020v\022\017\n\013SYS_"
    "ENAVAIL\020w\022\016\n\nSYS_EISNAM\020x\022\021\n\rSYS_EREMOTE"
    "IO\020y\022\016\n\nSYS_EDQUOT\020z\022\021\n\rSYS_ENOMEDIUM\020{\022"
    "\023\n\017SYS_EMEDIUMTYPE\020|\022\021\n\rSYS_ECANCELED\020}\022"
    "\016\n\nSYS_ENOKEY\020~\022\023\n\017SYS_EKEYEXPIRED\020\177\022\024\n\017"
    "SYS_EKEYREVOKED\020\200\001\022\025\n\020SYS_EKEYREJECTED\020\201"
    "\001\022\017\n\nENOSERVICE\020\351\007\022\016\n\tENOMETHOD\020\352\007\022\r\n\010ER"
    "EQUEST\020\353\007\022\n\n\005EAUTH\020\354\007\022\022\n\rETOOMANYFAILS\020\355"
    "\007\022\021\n\014EPCHANFINISH\020\356\007\022\023\n\016EBACKUPREQUEST\020\357"
    "\007\022\021\n\014ERPCTIMEDOUT\020\360\007\022\022\n\rEFAILEDSOCKET\020\361\007"
    "\022\n\n\005EHTTP\020\362\007\022\021\n\014EOVERCROWDED\020\363\007\022\025\n\020ERTMP"
    "PUBLISHABLE\020\364\007\022\026\n\021ERTMPCREATESTREAM\020\365\007\022\t"
    "\n\004EEOF\020\366\007\022\014\n\007EUNUSED\020\367\007\022\016\n\tEINTERNAL\020\321\017\022"
    "\016\n\tERESPONSE\020\322\017\022\014\n\007ELOGOFF\020\323\017\022\013\n\006ELIMIT\020"
    "\324\017\022\013\n\006ECLOSE\020\325\017\022\t\n\004EITP\020\326\017B\031\n\010com.brpcB\r"
    "BaiduRpcErrno", 2613);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/errno.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_brpc_2ferrno_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_brpc_2ferrno_2eproto {
  StaticDescriptorInitializer_brpc_2ferrno_2eproto() {
    protobuf_AddDesc_brpc_2ferrno_2eproto();
  }
} static_descriptor_initializer_brpc_2ferrno_2eproto_;
const ::google::protobuf::EnumDescriptor* Errno_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Errno_descriptor_;
}
bool Errno_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace brpc

// @@protoc_insertion_point(global_scope)
