// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/mongo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "brpc/policy/mongo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace brpc {
namespace policy {

namespace {

const ::google::protobuf::Descriptor* MongoHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MongoHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* MongoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MongoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MongoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MongoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MongoOp_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* MongoService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_brpc_2fpolicy_2fmongo_2eproto() {
  protobuf_AddDesc_brpc_2fpolicy_2fmongo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "brpc/policy/mongo.proto");
  GOOGLE_CHECK(file != NULL);
  MongoHeader_descriptor_ = file->message_type(0);
  static const int MongoHeader_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoHeader, message_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoHeader, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoHeader, response_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoHeader, op_code_),
  };
  MongoHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MongoHeader_descriptor_,
      MongoHeader::default_instance_,
      MongoHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MongoHeader));
  MongoRequest_descriptor_ = file->message_type(1);
  static const int MongoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoRequest, message_),
  };
  MongoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MongoRequest_descriptor_,
      MongoRequest::default_instance_,
      MongoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MongoRequest));
  MongoResponse_descriptor_ = file->message_type(2);
  static const int MongoResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoResponse, response_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoResponse, cursor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoResponse, starting_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoResponse, number_returned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoResponse, message_),
  };
  MongoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MongoResponse_descriptor_,
      MongoResponse::default_instance_,
      MongoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MongoResponse));
  MongoOp_descriptor_ = file->enum_type(0);
  MongoService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_brpc_2fpolicy_2fmongo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MongoHeader_descriptor_, &MongoHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MongoRequest_descriptor_, &MongoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MongoResponse_descriptor_, &MongoResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_brpc_2fpolicy_2fmongo_2eproto() {
  delete MongoHeader::default_instance_;
  delete MongoHeader_reflection_;
  delete MongoRequest::default_instance_;
  delete MongoRequest_reflection_;
  delete MongoResponse::default_instance_;
  delete MongoResponse_reflection_;
}

void protobuf_AddDesc_brpc_2fpolicy_2fmongo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::brpc::protobuf_AddDesc_brpc_2foptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027brpc/policy/mongo.proto\022\013brpc.policy\032\022"
    "brpc/options.proto\"u\n\013MongoHeader\022\026\n\016mes"
    "sage_length\030\001 \002(\005\022\022\n\nrequest_id\030\002 \002(\005\022\023\n"
    "\013response_to\030\003 \002(\005\022%\n\007op_code\030\004 \002(\0162\024.br"
    "pc.policy.MongoOp\"I\n\014MongoRequest\022(\n\006hea"
    "der\030\001 \002(\0132\030.brpc.policy.MongoHeader\022\017\n\007m"
    "essage\030\002 \002(\t\"\245\001\n\rMongoResponse\022(\n\006header"
    "\030\001 \002(\0132\030.brpc.policy.MongoHeader\022\026\n\016resp"
    "onse_flags\030\002 \002(\005\022\021\n\tcursor_id\030\003 \002(\003\022\025\n\rs"
    "tarting_from\030\004 \002(\005\022\027\n\017number_returned\030\005 "
    "\002(\005\022\017\n\007message\030\006 \002(\t*\256\001\n\007MongoOp\022\013\n\007OPRE"
    "PLY\020\001\022\n\n\005DBMSG\020\350\007\022\016\n\tDB_UPDATE\020\321\017\022\016\n\tDB_"
    "INSERT\020\322\017\022\r\n\010DB_QUERY\020\324\017\022\017\n\nDB_GETMORE\020\325"
    "\017\022\016\n\tDB_DELETE\020\326\017\022\023\n\016DB_KILLCURSORS\020\327\017\022\017"
    "\n\nDB_COMMAND\020\330\017\022\024\n\017DB_COMMANDREPLY\020\331\0172W\n"
    "\014MongoService\022G\n\016default_method\022\031.brpc.p"
    "olicy.MongoRequest\032\032.brpc.policy.MongoRe"
    "sponseB#\n\017com.brpc.policyB\nMongoProto\200\001\001"
    "\210\001\001", 723);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/policy/mongo.proto", &protobuf_RegisterTypes);
  MongoHeader::default_instance_ = new MongoHeader();
  MongoRequest::default_instance_ = new MongoRequest();
  MongoResponse::default_instance_ = new MongoResponse();
  MongoHeader::default_instance_->InitAsDefaultInstance();
  MongoRequest::default_instance_->InitAsDefaultInstance();
  MongoResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_brpc_2fpolicy_2fmongo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_brpc_2fpolicy_2fmongo_2eproto {
  StaticDescriptorInitializer_brpc_2fpolicy_2fmongo_2eproto() {
    protobuf_AddDesc_brpc_2fpolicy_2fmongo_2eproto();
  }
} static_descriptor_initializer_brpc_2fpolicy_2fmongo_2eproto_;
const ::google::protobuf::EnumDescriptor* MongoOp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MongoOp_descriptor_;
}
bool MongoOp_IsValid(int value) {
  switch(value) {
    case 1:
    case 1000:
    case 2001:
    case 2002:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MongoHeader::kMessageLengthFieldNumber;
const int MongoHeader::kRequestIdFieldNumber;
const int MongoHeader::kResponseToFieldNumber;
const int MongoHeader::kOpCodeFieldNumber;
#endif  // !_MSC_VER

MongoHeader::MongoHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.MongoHeader)
}

void MongoHeader::InitAsDefaultInstance() {
}

MongoHeader::MongoHeader(const MongoHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.policy.MongoHeader)
}

void MongoHeader::SharedCtor() {
  _cached_size_ = 0;
  message_length_ = 0;
  request_id_ = 0;
  response_to_ = 0;
  op_code_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MongoHeader::~MongoHeader() {
  // @@protoc_insertion_point(destructor:brpc.policy.MongoHeader)
  SharedDtor();
}

void MongoHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MongoHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MongoHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MongoHeader_descriptor_;
}

const MongoHeader& MongoHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fmongo_2eproto();
  return *default_instance_;
}

MongoHeader* MongoHeader::default_instance_ = NULL;

MongoHeader* MongoHeader::New() const {
  return new MongoHeader;
}

void MongoHeader::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MongoHeader*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(message_length_, response_to_);
    op_code_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MongoHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.MongoHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_length = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_length_)));
          set_has_message_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_request_id;
        break;
      }

      // required int32 request_id = 2;
      case 2: {
        if (tag == 16) {
         parse_request_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_response_to;
        break;
      }

      // required int32 response_to = 3;
      case 3: {
        if (tag == 24) {
         parse_response_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_to_)));
          set_has_response_to();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_op_code;
        break;
      }

      // required .brpc.policy.MongoOp op_code = 4;
      case 4: {
        if (tag == 32) {
         parse_op_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::policy::MongoOp_IsValid(value)) {
            set_op_code(static_cast< ::brpc::policy::MongoOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.MongoHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.MongoHeader)
  return false;
#undef DO_
}

void MongoHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.MongoHeader)
  // required int32 message_length = 1;
  if (has_message_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_length(), output);
  }

  // required int32 request_id = 2;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->request_id(), output);
  }

  // required int32 response_to = 3;
  if (has_response_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->response_to(), output);
  }

  // required .brpc.policy.MongoOp op_code = 4;
  if (has_op_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->op_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.MongoHeader)
}

::google::protobuf::uint8* MongoHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.MongoHeader)
  // required int32 message_length = 1;
  if (has_message_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_length(), target);
  }

  // required int32 request_id = 2;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->request_id(), target);
  }

  // required int32 response_to = 3;
  if (has_response_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->response_to(), target);
  }

  // required .brpc.policy.MongoOp op_code = 4;
  if (has_op_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->op_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.MongoHeader)
  return target;
}

int MongoHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_length = 1;
    if (has_message_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_length());
    }

    // required int32 request_id = 2;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_id());
    }

    // required int32 response_to = 3;
    if (has_response_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response_to());
    }

    // required .brpc.policy.MongoOp op_code = 4;
    if (has_op_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MongoHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MongoHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MongoHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MongoHeader::MergeFrom(const MongoHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_length()) {
      set_message_length(from.message_length());
    }
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_response_to()) {
      set_response_to(from.response_to());
    }
    if (from.has_op_code()) {
      set_op_code(from.op_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MongoHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MongoHeader::CopyFrom(const MongoHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MongoHeader::Swap(MongoHeader* other) {
  if (other != this) {
    std::swap(message_length_, other->message_length_);
    std::swap(request_id_, other->request_id_);
    std::swap(response_to_, other->response_to_);
    std::swap(op_code_, other->op_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MongoHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MongoHeader_descriptor_;
  metadata.reflection = MongoHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MongoRequest::kHeaderFieldNumber;
const int MongoRequest::kMessageFieldNumber;
#endif  // !_MSC_VER

MongoRequest::MongoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.MongoRequest)
}

void MongoRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::brpc::policy::MongoHeader*>(&::brpc::policy::MongoHeader::default_instance());
}

MongoRequest::MongoRequest(const MongoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.policy.MongoRequest)
}

void MongoRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MongoRequest::~MongoRequest() {
  // @@protoc_insertion_point(destructor:brpc.policy.MongoRequest)
  SharedDtor();
}

void MongoRequest::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void MongoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MongoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MongoRequest_descriptor_;
}

const MongoRequest& MongoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fmongo_2eproto();
  return *default_instance_;
}

MongoRequest* MongoRequest::default_instance_ = NULL;

MongoRequest* MongoRequest::New() const {
  return new MongoRequest;
}

void MongoRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_header()) {
      if (header_ != NULL) header_->::brpc::policy::MongoHeader::Clear();
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MongoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.MongoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .brpc.policy.MongoHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // required string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.MongoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.MongoRequest)
  return false;
#undef DO_
}

void MongoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.MongoRequest)
  // required .brpc.policy.MongoHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.MongoRequest)
}

::google::protobuf::uint8* MongoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.MongoRequest)
  // required .brpc.policy.MongoHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.MongoRequest)
  return target;
}

int MongoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .brpc.policy.MongoHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MongoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MongoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MongoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MongoRequest::MergeFrom(const MongoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::brpc::policy::MongoHeader::MergeFrom(from.header());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MongoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MongoRequest::CopyFrom(const MongoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void MongoRequest::Swap(MongoRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MongoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MongoRequest_descriptor_;
  metadata.reflection = MongoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MongoResponse::kHeaderFieldNumber;
const int MongoResponse::kResponseFlagsFieldNumber;
const int MongoResponse::kCursorIdFieldNumber;
const int MongoResponse::kStartingFromFieldNumber;
const int MongoResponse::kNumberReturnedFieldNumber;
const int MongoResponse::kMessageFieldNumber;
#endif  // !_MSC_VER

MongoResponse::MongoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.MongoResponse)
}

void MongoResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::brpc::policy::MongoHeader*>(&::brpc::policy::MongoHeader::default_instance());
}

MongoResponse::MongoResponse(const MongoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.policy.MongoResponse)
}

void MongoResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  response_flags_ = 0;
  cursor_id_ = GOOGLE_LONGLONG(0);
  starting_from_ = 0;
  number_returned_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MongoResponse::~MongoResponse() {
  // @@protoc_insertion_point(destructor:brpc.policy.MongoResponse)
  SharedDtor();
}

void MongoResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void MongoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MongoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MongoResponse_descriptor_;
}

const MongoResponse& MongoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fmongo_2eproto();
  return *default_instance_;
}

MongoResponse* MongoResponse::default_instance_ = NULL;

MongoResponse* MongoResponse::New() const {
  return new MongoResponse;
}

void MongoResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MongoResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(cursor_id_, starting_from_);
    if (has_header()) {
      if (header_ != NULL) header_->::brpc::policy::MongoHeader::Clear();
    }
    number_returned_ = 0;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MongoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.MongoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .brpc.policy.MongoHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_response_flags;
        break;
      }

      // required int32 response_flags = 2;
      case 2: {
        if (tag == 16) {
         parse_response_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_flags_)));
          set_has_response_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cursor_id;
        break;
      }

      // required int64 cursor_id = 3;
      case 3: {
        if (tag == 24) {
         parse_cursor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cursor_id_)));
          set_has_cursor_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_starting_from;
        break;
      }

      // required int32 starting_from = 4;
      case 4: {
        if (tag == 32) {
         parse_starting_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starting_from_)));
          set_has_starting_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_number_returned;
        break;
      }

      // required int32 number_returned = 5;
      case 5: {
        if (tag == 40) {
         parse_number_returned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_returned_)));
          set_has_number_returned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_message;
        break;
      }

      // required string message = 6;
      case 6: {
        if (tag == 50) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.MongoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.MongoResponse)
  return false;
#undef DO_
}

void MongoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.MongoResponse)
  // required .brpc.policy.MongoHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required int32 response_flags = 2;
  if (has_response_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->response_flags(), output);
  }

  // required int64 cursor_id = 3;
  if (has_cursor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cursor_id(), output);
  }

  // required int32 starting_from = 4;
  if (has_starting_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->starting_from(), output);
  }

  // required int32 number_returned = 5;
  if (has_number_returned()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->number_returned(), output);
  }

  // required string message = 6;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.MongoResponse)
}

::google::protobuf::uint8* MongoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.MongoResponse)
  // required .brpc.policy.MongoHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required int32 response_flags = 2;
  if (has_response_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->response_flags(), target);
  }

  // required int64 cursor_id = 3;
  if (has_cursor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cursor_id(), target);
  }

  // required int32 starting_from = 4;
  if (has_starting_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->starting_from(), target);
  }

  // required int32 number_returned = 5;
  if (has_number_returned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->number_returned(), target);
  }

  // required string message = 6;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.MongoResponse)
  return target;
}

int MongoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .brpc.policy.MongoHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required int32 response_flags = 2;
    if (has_response_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response_flags());
    }

    // required int64 cursor_id = 3;
    if (has_cursor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cursor_id());
    }

    // required int32 starting_from = 4;
    if (has_starting_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starting_from());
    }

    // required int32 number_returned = 5;
    if (has_number_returned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number_returned());
    }

    // required string message = 6;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MongoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MongoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MongoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MongoResponse::MergeFrom(const MongoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::brpc::policy::MongoHeader::MergeFrom(from.header());
    }
    if (from.has_response_flags()) {
      set_response_flags(from.response_flags());
    }
    if (from.has_cursor_id()) {
      set_cursor_id(from.cursor_id());
    }
    if (from.has_starting_from()) {
      set_starting_from(from.starting_from());
    }
    if (from.has_number_returned()) {
      set_number_returned(from.number_returned());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MongoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MongoResponse::CopyFrom(const MongoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void MongoResponse::Swap(MongoResponse* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(response_flags_, other->response_flags_);
    std::swap(cursor_id_, other->cursor_id_);
    std::swap(starting_from_, other->starting_from_);
    std::swap(number_returned_, other->number_returned_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MongoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MongoResponse_descriptor_;
  metadata.reflection = MongoResponse_reflection_;
  return metadata;
}


// ===================================================================

MongoService::~MongoService() {}

const ::google::protobuf::ServiceDescriptor* MongoService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MongoService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* MongoService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return MongoService_descriptor_;
}

void MongoService::default_method(::google::protobuf::RpcController* controller,
                         const ::brpc::policy::MongoRequest*,
                         ::brpc::policy::MongoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method default_method() not implemented.");
  done->Run();
}

void MongoService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), MongoService_descriptor_);
  switch(method->index()) {
    case 0:
      default_method(controller,
             ::google::protobuf::down_cast<const ::brpc::policy::MongoRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::policy::MongoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& MongoService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::policy::MongoRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& MongoService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::policy::MongoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

MongoService_Stub::MongoService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MongoService_Stub::MongoService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
MongoService_Stub::~MongoService_Stub() {
  if (owns_channel_) delete channel_;
}

void MongoService_Stub::default_method(::google::protobuf::RpcController* controller,
                              const ::brpc::policy::MongoRequest* request,
                              ::brpc::policy::MongoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace policy
}  // namespace brpc

// @@protoc_insertion_point(global_scope)
