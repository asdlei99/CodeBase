// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: addressbook_map.proto

#ifndef PROTOBUF_addressbook_5fmap_2eproto__INCLUDED
#define PROTOBUF_addressbook_5fmap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_addressbook_5fmap_2eproto();
void protobuf_AssignDesc_addressbook_5fmap_2eproto();
void protobuf_ShutdownFile_addressbook_5fmap_2eproto();

class AddressNoMap;
class AddressIntMap;
class AddressIntMap_MapFieldEntry;
class AddressStringMap;
class AddressStringMap_MapFieldEntry;
class AddressComplex;
class AddressComplex_FriendEntry;
class AddressComplex_FriendEntry_Education;
class haha;

// ===================================================================

class AddressNoMap : public ::google::protobuf::Message {
 public:
  AddressNoMap();
  virtual ~AddressNoMap();

  AddressNoMap(const AddressNoMap& from);

  inline AddressNoMap& operator=(const AddressNoMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressNoMap& default_instance();

  void Swap(AddressNoMap* other);

  // implements Message ----------------------------------------------

  AddressNoMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddressNoMap& from);
  void MergeFrom(const AddressNoMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string addr = 1;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 1;
  inline const ::std::string& addr() const;
  inline void set_addr(const ::std::string& value);
  inline void set_addr(const char* value);
  inline void set_addr(const char* value, size_t size);
  inline ::std::string* mutable_addr();
  inline ::std::string* release_addr();
  inline void set_allocated_addr(::std::string* addr);

  // @@protoc_insertion_point(class_scope:AddressNoMap)
 private:
  inline void set_has_addr();
  inline void clear_has_addr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* addr_;
  friend void  protobuf_AddDesc_addressbook_5fmap_2eproto();
  friend void protobuf_AssignDesc_addressbook_5fmap_2eproto();
  friend void protobuf_ShutdownFile_addressbook_5fmap_2eproto();

  void InitAsDefaultInstance();
  static AddressNoMap* default_instance_;
};
// -------------------------------------------------------------------

class AddressIntMap_MapFieldEntry : public ::google::protobuf::Message {
 public:
  AddressIntMap_MapFieldEntry();
  virtual ~AddressIntMap_MapFieldEntry();

  AddressIntMap_MapFieldEntry(const AddressIntMap_MapFieldEntry& from);

  inline AddressIntMap_MapFieldEntry& operator=(const AddressIntMap_MapFieldEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressIntMap_MapFieldEntry& default_instance();

  void Swap(AddressIntMap_MapFieldEntry* other);

  // implements Message ----------------------------------------------

  AddressIntMap_MapFieldEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddressIntMap_MapFieldEntry& from);
  void MergeFrom(const AddressIntMap_MapFieldEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AddressIntMap.MapFieldEntry)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::google::protobuf::int32 value_;
  friend void  protobuf_AddDesc_addressbook_5fmap_2eproto();
  friend void protobuf_AssignDesc_addressbook_5fmap_2eproto();
  friend void protobuf_ShutdownFile_addressbook_5fmap_2eproto();

  void InitAsDefaultInstance();
  static AddressIntMap_MapFieldEntry* default_instance_;
};
// -------------------------------------------------------------------

class AddressIntMap : public ::google::protobuf::Message {
 public:
  AddressIntMap();
  virtual ~AddressIntMap();

  AddressIntMap(const AddressIntMap& from);

  inline AddressIntMap& operator=(const AddressIntMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressIntMap& default_instance();

  void Swap(AddressIntMap* other);

  // implements Message ----------------------------------------------

  AddressIntMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddressIntMap& from);
  void MergeFrom(const AddressIntMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AddressIntMap_MapFieldEntry MapFieldEntry;

  // accessors -------------------------------------------------------

  // required string addr = 1;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 1;
  inline const ::std::string& addr() const;
  inline void set_addr(const ::std::string& value);
  inline void set_addr(const char* value);
  inline void set_addr(const char* value, size_t size);
  inline ::std::string* mutable_addr();
  inline ::std::string* release_addr();
  inline void set_allocated_addr(::std::string* addr);

  // repeated .AddressIntMap.MapFieldEntry numbers = 2;
  inline int numbers_size() const;
  inline void clear_numbers();
  static const int kNumbersFieldNumber = 2;
  inline const ::AddressIntMap_MapFieldEntry& numbers(int index) const;
  inline ::AddressIntMap_MapFieldEntry* mutable_numbers(int index);
  inline ::AddressIntMap_MapFieldEntry* add_numbers();
  inline const ::google::protobuf::RepeatedPtrField< ::AddressIntMap_MapFieldEntry >&
      numbers() const;
  inline ::google::protobuf::RepeatedPtrField< ::AddressIntMap_MapFieldEntry >*
      mutable_numbers();

  // @@protoc_insertion_point(class_scope:AddressIntMap)
 private:
  inline void set_has_addr();
  inline void clear_has_addr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* addr_;
  ::google::protobuf::RepeatedPtrField< ::AddressIntMap_MapFieldEntry > numbers_;
  friend void  protobuf_AddDesc_addressbook_5fmap_2eproto();
  friend void protobuf_AssignDesc_addressbook_5fmap_2eproto();
  friend void protobuf_ShutdownFile_addressbook_5fmap_2eproto();

  void InitAsDefaultInstance();
  static AddressIntMap* default_instance_;
};
// -------------------------------------------------------------------

class AddressStringMap_MapFieldEntry : public ::google::protobuf::Message {
 public:
  AddressStringMap_MapFieldEntry();
  virtual ~AddressStringMap_MapFieldEntry();

  AddressStringMap_MapFieldEntry(const AddressStringMap_MapFieldEntry& from);

  inline AddressStringMap_MapFieldEntry& operator=(const AddressStringMap_MapFieldEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressStringMap_MapFieldEntry& default_instance();

  void Swap(AddressStringMap_MapFieldEntry* other);

  // implements Message ----------------------------------------------

  AddressStringMap_MapFieldEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddressStringMap_MapFieldEntry& from);
  void MergeFrom(const AddressStringMap_MapFieldEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:AddressStringMap.MapFieldEntry)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_addressbook_5fmap_2eproto();
  friend void protobuf_AssignDesc_addressbook_5fmap_2eproto();
  friend void protobuf_ShutdownFile_addressbook_5fmap_2eproto();

  void InitAsDefaultInstance();
  static AddressStringMap_MapFieldEntry* default_instance_;
};
// -------------------------------------------------------------------

class AddressStringMap : public ::google::protobuf::Message {
 public:
  AddressStringMap();
  virtual ~AddressStringMap();

  AddressStringMap(const AddressStringMap& from);

  inline AddressStringMap& operator=(const AddressStringMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressStringMap& default_instance();

  void Swap(AddressStringMap* other);

  // implements Message ----------------------------------------------

  AddressStringMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddressStringMap& from);
  void MergeFrom(const AddressStringMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AddressStringMap_MapFieldEntry MapFieldEntry;

  // accessors -------------------------------------------------------

  // required string addr = 1;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 1;
  inline const ::std::string& addr() const;
  inline void set_addr(const ::std::string& value);
  inline void set_addr(const char* value);
  inline void set_addr(const char* value, size_t size);
  inline ::std::string* mutable_addr();
  inline ::std::string* release_addr();
  inline void set_allocated_addr(::std::string* addr);

  // repeated .AddressStringMap.MapFieldEntry contacts = 2;
  inline int contacts_size() const;
  inline void clear_contacts();
  static const int kContactsFieldNumber = 2;
  inline const ::AddressStringMap_MapFieldEntry& contacts(int index) const;
  inline ::AddressStringMap_MapFieldEntry* mutable_contacts(int index);
  inline ::AddressStringMap_MapFieldEntry* add_contacts();
  inline const ::google::protobuf::RepeatedPtrField< ::AddressStringMap_MapFieldEntry >&
      contacts() const;
  inline ::google::protobuf::RepeatedPtrField< ::AddressStringMap_MapFieldEntry >*
      mutable_contacts();

  // @@protoc_insertion_point(class_scope:AddressStringMap)
 private:
  inline void set_has_addr();
  inline void clear_has_addr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* addr_;
  ::google::protobuf::RepeatedPtrField< ::AddressStringMap_MapFieldEntry > contacts_;
  friend void  protobuf_AddDesc_addressbook_5fmap_2eproto();
  friend void protobuf_AssignDesc_addressbook_5fmap_2eproto();
  friend void protobuf_ShutdownFile_addressbook_5fmap_2eproto();

  void InitAsDefaultInstance();
  static AddressStringMap* default_instance_;
};
// -------------------------------------------------------------------

class AddressComplex_FriendEntry_Education : public ::google::protobuf::Message {
 public:
  AddressComplex_FriendEntry_Education();
  virtual ~AddressComplex_FriendEntry_Education();

  AddressComplex_FriendEntry_Education(const AddressComplex_FriendEntry_Education& from);

  inline AddressComplex_FriendEntry_Education& operator=(const AddressComplex_FriendEntry_Education& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressComplex_FriendEntry_Education& default_instance();

  void Swap(AddressComplex_FriendEntry_Education* other);

  // implements Message ----------------------------------------------

  AddressComplex_FriendEntry_Education* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddressComplex_FriendEntry_Education& from);
  void MergeFrom(const AddressComplex_FriendEntry_Education& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string school = 1;
  inline bool has_school() const;
  inline void clear_school();
  static const int kSchoolFieldNumber = 1;
  inline const ::std::string& school() const;
  inline void set_school(const ::std::string& value);
  inline void set_school(const char* value);
  inline void set_school(const char* value, size_t size);
  inline ::std::string* mutable_school();
  inline ::std::string* release_school();
  inline void set_allocated_school(::std::string* school);

  // required int32 year = 2;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 2;
  inline ::google::protobuf::int32 year() const;
  inline void set_year(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AddressComplex.FriendEntry.Education)
 private:
  inline void set_has_school();
  inline void clear_has_school();
  inline void set_has_year();
  inline void clear_has_year();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* school_;
  ::google::protobuf::int32 year_;
  friend void  protobuf_AddDesc_addressbook_5fmap_2eproto();
  friend void protobuf_AssignDesc_addressbook_5fmap_2eproto();
  friend void protobuf_ShutdownFile_addressbook_5fmap_2eproto();

  void InitAsDefaultInstance();
  static AddressComplex_FriendEntry_Education* default_instance_;
};
// -------------------------------------------------------------------

class AddressComplex_FriendEntry : public ::google::protobuf::Message {
 public:
  AddressComplex_FriendEntry();
  virtual ~AddressComplex_FriendEntry();

  AddressComplex_FriendEntry(const AddressComplex_FriendEntry& from);

  inline AddressComplex_FriendEntry& operator=(const AddressComplex_FriendEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressComplex_FriendEntry& default_instance();

  void Swap(AddressComplex_FriendEntry* other);

  // implements Message ----------------------------------------------

  AddressComplex_FriendEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddressComplex_FriendEntry& from);
  void MergeFrom(const AddressComplex_FriendEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AddressComplex_FriendEntry_Education Education;

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // repeated .AddressComplex.FriendEntry.Education value = 2;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::AddressComplex_FriendEntry_Education& value(int index) const;
  inline ::AddressComplex_FriendEntry_Education* mutable_value(int index);
  inline ::AddressComplex_FriendEntry_Education* add_value();
  inline const ::google::protobuf::RepeatedPtrField< ::AddressComplex_FriendEntry_Education >&
      value() const;
  inline ::google::protobuf::RepeatedPtrField< ::AddressComplex_FriendEntry_Education >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:AddressComplex.FriendEntry)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::google::protobuf::RepeatedPtrField< ::AddressComplex_FriendEntry_Education > value_;
  friend void  protobuf_AddDesc_addressbook_5fmap_2eproto();
  friend void protobuf_AssignDesc_addressbook_5fmap_2eproto();
  friend void protobuf_ShutdownFile_addressbook_5fmap_2eproto();

  void InitAsDefaultInstance();
  static AddressComplex_FriendEntry* default_instance_;
};
// -------------------------------------------------------------------

class AddressComplex : public ::google::protobuf::Message {
 public:
  AddressComplex();
  virtual ~AddressComplex();

  AddressComplex(const AddressComplex& from);

  inline AddressComplex& operator=(const AddressComplex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressComplex& default_instance();

  void Swap(AddressComplex* other);

  // implements Message ----------------------------------------------

  AddressComplex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddressComplex& from);
  void MergeFrom(const AddressComplex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AddressComplex_FriendEntry FriendEntry;

  // accessors -------------------------------------------------------

  // required string addr = 1;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 1;
  inline const ::std::string& addr() const;
  inline void set_addr(const ::std::string& value);
  inline void set_addr(const char* value);
  inline void set_addr(const char* value, size_t size);
  inline ::std::string* mutable_addr();
  inline ::std::string* release_addr();
  inline void set_allocated_addr(::std::string* addr);

  // repeated .AddressComplex.FriendEntry friends = 2;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 2;
  inline const ::AddressComplex_FriendEntry& friends(int index) const;
  inline ::AddressComplex_FriendEntry* mutable_friends(int index);
  inline ::AddressComplex_FriendEntry* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::AddressComplex_FriendEntry >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::AddressComplex_FriendEntry >*
      mutable_friends();

  // @@protoc_insertion_point(class_scope:AddressComplex)
 private:
  inline void set_has_addr();
  inline void clear_has_addr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* addr_;
  ::google::protobuf::RepeatedPtrField< ::AddressComplex_FriendEntry > friends_;
  friend void  protobuf_AddDesc_addressbook_5fmap_2eproto();
  friend void protobuf_AssignDesc_addressbook_5fmap_2eproto();
  friend void protobuf_ShutdownFile_addressbook_5fmap_2eproto();

  void InitAsDefaultInstance();
  static AddressComplex* default_instance_;
};
// -------------------------------------------------------------------

class haha : public ::google::protobuf::Message {
 public:
  haha();
  virtual ~haha();

  haha(const haha& from);

  inline haha& operator=(const haha& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const haha& default_instance();

  void Swap(haha* other);

  // implements Message ----------------------------------------------

  haha* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const haha& from);
  void MergeFrom(const haha& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 a = 1;
  inline int a_size() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline ::google::protobuf::int32 a(int index) const;
  inline void set_a(int index, ::google::protobuf::int32 value);
  inline void add_a(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      a() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_a();

  // @@protoc_insertion_point(class_scope:haha)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > a_;
  friend void  protobuf_AddDesc_addressbook_5fmap_2eproto();
  friend void protobuf_AssignDesc_addressbook_5fmap_2eproto();
  friend void protobuf_ShutdownFile_addressbook_5fmap_2eproto();

  void InitAsDefaultInstance();
  static haha* default_instance_;
};
// ===================================================================


// ===================================================================

// AddressNoMap

// required string addr = 1;
inline bool AddressNoMap::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddressNoMap::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddressNoMap::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddressNoMap::clear_addr() {
  if (addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_->clear();
  }
  clear_has_addr();
}
inline const ::std::string& AddressNoMap::addr() const {
  // @@protoc_insertion_point(field_get:AddressNoMap.addr)
  return *addr_;
}
inline void AddressNoMap::set_addr(const ::std::string& value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
  // @@protoc_insertion_point(field_set:AddressNoMap.addr)
}
inline void AddressNoMap::set_addr(const char* value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
  // @@protoc_insertion_point(field_set_char:AddressNoMap.addr)
}
inline void AddressNoMap::set_addr(const char* value, size_t size) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AddressNoMap.addr)
}
inline ::std::string* AddressNoMap::mutable_addr() {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AddressNoMap.addr)
  return addr_;
}
inline ::std::string* AddressNoMap::release_addr() {
  clear_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = addr_;
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddressNoMap::set_allocated_addr(::std::string* addr) {
  if (addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addr_;
  }
  if (addr) {
    set_has_addr();
    addr_ = addr;
  } else {
    clear_has_addr();
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AddressNoMap.addr)
}

// -------------------------------------------------------------------

// AddressIntMap_MapFieldEntry

// required string key = 1;
inline bool AddressIntMap_MapFieldEntry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddressIntMap_MapFieldEntry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddressIntMap_MapFieldEntry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddressIntMap_MapFieldEntry::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& AddressIntMap_MapFieldEntry::key() const {
  // @@protoc_insertion_point(field_get:AddressIntMap.MapFieldEntry.key)
  return *key_;
}
inline void AddressIntMap_MapFieldEntry::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:AddressIntMap.MapFieldEntry.key)
}
inline void AddressIntMap_MapFieldEntry::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:AddressIntMap.MapFieldEntry.key)
}
inline void AddressIntMap_MapFieldEntry::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AddressIntMap.MapFieldEntry.key)
}
inline ::std::string* AddressIntMap_MapFieldEntry::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AddressIntMap.MapFieldEntry.key)
  return key_;
}
inline ::std::string* AddressIntMap_MapFieldEntry::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddressIntMap_MapFieldEntry::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AddressIntMap.MapFieldEntry.key)
}

// required int32 value = 2;
inline bool AddressIntMap_MapFieldEntry::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddressIntMap_MapFieldEntry::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddressIntMap_MapFieldEntry::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddressIntMap_MapFieldEntry::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 AddressIntMap_MapFieldEntry::value() const {
  // @@protoc_insertion_point(field_get:AddressIntMap.MapFieldEntry.value)
  return value_;
}
inline void AddressIntMap_MapFieldEntry::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:AddressIntMap.MapFieldEntry.value)
}

// -------------------------------------------------------------------

// AddressIntMap

// required string addr = 1;
inline bool AddressIntMap::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddressIntMap::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddressIntMap::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddressIntMap::clear_addr() {
  if (addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_->clear();
  }
  clear_has_addr();
}
inline const ::std::string& AddressIntMap::addr() const {
  // @@protoc_insertion_point(field_get:AddressIntMap.addr)
  return *addr_;
}
inline void AddressIntMap::set_addr(const ::std::string& value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
  // @@protoc_insertion_point(field_set:AddressIntMap.addr)
}
inline void AddressIntMap::set_addr(const char* value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
  // @@protoc_insertion_point(field_set_char:AddressIntMap.addr)
}
inline void AddressIntMap::set_addr(const char* value, size_t size) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AddressIntMap.addr)
}
inline ::std::string* AddressIntMap::mutable_addr() {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AddressIntMap.addr)
  return addr_;
}
inline ::std::string* AddressIntMap::release_addr() {
  clear_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = addr_;
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddressIntMap::set_allocated_addr(::std::string* addr) {
  if (addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addr_;
  }
  if (addr) {
    set_has_addr();
    addr_ = addr;
  } else {
    clear_has_addr();
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AddressIntMap.addr)
}

// repeated .AddressIntMap.MapFieldEntry numbers = 2;
inline int AddressIntMap::numbers_size() const {
  return numbers_.size();
}
inline void AddressIntMap::clear_numbers() {
  numbers_.Clear();
}
inline const ::AddressIntMap_MapFieldEntry& AddressIntMap::numbers(int index) const {
  // @@protoc_insertion_point(field_get:AddressIntMap.numbers)
  return numbers_.Get(index);
}
inline ::AddressIntMap_MapFieldEntry* AddressIntMap::mutable_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:AddressIntMap.numbers)
  return numbers_.Mutable(index);
}
inline ::AddressIntMap_MapFieldEntry* AddressIntMap::add_numbers() {
  // @@protoc_insertion_point(field_add:AddressIntMap.numbers)
  return numbers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AddressIntMap_MapFieldEntry >&
AddressIntMap::numbers() const {
  // @@protoc_insertion_point(field_list:AddressIntMap.numbers)
  return numbers_;
}
inline ::google::protobuf::RepeatedPtrField< ::AddressIntMap_MapFieldEntry >*
AddressIntMap::mutable_numbers() {
  // @@protoc_insertion_point(field_mutable_list:AddressIntMap.numbers)
  return &numbers_;
}

// -------------------------------------------------------------------

// AddressStringMap_MapFieldEntry

// required string key = 1;
inline bool AddressStringMap_MapFieldEntry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddressStringMap_MapFieldEntry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddressStringMap_MapFieldEntry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddressStringMap_MapFieldEntry::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& AddressStringMap_MapFieldEntry::key() const {
  // @@protoc_insertion_point(field_get:AddressStringMap.MapFieldEntry.key)
  return *key_;
}
inline void AddressStringMap_MapFieldEntry::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:AddressStringMap.MapFieldEntry.key)
}
inline void AddressStringMap_MapFieldEntry::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:AddressStringMap.MapFieldEntry.key)
}
inline void AddressStringMap_MapFieldEntry::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AddressStringMap.MapFieldEntry.key)
}
inline ::std::string* AddressStringMap_MapFieldEntry::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AddressStringMap.MapFieldEntry.key)
  return key_;
}
inline ::std::string* AddressStringMap_MapFieldEntry::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddressStringMap_MapFieldEntry::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AddressStringMap.MapFieldEntry.key)
}

// required string value = 2;
inline bool AddressStringMap_MapFieldEntry::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddressStringMap_MapFieldEntry::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddressStringMap_MapFieldEntry::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddressStringMap_MapFieldEntry::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& AddressStringMap_MapFieldEntry::value() const {
  // @@protoc_insertion_point(field_get:AddressStringMap.MapFieldEntry.value)
  return *value_;
}
inline void AddressStringMap_MapFieldEntry::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:AddressStringMap.MapFieldEntry.value)
}
inline void AddressStringMap_MapFieldEntry::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:AddressStringMap.MapFieldEntry.value)
}
inline void AddressStringMap_MapFieldEntry::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AddressStringMap.MapFieldEntry.value)
}
inline ::std::string* AddressStringMap_MapFieldEntry::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AddressStringMap.MapFieldEntry.value)
  return value_;
}
inline ::std::string* AddressStringMap_MapFieldEntry::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddressStringMap_MapFieldEntry::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AddressStringMap.MapFieldEntry.value)
}

// -------------------------------------------------------------------

// AddressStringMap

// required string addr = 1;
inline bool AddressStringMap::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddressStringMap::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddressStringMap::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddressStringMap::clear_addr() {
  if (addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_->clear();
  }
  clear_has_addr();
}
inline const ::std::string& AddressStringMap::addr() const {
  // @@protoc_insertion_point(field_get:AddressStringMap.addr)
  return *addr_;
}
inline void AddressStringMap::set_addr(const ::std::string& value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
  // @@protoc_insertion_point(field_set:AddressStringMap.addr)
}
inline void AddressStringMap::set_addr(const char* value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
  // @@protoc_insertion_point(field_set_char:AddressStringMap.addr)
}
inline void AddressStringMap::set_addr(const char* value, size_t size) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AddressStringMap.addr)
}
inline ::std::string* AddressStringMap::mutable_addr() {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AddressStringMap.addr)
  return addr_;
}
inline ::std::string* AddressStringMap::release_addr() {
  clear_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = addr_;
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddressStringMap::set_allocated_addr(::std::string* addr) {
  if (addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addr_;
  }
  if (addr) {
    set_has_addr();
    addr_ = addr;
  } else {
    clear_has_addr();
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AddressStringMap.addr)
}

// repeated .AddressStringMap.MapFieldEntry contacts = 2;
inline int AddressStringMap::contacts_size() const {
  return contacts_.size();
}
inline void AddressStringMap::clear_contacts() {
  contacts_.Clear();
}
inline const ::AddressStringMap_MapFieldEntry& AddressStringMap::contacts(int index) const {
  // @@protoc_insertion_point(field_get:AddressStringMap.contacts)
  return contacts_.Get(index);
}
inline ::AddressStringMap_MapFieldEntry* AddressStringMap::mutable_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:AddressStringMap.contacts)
  return contacts_.Mutable(index);
}
inline ::AddressStringMap_MapFieldEntry* AddressStringMap::add_contacts() {
  // @@protoc_insertion_point(field_add:AddressStringMap.contacts)
  return contacts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AddressStringMap_MapFieldEntry >&
AddressStringMap::contacts() const {
  // @@protoc_insertion_point(field_list:AddressStringMap.contacts)
  return contacts_;
}
inline ::google::protobuf::RepeatedPtrField< ::AddressStringMap_MapFieldEntry >*
AddressStringMap::mutable_contacts() {
  // @@protoc_insertion_point(field_mutable_list:AddressStringMap.contacts)
  return &contacts_;
}

// -------------------------------------------------------------------

// AddressComplex_FriendEntry_Education

// required string school = 1;
inline bool AddressComplex_FriendEntry_Education::has_school() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddressComplex_FriendEntry_Education::set_has_school() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddressComplex_FriendEntry_Education::clear_has_school() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddressComplex_FriendEntry_Education::clear_school() {
  if (school_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_->clear();
  }
  clear_has_school();
}
inline const ::std::string& AddressComplex_FriendEntry_Education::school() const {
  // @@protoc_insertion_point(field_get:AddressComplex.FriendEntry.Education.school)
  return *school_;
}
inline void AddressComplex_FriendEntry_Education::set_school(const ::std::string& value) {
  set_has_school();
  if (school_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_ = new ::std::string;
  }
  school_->assign(value);
  // @@protoc_insertion_point(field_set:AddressComplex.FriendEntry.Education.school)
}
inline void AddressComplex_FriendEntry_Education::set_school(const char* value) {
  set_has_school();
  if (school_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_ = new ::std::string;
  }
  school_->assign(value);
  // @@protoc_insertion_point(field_set_char:AddressComplex.FriendEntry.Education.school)
}
inline void AddressComplex_FriendEntry_Education::set_school(const char* value, size_t size) {
  set_has_school();
  if (school_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_ = new ::std::string;
  }
  school_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AddressComplex.FriendEntry.Education.school)
}
inline ::std::string* AddressComplex_FriendEntry_Education::mutable_school() {
  set_has_school();
  if (school_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AddressComplex.FriendEntry.Education.school)
  return school_;
}
inline ::std::string* AddressComplex_FriendEntry_Education::release_school() {
  clear_has_school();
  if (school_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = school_;
    school_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddressComplex_FriendEntry_Education::set_allocated_school(::std::string* school) {
  if (school_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete school_;
  }
  if (school) {
    set_has_school();
    school_ = school;
  } else {
    clear_has_school();
    school_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AddressComplex.FriendEntry.Education.school)
}

// required int32 year = 2;
inline bool AddressComplex_FriendEntry_Education::has_year() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddressComplex_FriendEntry_Education::set_has_year() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddressComplex_FriendEntry_Education::clear_has_year() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddressComplex_FriendEntry_Education::clear_year() {
  year_ = 0;
  clear_has_year();
}
inline ::google::protobuf::int32 AddressComplex_FriendEntry_Education::year() const {
  // @@protoc_insertion_point(field_get:AddressComplex.FriendEntry.Education.year)
  return year_;
}
inline void AddressComplex_FriendEntry_Education::set_year(::google::protobuf::int32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:AddressComplex.FriendEntry.Education.year)
}

// -------------------------------------------------------------------

// AddressComplex_FriendEntry

// required string key = 1;
inline bool AddressComplex_FriendEntry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddressComplex_FriendEntry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddressComplex_FriendEntry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddressComplex_FriendEntry::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& AddressComplex_FriendEntry::key() const {
  // @@protoc_insertion_point(field_get:AddressComplex.FriendEntry.key)
  return *key_;
}
inline void AddressComplex_FriendEntry::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:AddressComplex.FriendEntry.key)
}
inline void AddressComplex_FriendEntry::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:AddressComplex.FriendEntry.key)
}
inline void AddressComplex_FriendEntry::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AddressComplex.FriendEntry.key)
}
inline ::std::string* AddressComplex_FriendEntry::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AddressComplex.FriendEntry.key)
  return key_;
}
inline ::std::string* AddressComplex_FriendEntry::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddressComplex_FriendEntry::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AddressComplex.FriendEntry.key)
}

// repeated .AddressComplex.FriendEntry.Education value = 2;
inline int AddressComplex_FriendEntry::value_size() const {
  return value_.size();
}
inline void AddressComplex_FriendEntry::clear_value() {
  value_.Clear();
}
inline const ::AddressComplex_FriendEntry_Education& AddressComplex_FriendEntry::value(int index) const {
  // @@protoc_insertion_point(field_get:AddressComplex.FriendEntry.value)
  return value_.Get(index);
}
inline ::AddressComplex_FriendEntry_Education* AddressComplex_FriendEntry::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:AddressComplex.FriendEntry.value)
  return value_.Mutable(index);
}
inline ::AddressComplex_FriendEntry_Education* AddressComplex_FriendEntry::add_value() {
  // @@protoc_insertion_point(field_add:AddressComplex.FriendEntry.value)
  return value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AddressComplex_FriendEntry_Education >&
AddressComplex_FriendEntry::value() const {
  // @@protoc_insertion_point(field_list:AddressComplex.FriendEntry.value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::AddressComplex_FriendEntry_Education >*
AddressComplex_FriendEntry::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:AddressComplex.FriendEntry.value)
  return &value_;
}

// -------------------------------------------------------------------

// AddressComplex

// required string addr = 1;
inline bool AddressComplex::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddressComplex::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddressComplex::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddressComplex::clear_addr() {
  if (addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_->clear();
  }
  clear_has_addr();
}
inline const ::std::string& AddressComplex::addr() const {
  // @@protoc_insertion_point(field_get:AddressComplex.addr)
  return *addr_;
}
inline void AddressComplex::set_addr(const ::std::string& value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
  // @@protoc_insertion_point(field_set:AddressComplex.addr)
}
inline void AddressComplex::set_addr(const char* value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
  // @@protoc_insertion_point(field_set_char:AddressComplex.addr)
}
inline void AddressComplex::set_addr(const char* value, size_t size) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AddressComplex.addr)
}
inline ::std::string* AddressComplex::mutable_addr() {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AddressComplex.addr)
  return addr_;
}
inline ::std::string* AddressComplex::release_addr() {
  clear_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = addr_;
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddressComplex::set_allocated_addr(::std::string* addr) {
  if (addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addr_;
  }
  if (addr) {
    set_has_addr();
    addr_ = addr;
  } else {
    clear_has_addr();
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AddressComplex.addr)
}

// repeated .AddressComplex.FriendEntry friends = 2;
inline int AddressComplex::friends_size() const {
  return friends_.size();
}
inline void AddressComplex::clear_friends() {
  friends_.Clear();
}
inline const ::AddressComplex_FriendEntry& AddressComplex::friends(int index) const {
  // @@protoc_insertion_point(field_get:AddressComplex.friends)
  return friends_.Get(index);
}
inline ::AddressComplex_FriendEntry* AddressComplex::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:AddressComplex.friends)
  return friends_.Mutable(index);
}
inline ::AddressComplex_FriendEntry* AddressComplex::add_friends() {
  // @@protoc_insertion_point(field_add:AddressComplex.friends)
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AddressComplex_FriendEntry >&
AddressComplex::friends() const {
  // @@protoc_insertion_point(field_list:AddressComplex.friends)
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::AddressComplex_FriendEntry >*
AddressComplex::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:AddressComplex.friends)
  return &friends_;
}

// -------------------------------------------------------------------

// haha

// repeated int32 a = 1;
inline int haha::a_size() const {
  return a_.size();
}
inline void haha::clear_a() {
  a_.Clear();
}
inline ::google::protobuf::int32 haha::a(int index) const {
  // @@protoc_insertion_point(field_get:haha.a)
  return a_.Get(index);
}
inline void haha::set_a(int index, ::google::protobuf::int32 value) {
  a_.Set(index, value);
  // @@protoc_insertion_point(field_set:haha.a)
}
inline void haha::add_a(::google::protobuf::int32 value) {
  a_.Add(value);
  // @@protoc_insertion_point(field_add:haha.a)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
haha::a() const {
  // @@protoc_insertion_point(field_list:haha.a)
  return a_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
haha::mutable_a() {
  // @@protoc_insertion_point(field_mutable_list:haha.a)
  return &a_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_addressbook_5fmap_2eproto__INCLUDED
