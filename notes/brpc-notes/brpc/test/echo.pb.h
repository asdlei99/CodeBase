// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: echo.proto

#ifndef PROTOBUF_echo_2eproto__INCLUDED
#define PROTOBUF_echo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "idl_options.pb.h"
// @@protoc_insertion_point(includes)

namespace test {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_echo_2eproto();
void protobuf_AssignDesc_echo_2eproto();
void protobuf_ShutdownFile_echo_2eproto();

class EchoRequest;
class EchoResponse;
class ComboRequest;
class BytesRequest;
class BytesResponse;
class ComboResponse;
class HttpRequest;
class HttpResponse;
class Message1;
class Message2;

enum State0 {
  STATE0_NUM_0 = 0,
  STATE0_NUM_1 = 1,
  STATE0_NUM_2 = 2
};
bool State0_IsValid(int value);
const State0 State0_MIN = STATE0_NUM_0;
const State0 State0_MAX = STATE0_NUM_2;
const int State0_ARRAYSIZE = State0_MAX + 1;

const ::google::protobuf::EnumDescriptor* State0_descriptor();
inline const ::std::string& State0_Name(State0 value) {
  return ::google::protobuf::internal::NameOfEnum(
    State0_descriptor(), value);
}
inline bool State0_Parse(
    const ::std::string& name, State0* value) {
  return ::google::protobuf::internal::ParseNamedEnum<State0>(
    State0_descriptor(), name, value);
}
enum State1 {
  STATE1_NUM_0 = 0,
  STATE1_NUM_1 = 1
};
bool State1_IsValid(int value);
const State1 State1_MIN = STATE1_NUM_0;
const State1 State1_MAX = STATE1_NUM_1;
const int State1_ARRAYSIZE = State1_MAX + 1;

const ::google::protobuf::EnumDescriptor* State1_descriptor();
inline const ::std::string& State1_Name(State1 value) {
  return ::google::protobuf::internal::NameOfEnum(
    State1_descriptor(), value);
}
inline bool State1_Parse(
    const ::std::string& name, State1* value) {
  return ::google::protobuf::internal::ParseNamedEnum<State1>(
    State1_descriptor(), name, value);
}
// ===================================================================

class EchoRequest : public ::google::protobuf::Message {
 public:
  EchoRequest();
  virtual ~EchoRequest();

  EchoRequest(const EchoRequest& from);

  inline EchoRequest& operator=(const EchoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoRequest& default_instance();

  void Swap(EchoRequest* other);

  // implements Message ----------------------------------------------

  EchoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoRequest& from);
  void MergeFrom(const EchoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional int32 code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional bool close_fd = 3;
  inline bool has_close_fd() const;
  inline void clear_close_fd();
  static const int kCloseFdFieldNumber = 3;
  inline bool close_fd() const;
  inline void set_close_fd(bool value);

  // optional int32 sleep_us = 4;
  inline bool has_sleep_us() const;
  inline void clear_sleep_us();
  static const int kSleepUsFieldNumber = 4;
  inline ::google::protobuf::int32 sleep_us() const;
  inline void set_sleep_us(::google::protobuf::int32 value);

  // optional int32 server_fail = 5;
  inline bool has_server_fail() const;
  inline void clear_server_fail();
  static const int kServerFailFieldNumber = 5;
  inline ::google::protobuf::int32 server_fail() const;
  inline void set_server_fail(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:test.EchoRequest)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_close_fd();
  inline void clear_has_close_fd();
  inline void set_has_sleep_us();
  inline void clear_has_sleep_us();
  inline void set_has_server_fail();
  inline void clear_has_server_fail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  ::google::protobuf::int32 code_;
  bool close_fd_;
  ::google::protobuf::int32 sleep_us_;
  ::google::protobuf::int32 server_fail_;
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static EchoRequest* default_instance_;
};
// -------------------------------------------------------------------

class EchoResponse : public ::google::protobuf::Message {
 public:
  EchoResponse();
  virtual ~EchoResponse();

  EchoResponse(const EchoResponse& from);

  inline EchoResponse& operator=(const EchoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoResponse& default_instance();

  void Swap(EchoResponse* other);

  // implements Message ----------------------------------------------

  EchoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoResponse& from);
  void MergeFrom(const EchoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // repeated int32 code_list = 2;
  inline int code_list_size() const;
  inline void clear_code_list();
  static const int kCodeListFieldNumber = 2;
  inline ::google::protobuf::int32 code_list(int index) const;
  inline void set_code_list(int index, ::google::protobuf::int32 value);
  inline void add_code_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      code_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_code_list();

  // @@protoc_insertion_point(class_scope:test.EchoResponse)
 private:
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > code_list_;
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static EchoResponse* default_instance_;
};
// -------------------------------------------------------------------

class ComboRequest : public ::google::protobuf::Message {
 public:
  ComboRequest();
  virtual ~ComboRequest();

  ComboRequest(const ComboRequest& from);

  inline ComboRequest& operator=(const ComboRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComboRequest& default_instance();

  void Swap(ComboRequest* other);

  // implements Message ----------------------------------------------

  ComboRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComboRequest& from);
  void MergeFrom(const ComboRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .test.EchoRequest requests = 1;
  inline int requests_size() const;
  inline void clear_requests();
  static const int kRequestsFieldNumber = 1;
  inline const ::test::EchoRequest& requests(int index) const;
  inline ::test::EchoRequest* mutable_requests(int index);
  inline ::test::EchoRequest* add_requests();
  inline const ::google::protobuf::RepeatedPtrField< ::test::EchoRequest >&
      requests() const;
  inline ::google::protobuf::RepeatedPtrField< ::test::EchoRequest >*
      mutable_requests();

  // @@protoc_insertion_point(class_scope:test.ComboRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::test::EchoRequest > requests_;
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static ComboRequest* default_instance_;
};
// -------------------------------------------------------------------

class BytesRequest : public ::google::protobuf::Message {
 public:
  BytesRequest();
  virtual ~BytesRequest();

  BytesRequest(const BytesRequest& from);

  inline BytesRequest& operator=(const BytesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BytesRequest& default_instance();

  void Swap(BytesRequest* other);

  // implements Message ----------------------------------------------

  BytesRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BytesRequest& from);
  void MergeFrom(const BytesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes databytes = 1;
  inline bool has_databytes() const;
  inline void clear_databytes();
  static const int kDatabytesFieldNumber = 1;
  inline const ::std::string& databytes() const;
  inline void set_databytes(const ::std::string& value);
  inline void set_databytes(const char* value);
  inline void set_databytes(const void* value, size_t size);
  inline ::std::string* mutable_databytes();
  inline ::std::string* release_databytes();
  inline void set_allocated_databytes(::std::string* databytes);

  // @@protoc_insertion_point(class_scope:test.BytesRequest)
 private:
  inline void set_has_databytes();
  inline void clear_has_databytes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* databytes_;
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static BytesRequest* default_instance_;
};
// -------------------------------------------------------------------

class BytesResponse : public ::google::protobuf::Message {
 public:
  BytesResponse();
  virtual ~BytesResponse();

  BytesResponse(const BytesResponse& from);

  inline BytesResponse& operator=(const BytesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BytesResponse& default_instance();

  void Swap(BytesResponse* other);

  // implements Message ----------------------------------------------

  BytesResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BytesResponse& from);
  void MergeFrom(const BytesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes databytes = 1;
  inline bool has_databytes() const;
  inline void clear_databytes();
  static const int kDatabytesFieldNumber = 1;
  inline const ::std::string& databytes() const;
  inline void set_databytes(const ::std::string& value);
  inline void set_databytes(const char* value);
  inline void set_databytes(const void* value, size_t size);
  inline ::std::string* mutable_databytes();
  inline ::std::string* release_databytes();
  inline void set_allocated_databytes(::std::string* databytes);

  // @@protoc_insertion_point(class_scope:test.BytesResponse)
 private:
  inline void set_has_databytes();
  inline void clear_has_databytes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* databytes_;
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static BytesResponse* default_instance_;
};
// -------------------------------------------------------------------

class ComboResponse : public ::google::protobuf::Message {
 public:
  ComboResponse();
  virtual ~ComboResponse();

  ComboResponse(const ComboResponse& from);

  inline ComboResponse& operator=(const ComboResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComboResponse& default_instance();

  void Swap(ComboResponse* other);

  // implements Message ----------------------------------------------

  ComboResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComboResponse& from);
  void MergeFrom(const ComboResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .test.EchoResponse responses = 1;
  inline int responses_size() const;
  inline void clear_responses();
  static const int kResponsesFieldNumber = 1;
  inline const ::test::EchoResponse& responses(int index) const;
  inline ::test::EchoResponse* mutable_responses(int index);
  inline ::test::EchoResponse* add_responses();
  inline const ::google::protobuf::RepeatedPtrField< ::test::EchoResponse >&
      responses() const;
  inline ::google::protobuf::RepeatedPtrField< ::test::EchoResponse >*
      mutable_responses();

  // @@protoc_insertion_point(class_scope:test.ComboResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::test::EchoResponse > responses_;
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static ComboResponse* default_instance_;
};
// -------------------------------------------------------------------

class HttpRequest : public ::google::protobuf::Message {
 public:
  HttpRequest();
  virtual ~HttpRequest();

  HttpRequest(const HttpRequest& from);

  inline HttpRequest& operator=(const HttpRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpRequest& default_instance();

  void Swap(HttpRequest* other);

  // implements Message ----------------------------------------------

  HttpRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HttpRequest& from);
  void MergeFrom(const HttpRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:test.HttpRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static HttpRequest* default_instance_;
};
// -------------------------------------------------------------------

class HttpResponse : public ::google::protobuf::Message {
 public:
  HttpResponse();
  virtual ~HttpResponse();

  HttpResponse(const HttpResponse& from);

  inline HttpResponse& operator=(const HttpResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpResponse& default_instance();

  void Swap(HttpResponse* other);

  // implements Message ----------------------------------------------

  HttpResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HttpResponse& from);
  void MergeFrom(const HttpResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:test.HttpResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static HttpResponse* default_instance_;
};
// -------------------------------------------------------------------

class Message1 : public ::google::protobuf::Message {
 public:
  Message1();
  virtual ~Message1();

  Message1(const Message1& from);

  inline Message1& operator=(const Message1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message1& default_instance();

  void Swap(Message1* other);

  // implements Message ----------------------------------------------

  Message1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message1& from);
  void MergeFrom(const Message1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .test.State0 stat = 1;
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 1;
  inline ::test::State0 stat() const;
  inline void set_stat(::test::State0 value);

  // @@protoc_insertion_point(class_scope:test.Message1)
 private:
  inline void set_has_stat();
  inline void clear_has_stat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int stat_;
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static Message1* default_instance_;
};
// -------------------------------------------------------------------

class Message2 : public ::google::protobuf::Message {
 public:
  Message2();
  virtual ~Message2();

  Message2(const Message2& from);

  inline Message2& operator=(const Message2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message2& default_instance();

  void Swap(Message2* other);

  // implements Message ----------------------------------------------

  Message2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message2& from);
  void MergeFrom(const Message2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .test.State1 stat = 1;
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 1;
  inline ::test::State1 stat() const;
  inline void set_stat(::test::State1 value);

  // @@protoc_insertion_point(class_scope:test.Message2)
 private:
  inline void set_has_stat();
  inline void clear_has_stat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int stat_;
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static Message2* default_instance_;
};
// ===================================================================

class EchoService_Stub;

class EchoService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline EchoService() {};
 public:
  virtual ~EchoService();

  typedef EchoService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Echo(::google::protobuf::RpcController* controller,
                       const ::test::EchoRequest* request,
                       ::test::EchoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ComboEcho(::google::protobuf::RpcController* controller,
                       const ::test::ComboRequest* request,
                       ::test::ComboResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void BytesEcho1(::google::protobuf::RpcController* controller,
                       const ::test::BytesRequest* request,
                       ::test::BytesResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void BytesEcho2(::google::protobuf::RpcController* controller,
                       const ::test::BytesRequest* request,
                       ::test::BytesResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService);
};

class EchoService_Stub : public EchoService {
 public:
  EchoService_Stub(::google::protobuf::RpcChannel* channel);
  EchoService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~EchoService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements EchoService ------------------------------------------

  void Echo(::google::protobuf::RpcController* controller,
                       const ::test::EchoRequest* request,
                       ::test::EchoResponse* response,
                       ::google::protobuf::Closure* done);
  void ComboEcho(::google::protobuf::RpcController* controller,
                       const ::test::ComboRequest* request,
                       ::test::ComboResponse* response,
                       ::google::protobuf::Closure* done);
  void BytesEcho1(::google::protobuf::RpcController* controller,
                       const ::test::BytesRequest* request,
                       ::test::BytesResponse* response,
                       ::google::protobuf::Closure* done);
  void BytesEcho2(::google::protobuf::RpcController* controller,
                       const ::test::BytesRequest* request,
                       ::test::BytesResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService_Stub);
};


// -------------------------------------------------------------------

class DownloadService_Stub;

class DownloadService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline DownloadService() {};
 public:
  virtual ~DownloadService();

  typedef DownloadService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Download(::google::protobuf::RpcController* controller,
                       const ::test::HttpRequest* request,
                       ::test::HttpResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DownloadFailed(::google::protobuf::RpcController* controller,
                       const ::test::HttpRequest* request,
                       ::test::HttpResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DownloadService);
};

class DownloadService_Stub : public DownloadService {
 public:
  DownloadService_Stub(::google::protobuf::RpcChannel* channel);
  DownloadService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~DownloadService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements DownloadService ------------------------------------------

  void Download(::google::protobuf::RpcController* controller,
                       const ::test::HttpRequest* request,
                       ::test::HttpResponse* response,
                       ::google::protobuf::Closure* done);
  void DownloadFailed(::google::protobuf::RpcController* controller,
                       const ::test::HttpRequest* request,
                       ::test::HttpResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DownloadService_Stub);
};


// -------------------------------------------------------------------

class UserNamingService_Stub;

class UserNamingService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UserNamingService() {};
 public:
  virtual ~UserNamingService();

  typedef UserNamingService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void ListNames(::google::protobuf::RpcController* controller,
                       const ::test::HttpRequest* request,
                       ::test::HttpResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Touch(::google::protobuf::RpcController* controller,
                       const ::test::HttpRequest* request,
                       ::test::HttpResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserNamingService);
};

class UserNamingService_Stub : public UserNamingService {
 public:
  UserNamingService_Stub(::google::protobuf::RpcChannel* channel);
  UserNamingService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~UserNamingService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements UserNamingService ------------------------------------------

  void ListNames(::google::protobuf::RpcController* controller,
                       const ::test::HttpRequest* request,
                       ::test::HttpResponse* response,
                       ::google::protobuf::Closure* done);
  void Touch(::google::protobuf::RpcController* controller,
                       const ::test::HttpRequest* request,
                       ::test::HttpResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserNamingService_Stub);
};


// ===================================================================


// ===================================================================

// EchoRequest

// required string message = 1;
inline bool EchoRequest::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoRequest::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EchoRequest::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EchoRequest::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& EchoRequest::message() const {
  // @@protoc_insertion_point(field_get:test.EchoRequest.message)
  return *message_;
}
inline void EchoRequest::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:test.EchoRequest.message)
}
inline void EchoRequest::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:test.EchoRequest.message)
}
inline void EchoRequest::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.EchoRequest.message)
}
inline ::std::string* EchoRequest::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:test.EchoRequest.message)
  return message_;
}
inline ::std::string* EchoRequest::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EchoRequest::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:test.EchoRequest.message)
}

// optional int32 code = 2;
inline bool EchoRequest::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EchoRequest::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EchoRequest::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EchoRequest::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 EchoRequest::code() const {
  // @@protoc_insertion_point(field_get:test.EchoRequest.code)
  return code_;
}
inline void EchoRequest::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:test.EchoRequest.code)
}

// optional bool close_fd = 3;
inline bool EchoRequest::has_close_fd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EchoRequest::set_has_close_fd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EchoRequest::clear_has_close_fd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EchoRequest::clear_close_fd() {
  close_fd_ = false;
  clear_has_close_fd();
}
inline bool EchoRequest::close_fd() const {
  // @@protoc_insertion_point(field_get:test.EchoRequest.close_fd)
  return close_fd_;
}
inline void EchoRequest::set_close_fd(bool value) {
  set_has_close_fd();
  close_fd_ = value;
  // @@protoc_insertion_point(field_set:test.EchoRequest.close_fd)
}

// optional int32 sleep_us = 4;
inline bool EchoRequest::has_sleep_us() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EchoRequest::set_has_sleep_us() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EchoRequest::clear_has_sleep_us() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EchoRequest::clear_sleep_us() {
  sleep_us_ = 0;
  clear_has_sleep_us();
}
inline ::google::protobuf::int32 EchoRequest::sleep_us() const {
  // @@protoc_insertion_point(field_get:test.EchoRequest.sleep_us)
  return sleep_us_;
}
inline void EchoRequest::set_sleep_us(::google::protobuf::int32 value) {
  set_has_sleep_us();
  sleep_us_ = value;
  // @@protoc_insertion_point(field_set:test.EchoRequest.sleep_us)
}

// optional int32 server_fail = 5;
inline bool EchoRequest::has_server_fail() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EchoRequest::set_has_server_fail() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EchoRequest::clear_has_server_fail() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EchoRequest::clear_server_fail() {
  server_fail_ = 0;
  clear_has_server_fail();
}
inline ::google::protobuf::int32 EchoRequest::server_fail() const {
  // @@protoc_insertion_point(field_get:test.EchoRequest.server_fail)
  return server_fail_;
}
inline void EchoRequest::set_server_fail(::google::protobuf::int32 value) {
  set_has_server_fail();
  server_fail_ = value;
  // @@protoc_insertion_point(field_set:test.EchoRequest.server_fail)
}

// -------------------------------------------------------------------

// EchoResponse

// required string message = 1;
inline bool EchoResponse::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoResponse::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EchoResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EchoResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& EchoResponse::message() const {
  // @@protoc_insertion_point(field_get:test.EchoResponse.message)
  return *message_;
}
inline void EchoResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:test.EchoResponse.message)
}
inline void EchoResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:test.EchoResponse.message)
}
inline void EchoResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.EchoResponse.message)
}
inline ::std::string* EchoResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:test.EchoResponse.message)
  return message_;
}
inline ::std::string* EchoResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EchoResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:test.EchoResponse.message)
}

// repeated int32 code_list = 2;
inline int EchoResponse::code_list_size() const {
  return code_list_.size();
}
inline void EchoResponse::clear_code_list() {
  code_list_.Clear();
}
inline ::google::protobuf::int32 EchoResponse::code_list(int index) const {
  // @@protoc_insertion_point(field_get:test.EchoResponse.code_list)
  return code_list_.Get(index);
}
inline void EchoResponse::set_code_list(int index, ::google::protobuf::int32 value) {
  code_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.EchoResponse.code_list)
}
inline void EchoResponse::add_code_list(::google::protobuf::int32 value) {
  code_list_.Add(value);
  // @@protoc_insertion_point(field_add:test.EchoResponse.code_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EchoResponse::code_list() const {
  // @@protoc_insertion_point(field_list:test.EchoResponse.code_list)
  return code_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EchoResponse::mutable_code_list() {
  // @@protoc_insertion_point(field_mutable_list:test.EchoResponse.code_list)
  return &code_list_;
}

// -------------------------------------------------------------------

// ComboRequest

// repeated .test.EchoRequest requests = 1;
inline int ComboRequest::requests_size() const {
  return requests_.size();
}
inline void ComboRequest::clear_requests() {
  requests_.Clear();
}
inline const ::test::EchoRequest& ComboRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:test.ComboRequest.requests)
  return requests_.Get(index);
}
inline ::test::EchoRequest* ComboRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:test.ComboRequest.requests)
  return requests_.Mutable(index);
}
inline ::test::EchoRequest* ComboRequest::add_requests() {
  // @@protoc_insertion_point(field_add:test.ComboRequest.requests)
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::test::EchoRequest >&
ComboRequest::requests() const {
  // @@protoc_insertion_point(field_list:test.ComboRequest.requests)
  return requests_;
}
inline ::google::protobuf::RepeatedPtrField< ::test::EchoRequest >*
ComboRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:test.ComboRequest.requests)
  return &requests_;
}

// -------------------------------------------------------------------

// BytesRequest

// required bytes databytes = 1;
inline bool BytesRequest::has_databytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BytesRequest::set_has_databytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BytesRequest::clear_has_databytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BytesRequest::clear_databytes() {
  if (databytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    databytes_->clear();
  }
  clear_has_databytes();
}
inline const ::std::string& BytesRequest::databytes() const {
  // @@protoc_insertion_point(field_get:test.BytesRequest.databytes)
  return *databytes_;
}
inline void BytesRequest::set_databytes(const ::std::string& value) {
  set_has_databytes();
  if (databytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    databytes_ = new ::std::string;
  }
  databytes_->assign(value);
  // @@protoc_insertion_point(field_set:test.BytesRequest.databytes)
}
inline void BytesRequest::set_databytes(const char* value) {
  set_has_databytes();
  if (databytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    databytes_ = new ::std::string;
  }
  databytes_->assign(value);
  // @@protoc_insertion_point(field_set_char:test.BytesRequest.databytes)
}
inline void BytesRequest::set_databytes(const void* value, size_t size) {
  set_has_databytes();
  if (databytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    databytes_ = new ::std::string;
  }
  databytes_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.BytesRequest.databytes)
}
inline ::std::string* BytesRequest::mutable_databytes() {
  set_has_databytes();
  if (databytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    databytes_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:test.BytesRequest.databytes)
  return databytes_;
}
inline ::std::string* BytesRequest::release_databytes() {
  clear_has_databytes();
  if (databytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = databytes_;
    databytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BytesRequest::set_allocated_databytes(::std::string* databytes) {
  if (databytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete databytes_;
  }
  if (databytes) {
    set_has_databytes();
    databytes_ = databytes;
  } else {
    clear_has_databytes();
    databytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:test.BytesRequest.databytes)
}

// -------------------------------------------------------------------

// BytesResponse

// required bytes databytes = 1;
inline bool BytesResponse::has_databytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BytesResponse::set_has_databytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BytesResponse::clear_has_databytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BytesResponse::clear_databytes() {
  if (databytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    databytes_->clear();
  }
  clear_has_databytes();
}
inline const ::std::string& BytesResponse::databytes() const {
  // @@protoc_insertion_point(field_get:test.BytesResponse.databytes)
  return *databytes_;
}
inline void BytesResponse::set_databytes(const ::std::string& value) {
  set_has_databytes();
  if (databytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    databytes_ = new ::std::string;
  }
  databytes_->assign(value);
  // @@protoc_insertion_point(field_set:test.BytesResponse.databytes)
}
inline void BytesResponse::set_databytes(const char* value) {
  set_has_databytes();
  if (databytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    databytes_ = new ::std::string;
  }
  databytes_->assign(value);
  // @@protoc_insertion_point(field_set_char:test.BytesResponse.databytes)
}
inline void BytesResponse::set_databytes(const void* value, size_t size) {
  set_has_databytes();
  if (databytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    databytes_ = new ::std::string;
  }
  databytes_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.BytesResponse.databytes)
}
inline ::std::string* BytesResponse::mutable_databytes() {
  set_has_databytes();
  if (databytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    databytes_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:test.BytesResponse.databytes)
  return databytes_;
}
inline ::std::string* BytesResponse::release_databytes() {
  clear_has_databytes();
  if (databytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = databytes_;
    databytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BytesResponse::set_allocated_databytes(::std::string* databytes) {
  if (databytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete databytes_;
  }
  if (databytes) {
    set_has_databytes();
    databytes_ = databytes;
  } else {
    clear_has_databytes();
    databytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:test.BytesResponse.databytes)
}

// -------------------------------------------------------------------

// ComboResponse

// repeated .test.EchoResponse responses = 1;
inline int ComboResponse::responses_size() const {
  return responses_.size();
}
inline void ComboResponse::clear_responses() {
  responses_.Clear();
}
inline const ::test::EchoResponse& ComboResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:test.ComboResponse.responses)
  return responses_.Get(index);
}
inline ::test::EchoResponse* ComboResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:test.ComboResponse.responses)
  return responses_.Mutable(index);
}
inline ::test::EchoResponse* ComboResponse::add_responses() {
  // @@protoc_insertion_point(field_add:test.ComboResponse.responses)
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::test::EchoResponse >&
ComboResponse::responses() const {
  // @@protoc_insertion_point(field_list:test.ComboResponse.responses)
  return responses_;
}
inline ::google::protobuf::RepeatedPtrField< ::test::EchoResponse >*
ComboResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:test.ComboResponse.responses)
  return &responses_;
}

// -------------------------------------------------------------------

// HttpRequest

// -------------------------------------------------------------------

// HttpResponse

// -------------------------------------------------------------------

// Message1

// required .test.State0 stat = 1;
inline bool Message1::has_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message1::set_has_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message1::clear_has_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message1::clear_stat() {
  stat_ = 0;
  clear_has_stat();
}
inline ::test::State0 Message1::stat() const {
  // @@protoc_insertion_point(field_get:test.Message1.stat)
  return static_cast< ::test::State0 >(stat_);
}
inline void Message1::set_stat(::test::State0 value) {
  assert(::test::State0_IsValid(value));
  set_has_stat();
  stat_ = value;
  // @@protoc_insertion_point(field_set:test.Message1.stat)
}

// -------------------------------------------------------------------

// Message2

// required .test.State1 stat = 1;
inline bool Message2::has_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message2::set_has_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message2::clear_has_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message2::clear_stat() {
  stat_ = 0;
  clear_has_stat();
}
inline ::test::State1 Message2::stat() const {
  // @@protoc_insertion_point(field_get:test.Message2.stat)
  return static_cast< ::test::State1 >(stat_);
}
inline void Message2::set_stat(::test::State1 value) {
  assert(::test::State1_IsValid(value));
  set_has_stat();
  stat_ = value;
  // @@protoc_insertion_point(field_set:test.Message2.stat)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::test::State0> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test::State0>() {
  return ::test::State0_descriptor();
}
template <> struct is_proto_enum< ::test::State1> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test::State1>() {
  return ::test::State1_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_echo_2eproto__INCLUDED
