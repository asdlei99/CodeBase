// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gss {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class gss_src_req_t;
class ua_info_t;
class app_info_t;
class us_gss_req_t;
class UserAgent;
class sub_url_t;
class gss_res_t;
class item_t;
class debug_info_t;
class gss_us_res_t;

// ===================================================================

class gss_src_req_t : public ::google::protobuf::Message {
 public:
  gss_src_req_t();
  virtual ~gss_src_req_t();

  gss_src_req_t(const gss_src_req_t& from);

  inline gss_src_req_t& operator=(const gss_src_req_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gss_src_req_t& default_instance();

  void Swap(gss_src_req_t* other);

  // implements Message ----------------------------------------------

  gss_src_req_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gss_src_req_t& from);
  void MergeFrom(const gss_src_req_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string TransQuery = 1;
  inline int transquery_size() const;
  inline void clear_transquery();
  static const int kTransQueryFieldNumber = 1;
  inline const ::std::string& transquery(int index) const;
  inline ::std::string* mutable_transquery(int index);
  inline void set_transquery(int index, const ::std::string& value);
  inline void set_transquery(int index, const char* value);
  inline void set_transquery(int index, const char* value, size_t size);
  inline ::std::string* add_transquery();
  inline void add_transquery(const ::std::string& value);
  inline void add_transquery(const char* value);
  inline void add_transquery(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& transquery() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_transquery();

  // repeated int32 ExtType = 2;
  inline int exttype_size() const;
  inline void clear_exttype();
  static const int kExtTypeFieldNumber = 2;
  inline ::google::protobuf::int32 exttype(int index) const;
  inline void set_exttype(int index, ::google::protobuf::int32 value);
  inline void add_exttype(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      exttype() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_exttype();

  // optional int32 SrcID = 3;
  inline bool has_srcid() const;
  inline void clear_srcid();
  static const int kSrcIDFieldNumber = 3;
  inline ::google::protobuf::int32 srcid() const;
  inline void set_srcid(::google::protobuf::int32 value);

  // optional int32 Pos = 5;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 5;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional int32 Place = 6;
  inline bool has_place() const;
  inline void clear_place();
  static const int kPlaceFieldNumber = 6;
  inline ::google::protobuf::int32 place() const;
  inline void set_place(::google::protobuf::int32 value);

  // optional int32 Degree = 7;
  inline bool has_degree() const;
  inline void clear_degree();
  static const int kDegreeFieldNumber = 7;
  inline ::google::protobuf::int32 degree() const;
  inline void set_degree(::google::protobuf::int32 value);

  // optional string Key = 8;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 8;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string ReqKey = 9;
  inline bool has_reqkey() const;
  inline void clear_reqkey();
  static const int kReqKeyFieldNumber = 9;
  inline const ::std::string& reqkey() const;
  inline void set_reqkey(const ::std::string& value);
  inline void set_reqkey(const char* value);
  inline void set_reqkey(const char* value, size_t size);
  inline ::std::string* mutable_reqkey();
  inline ::std::string* release_reqkey();
  inline void set_allocated_reqkey(::std::string* reqkey);

  // optional int32 QueryType = 10;
  inline bool has_querytype() const;
  inline void clear_querytype();
  static const int kQueryTypeFieldNumber = 10;
  inline ::google::protobuf::int32 querytype() const;
  inline void set_querytype(::google::protobuf::int32 value);

  // optional bytes HighLight = 11;
  inline bool has_highlight() const;
  inline void clear_highlight();
  static const int kHighLightFieldNumber = 11;
  inline const ::std::string& highlight() const;
  inline void set_highlight(const ::std::string& value);
  inline void set_highlight(const char* value);
  inline void set_highlight(const void* value, size_t size);
  inline ::std::string* mutable_highlight();
  inline ::std::string* release_highlight();
  inline void set_allocated_highlight(::std::string* highlight);

  // optional string RetFormat = 12 [default = "html"];
  inline bool has_retformat() const;
  inline void clear_retformat();
  static const int kRetFormatFieldNumber = 12;
  inline const ::std::string& retformat() const;
  inline void set_retformat(const ::std::string& value);
  inline void set_retformat(const char* value);
  inline void set_retformat(const char* value, size_t size);
  inline ::std::string* mutable_retformat();
  inline ::std::string* release_retformat();
  inline void set_allocated_retformat(::std::string* retformat);

  // optional string TagFilter = 13;
  inline bool has_tagfilter() const;
  inline void clear_tagfilter();
  static const int kTagFilterFieldNumber = 13;
  inline const ::std::string& tagfilter() const;
  inline void set_tagfilter(const ::std::string& value);
  inline void set_tagfilter(const char* value);
  inline void set_tagfilter(const char* value, size_t size);
  inline ::std::string* mutable_tagfilter();
  inline ::std::string* release_tagfilter();
  inline void set_allocated_tagfilter(::std::string* tagfilter);

  // optional int32 SpReqType = 14;
  inline bool has_spreqtype() const;
  inline void clear_spreqtype();
  static const int kSpReqTypeFieldNumber = 14;
  inline ::google::protobuf::int32 spreqtype() const;
  inline void set_spreqtype(::google::protobuf::int32 value);

  // optional string UriKey = 15;
  inline bool has_urikey() const;
  inline void clear_urikey();
  static const int kUriKeyFieldNumber = 15;
  inline const ::std::string& urikey() const;
  inline void set_urikey(const ::std::string& value);
  inline void set_urikey(const char* value);
  inline void set_urikey(const char* value, size_t size);
  inline ::std::string* mutable_urikey();
  inline ::std::string* release_urikey();
  inline void set_allocated_urikey(::std::string* urikey);

  // optional string EntityName = 16;
  inline bool has_entityname() const;
  inline void clear_entityname();
  static const int kEntityNameFieldNumber = 16;
  inline const ::std::string& entityname() const;
  inline void set_entityname(const ::std::string& value);
  inline void set_entityname(const char* value);
  inline void set_entityname(const char* value, size_t size);
  inline ::std::string* mutable_entityname();
  inline ::std::string* release_entityname();
  inline void set_allocated_entityname(::std::string* entityname);

  // @@protoc_insertion_point(class_scope:gss.message.gss_src_req_t)
 private:
  inline void set_has_srcid();
  inline void clear_has_srcid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_place();
  inline void clear_has_place();
  inline void set_has_degree();
  inline void clear_has_degree();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_reqkey();
  inline void clear_has_reqkey();
  inline void set_has_querytype();
  inline void clear_has_querytype();
  inline void set_has_highlight();
  inline void clear_has_highlight();
  inline void set_has_retformat();
  inline void clear_has_retformat();
  inline void set_has_tagfilter();
  inline void clear_has_tagfilter();
  inline void set_has_spreqtype();
  inline void clear_has_spreqtype();
  inline void set_has_urikey();
  inline void clear_has_urikey();
  inline void set_has_entityname();
  inline void clear_has_entityname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> transquery_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > exttype_;
  ::google::protobuf::int32 srcid_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 place_;
  ::google::protobuf::int32 degree_;
  ::std::string* key_;
  ::std::string* reqkey_;
  ::std::string* highlight_;
  static ::std::string* _default_retformat_;
  ::std::string* retformat_;
  ::google::protobuf::int32 querytype_;
  ::google::protobuf::int32 spreqtype_;
  ::std::string* tagfilter_;
  ::std::string* urikey_;
  ::std::string* entityname_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static gss_src_req_t* default_instance_;
};
// -------------------------------------------------------------------

class ua_info_t : public ::google::protobuf::Message {
 public:
  ua_info_t();
  virtual ~ua_info_t();

  ua_info_t(const ua_info_t& from);

  inline ua_info_t& operator=(const ua_info_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ua_info_t& default_instance();

  void Swap(ua_info_t* other);

  // implements Message ----------------------------------------------

  ua_info_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ua_info_t& from);
  void MergeFrom(const ua_info_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ua_os = 1;
  inline bool has_ua_os() const;
  inline void clear_ua_os();
  static const int kUaOsFieldNumber = 1;
  inline const ::std::string& ua_os() const;
  inline void set_ua_os(const ::std::string& value);
  inline void set_ua_os(const char* value);
  inline void set_ua_os(const char* value, size_t size);
  inline ::std::string* mutable_ua_os();
  inline ::std::string* release_ua_os();
  inline void set_allocated_ua_os(::std::string* ua_os);

  // optional string ua_browser = 2;
  inline bool has_ua_browser() const;
  inline void clear_ua_browser();
  static const int kUaBrowserFieldNumber = 2;
  inline const ::std::string& ua_browser() const;
  inline void set_ua_browser(const ::std::string& value);
  inline void set_ua_browser(const char* value);
  inline void set_ua_browser(const char* value, size_t size);
  inline ::std::string* mutable_ua_browser();
  inline ::std::string* release_ua_browser();
  inline void set_allocated_ua_browser(::std::string* ua_browser);

  // optional string ua_modal = 3;
  inline bool has_ua_modal() const;
  inline void clear_ua_modal();
  static const int kUaModalFieldNumber = 3;
  inline const ::std::string& ua_modal() const;
  inline void set_ua_modal(const ::std::string& value);
  inline void set_ua_modal(const char* value);
  inline void set_ua_modal(const char* value, size_t size);
  inline ::std::string* mutable_ua_modal();
  inline ::std::string* release_ua_modal();
  inline void set_allocated_ua_modal(::std::string* ua_modal);

  // optional string ua_measure = 4;
  inline bool has_ua_measure() const;
  inline void clear_ua_measure();
  static const int kUaMeasureFieldNumber = 4;
  inline const ::std::string& ua_measure() const;
  inline void set_ua_measure(const ::std::string& value);
  inline void set_ua_measure(const char* value);
  inline void set_ua_measure(const char* value, size_t size);
  inline ::std::string* mutable_ua_measure();
  inline ::std::string* release_ua_measure();
  inline void set_allocated_ua_measure(::std::string* ua_measure);

  // optional int32 ua_res_x = 5;
  inline bool has_ua_res_x() const;
  inline void clear_ua_res_x();
  static const int kUaResXFieldNumber = 5;
  inline ::google::protobuf::int32 ua_res_x() const;
  inline void set_ua_res_x(::google::protobuf::int32 value);

  // optional int32 ua_res_y = 6;
  inline bool has_ua_res_y() const;
  inline void clear_ua_res_y();
  static const int kUaResYFieldNumber = 6;
  inline ::google::protobuf::int32 ua_res_y() const;
  inline void set_ua_res_y(::google::protobuf::int32 value);

  // optional bytes ua_ext = 7;
  inline bool has_ua_ext() const;
  inline void clear_ua_ext();
  static const int kUaExtFieldNumber = 7;
  inline const ::std::string& ua_ext() const;
  inline void set_ua_ext(const ::std::string& value);
  inline void set_ua_ext(const char* value);
  inline void set_ua_ext(const void* value, size_t size);
  inline ::std::string* mutable_ua_ext();
  inline ::std::string* release_ua_ext();
  inline void set_allocated_ua_ext(::std::string* ua_ext);

  // @@protoc_insertion_point(class_scope:gss.message.ua_info_t)
 private:
  inline void set_has_ua_os();
  inline void clear_has_ua_os();
  inline void set_has_ua_browser();
  inline void clear_has_ua_browser();
  inline void set_has_ua_modal();
  inline void clear_has_ua_modal();
  inline void set_has_ua_measure();
  inline void clear_has_ua_measure();
  inline void set_has_ua_res_x();
  inline void clear_has_ua_res_x();
  inline void set_has_ua_res_y();
  inline void clear_has_ua_res_y();
  inline void set_has_ua_ext();
  inline void clear_has_ua_ext();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ua_os_;
  ::std::string* ua_browser_;
  ::std::string* ua_modal_;
  ::std::string* ua_measure_;
  ::google::protobuf::int32 ua_res_x_;
  ::google::protobuf::int32 ua_res_y_;
  ::std::string* ua_ext_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static ua_info_t* default_instance_;
};
// -------------------------------------------------------------------

class app_info_t : public ::google::protobuf::Message {
 public:
  app_info_t();
  virtual ~app_info_t();

  app_info_t(const app_info_t& from);

  inline app_info_t& operator=(const app_info_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const app_info_t& default_instance();

  void Swap(app_info_t* other);

  // implements Message ----------------------------------------------

  app_info_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const app_info_t& from);
  void MergeFrom(const app_info_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string package = 1;
  inline bool has_package() const;
  inline void clear_package();
  static const int kPackageFieldNumber = 1;
  inline const ::std::string& package() const;
  inline void set_package(const ::std::string& value);
  inline void set_package(const char* value);
  inline void set_package(const char* value, size_t size);
  inline ::std::string* mutable_package();
  inline ::std::string* release_package();
  inline void set_allocated_package(::std::string* package);

  // required int32 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // required uint32 signmd5 = 3;
  inline bool has_signmd5() const;
  inline void clear_signmd5();
  static const int kSignmd5FieldNumber = 3;
  inline ::google::protobuf::uint32 signmd5() const;
  inline void set_signmd5(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gss.message.app_info_t)
 private:
  inline void set_has_package();
  inline void clear_has_package();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_signmd5();
  inline void clear_has_signmd5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* package_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::uint32 signmd5_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static app_info_t* default_instance_;
};
// -------------------------------------------------------------------

class us_gss_req_t : public ::google::protobuf::Message {
 public:
  us_gss_req_t();
  virtual ~us_gss_req_t();

  us_gss_req_t(const us_gss_req_t& from);

  inline us_gss_req_t& operator=(const us_gss_req_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const us_gss_req_t& default_instance();

  void Swap(us_gss_req_t* other);

  // implements Message ----------------------------------------------

  us_gss_req_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const us_gss_req_t& from);
  void MergeFrom(const us_gss_req_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string OriginQuery = 1;
  inline bool has_originquery() const;
  inline void clear_originquery();
  static const int kOriginQueryFieldNumber = 1;
  inline const ::std::string& originquery() const;
  inline void set_originquery(const ::std::string& value);
  inline void set_originquery(const char* value);
  inline void set_originquery(const char* value, size_t size);
  inline ::std::string* mutable_originquery();
  inline ::std::string* release_originquery();
  inline void set_allocated_originquery(::std::string* originquery);

  // required int32 UserIP = 2;
  inline bool has_userip() const;
  inline void clear_userip();
  static const int kUserIPFieldNumber = 2;
  inline ::google::protobuf::int32 userip() const;
  inline void set_userip(::google::protobuf::int32 value);

  // required int32 TimingNeed = 3;
  inline bool has_timingneed() const;
  inline void clear_timingneed();
  static const int kTimingNeedFieldNumber = 3;
  inline ::google::protobuf::int32 timingneed() const;
  inline void set_timingneed(::google::protobuf::int32 value);

  // optional uint64 QueryID64 = 4 [default = 0];
  inline bool has_queryid64() const;
  inline void clear_queryid64();
  static const int kQueryID64FieldNumber = 4;
  inline ::google::protobuf::uint64 queryid64() const;
  inline void set_queryid64(::google::protobuf::uint64 value);

  // optional string ClientName = 5 [default = "unknow"];
  inline bool has_clientname() const;
  inline void clear_clientname();
  static const int kClientNameFieldNumber = 5;
  inline const ::std::string& clientname() const;
  inline void set_clientname(const ::std::string& value);
  inline void set_clientname(const char* value);
  inline void set_clientname(const char* value, size_t size);
  inline ::std::string* mutable_clientname();
  inline ::std::string* release_clientname();
  inline void set_allocated_clientname(::std::string* clientname);

  // optional int32 ResNum = 11 [default = 20];
  inline bool has_resnum() const;
  inline void clear_resnum();
  static const int kResNumFieldNumber = 11;
  inline ::google::protobuf::int32 resnum() const;
  inline void set_resnum(::google::protobuf::int32 value);

  // optional int32 PageNum = 12 [default = 0];
  inline bool has_pagenum() const;
  inline void clear_pagenum();
  static const int kPageNumFieldNumber = 12;
  inline ::google::protobuf::int32 pagenum() const;
  inline void set_pagenum(::google::protobuf::int32 value);

  // optional int32 ctpl_or_php = 13 [default = 0];
  inline bool has_ctpl_or_php() const;
  inline void clear_ctpl_or_php();
  static const int kCtplOrPhpFieldNumber = 13;
  inline ::google::protobuf::int32 ctpl_or_php() const;
  inline void set_ctpl_or_php(::google::protobuf::int32 value);

  // optional int32 SeType = 14 [default = 0];
  inline bool has_setype() const;
  inline void clear_setype();
  static const int kSeTypeFieldNumber = 14;
  inline ::google::protobuf::int32 setype() const;
  inline void set_setype(::google::protobuf::int32 value);

  // required string TemplateName = 15;
  inline bool has_templatename() const;
  inline void clear_templatename();
  static const int kTemplateNameFieldNumber = 15;
  inline const ::std::string& templatename() const;
  inline void set_templatename(const ::std::string& value);
  inline void set_templatename(const char* value);
  inline void set_templatename(const char* value, size_t size);
  inline ::std::string* mutable_templatename();
  inline ::std::string* release_templatename();
  inline void set_allocated_templatename(::std::string* templatename);

  // repeated int32 sid = 16;
  inline int sid_size() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 16;
  inline ::google::protobuf::int32 sid(int index) const;
  inline void set_sid(int index, ::google::protobuf::int32 value);
  inline void add_sid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sid();

  // optional bytes UrlParaPack = 17;
  inline bool has_urlparapack() const;
  inline void clear_urlparapack();
  static const int kUrlParaPackFieldNumber = 17;
  inline const ::std::string& urlparapack() const;
  inline void set_urlparapack(const ::std::string& value);
  inline void set_urlparapack(const char* value);
  inline void set_urlparapack(const void* value, size_t size);
  inline ::std::string* mutable_urlparapack();
  inline ::std::string* release_urlparapack();
  inline void set_allocated_urlparapack(::std::string* urlparapack);

  // optional bytes gssqa = 18;
  inline bool has_gssqa() const;
  inline void clear_gssqa();
  static const int kGssqaFieldNumber = 18;
  inline const ::std::string& gssqa() const;
  inline void set_gssqa(const ::std::string& value);
  inline void set_gssqa(const char* value);
  inline void set_gssqa(const void* value, size_t size);
  inline ::std::string* mutable_gssqa();
  inline ::std::string* release_gssqa();
  inline void set_allocated_gssqa(::std::string* gssqa);

  // optional string Cookie = 19;
  inline bool has_cookie() const;
  inline void clear_cookie();
  static const int kCookieFieldNumber = 19;
  inline const ::std::string& cookie() const;
  inline void set_cookie(const ::std::string& value);
  inline void set_cookie(const char* value);
  inline void set_cookie(const char* value, size_t size);
  inline ::std::string* mutable_cookie();
  inline ::std::string* release_cookie();
  inline void set_allocated_cookie(::std::string* cookie);

  // optional string province_name = 31;
  inline bool has_province_name() const;
  inline void clear_province_name();
  static const int kProvinceNameFieldNumber = 31;
  inline const ::std::string& province_name() const;
  inline void set_province_name(const ::std::string& value);
  inline void set_province_name(const char* value);
  inline void set_province_name(const char* value, size_t size);
  inline ::std::string* mutable_province_name();
  inline ::std::string* release_province_name();
  inline void set_allocated_province_name(::std::string* province_name);

  // optional string city_name = 32;
  inline bool has_city_name() const;
  inline void clear_city_name();
  static const int kCityNameFieldNumber = 32;
  inline const ::std::string& city_name() const;
  inline void set_city_name(const ::std::string& value);
  inline void set_city_name(const char* value);
  inline void set_city_name(const char* value, size_t size);
  inline ::std::string* mutable_city_name();
  inline ::std::string* release_city_name();
  inline void set_allocated_city_name(::std::string* city_name);

  // optional string isp_name = 33;
  inline bool has_isp_name() const;
  inline void clear_isp_name();
  static const int kIspNameFieldNumber = 33;
  inline const ::std::string& isp_name() const;
  inline void set_isp_name(const ::std::string& value);
  inline void set_isp_name(const char* value);
  inline void set_isp_name(const char* value, size_t size);
  inline ::std::string* mutable_isp_name();
  inline ::std::string* release_isp_name();
  inline void set_allocated_isp_name(::std::string* isp_name);

  // required uint32 SrcNum = 34;
  inline bool has_srcnum() const;
  inline void clear_srcnum();
  static const int kSrcNumFieldNumber = 34;
  inline ::google::protobuf::uint32 srcnum() const;
  inline void set_srcnum(::google::protobuf::uint32 value);

  // optional string From = 35 [default = "www"];
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 35;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const char* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  inline void set_allocated_from(::std::string* from);

  // optional string Fmt = 36 [default = "html"];
  inline bool has_fmt() const;
  inline void clear_fmt();
  static const int kFmtFieldNumber = 36;
  inline const ::std::string& fmt() const;
  inline void set_fmt(const ::std::string& value);
  inline void set_fmt(const char* value);
  inline void set_fmt(const char* value, size_t size);
  inline ::std::string* mutable_fmt();
  inline ::std::string* release_fmt();
  inline void set_allocated_fmt(::std::string* fmt);

  // optional bytes HighLight = 37;
  inline bool has_highlight() const;
  inline void clear_highlight();
  static const int kHighLightFieldNumber = 37;
  inline const ::std::string& highlight() const;
  inline void set_highlight(const ::std::string& value);
  inline void set_highlight(const char* value);
  inline void set_highlight(const void* value, size_t size);
  inline ::std::string* mutable_highlight();
  inline ::std::string* release_highlight();
  inline void set_allocated_highlight(::std::string* highlight);

  // optional int32 NeedHilightStr = 38 [default = 0];
  inline bool has_needhilightstr() const;
  inline void clear_needhilightstr();
  static const int kNeedHilightStrFieldNumber = 38;
  inline ::google::protobuf::int32 needhilightstr() const;
  inline void set_needhilightstr(::google::protobuf::int32 value);

  // repeated .gss.message.gss_src_req_t SrcArr = 39;
  inline int srcarr_size() const;
  inline void clear_srcarr();
  static const int kSrcArrFieldNumber = 39;
  inline const ::gss::message::gss_src_req_t& srcarr(int index) const;
  inline ::gss::message::gss_src_req_t* mutable_srcarr(int index);
  inline ::gss::message::gss_src_req_t* add_srcarr();
  inline const ::google::protobuf::RepeatedPtrField< ::gss::message::gss_src_req_t >&
      srcarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::gss::message::gss_src_req_t >*
      mutable_srcarr();

  // optional int64 resultLang = 40;
  inline bool has_resultlang() const;
  inline void clear_resultlang();
  static const int kResultLangFieldNumber = 40;
  inline ::google::protobuf::int64 resultlang() const;
  inline void set_resultlang(::google::protobuf::int64 value);

  // optional int64 resultLocale = 41;
  inline bool has_resultlocale() const;
  inline void clear_resultlocale();
  static const int kResultLocaleFieldNumber = 41;
  inline ::google::protobuf::int64 resultlocale() const;
  inline void set_resultlocale(::google::protobuf::int64 value);

  // repeated .gss.message.app_info_t AppInfoArr = 42;
  inline int appinfoarr_size() const;
  inline void clear_appinfoarr();
  static const int kAppInfoArrFieldNumber = 42;
  inline const ::gss::message::app_info_t& appinfoarr(int index) const;
  inline ::gss::message::app_info_t* mutable_appinfoarr(int index);
  inline ::gss::message::app_info_t* add_appinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::gss::message::app_info_t >&
      appinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::gss::message::app_info_t >*
      mutable_appinfoarr();

  // optional .gss.message.ua_info_t uaInfo = 43;
  inline bool has_uainfo() const;
  inline void clear_uainfo();
  static const int kUaInfoFieldNumber = 43;
  inline const ::gss::message::ua_info_t& uainfo() const;
  inline ::gss::message::ua_info_t* mutable_uainfo();
  inline ::gss::message::ua_info_t* release_uainfo();
  inline void set_allocated_uainfo(::gss::message::ua_info_t* uainfo);

  // optional string useragent_full = 44;
  inline bool has_useragent_full() const;
  inline void clear_useragent_full();
  static const int kUseragentFullFieldNumber = 44;
  inline const ::std::string& useragent_full() const;
  inline void set_useragent_full(const ::std::string& value);
  inline void set_useragent_full(const char* value);
  inline void set_useragent_full(const char* value, size_t size);
  inline ::std::string* mutable_useragent_full();
  inline ::std::string* release_useragent_full();
  inline void set_allocated_useragent_full(::std::string* useragent_full);

  // optional int32 uid = 45;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 45;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional string uname = 46;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 46;
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional int32 open_gssda_recall = 47;
  inline bool has_open_gssda_recall() const;
  inline void clear_open_gssda_recall();
  static const int kOpenGssdaRecallFieldNumber = 47;
  inline ::google::protobuf::int32 open_gssda_recall() const;
  inline void set_open_gssda_recall(::google::protobuf::int32 value);

  // optional int32 prefetch_flag = 48;
  inline bool has_prefetch_flag() const;
  inline void clear_prefetch_flag();
  static const int kPrefetchFlagFieldNumber = 48;
  inline ::google::protobuf::int32 prefetch_flag() const;
  inline void set_prefetch_flag(::google::protobuf::int32 value);

  // optional string service_name = 71;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 71;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  inline void set_allocated_service_name(::std::string* service_name);

  // optional string caller = 72;
  inline bool has_caller() const;
  inline void clear_caller();
  static const int kCallerFieldNumber = 72;
  inline const ::std::string& caller() const;
  inline void set_caller(const ::std::string& value);
  inline void set_caller(const char* value);
  inline void set_caller(const char* value, size_t size);
  inline ::std::string* mutable_caller();
  inline ::std::string* release_caller();
  inline void set_allocated_caller(::std::string* caller);

  // optional .gss.message.UserAgent user_agent = 73;
  inline bool has_user_agent() const;
  inline void clear_user_agent();
  static const int kUserAgentFieldNumber = 73;
  inline const ::gss::message::UserAgent& user_agent() const;
  inline ::gss::message::UserAgent* mutable_user_agent();
  inline ::gss::message::UserAgent* release_user_agent();
  inline void set_allocated_user_agent(::gss::message::UserAgent* user_agent);

  // @@protoc_insertion_point(class_scope:gss.message.us_gss_req_t)
 private:
  inline void set_has_originquery();
  inline void clear_has_originquery();
  inline void set_has_userip();
  inline void clear_has_userip();
  inline void set_has_timingneed();
  inline void clear_has_timingneed();
  inline void set_has_queryid64();
  inline void clear_has_queryid64();
  inline void set_has_clientname();
  inline void clear_has_clientname();
  inline void set_has_resnum();
  inline void clear_has_resnum();
  inline void set_has_pagenum();
  inline void clear_has_pagenum();
  inline void set_has_ctpl_or_php();
  inline void clear_has_ctpl_or_php();
  inline void set_has_setype();
  inline void clear_has_setype();
  inline void set_has_templatename();
  inline void clear_has_templatename();
  inline void set_has_urlparapack();
  inline void clear_has_urlparapack();
  inline void set_has_gssqa();
  inline void clear_has_gssqa();
  inline void set_has_cookie();
  inline void clear_has_cookie();
  inline void set_has_province_name();
  inline void clear_has_province_name();
  inline void set_has_city_name();
  inline void clear_has_city_name();
  inline void set_has_isp_name();
  inline void clear_has_isp_name();
  inline void set_has_srcnum();
  inline void clear_has_srcnum();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_fmt();
  inline void clear_has_fmt();
  inline void set_has_highlight();
  inline void clear_has_highlight();
  inline void set_has_needhilightstr();
  inline void clear_has_needhilightstr();
  inline void set_has_resultlang();
  inline void clear_has_resultlang();
  inline void set_has_resultlocale();
  inline void clear_has_resultlocale();
  inline void set_has_uainfo();
  inline void clear_has_uainfo();
  inline void set_has_useragent_full();
  inline void clear_has_useragent_full();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_open_gssda_recall();
  inline void clear_has_open_gssda_recall();
  inline void set_has_prefetch_flag();
  inline void clear_has_prefetch_flag();
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_caller();
  inline void clear_has_caller();
  inline void set_has_user_agent();
  inline void clear_has_user_agent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::std::string* originquery_;
  ::google::protobuf::int32 userip_;
  ::google::protobuf::int32 timingneed_;
  ::google::protobuf::uint64 queryid64_;
  static ::std::string* _default_clientname_;
  ::std::string* clientname_;
  ::google::protobuf::int32 resnum_;
  ::google::protobuf::int32 pagenum_;
  ::google::protobuf::int32 ctpl_or_php_;
  ::google::protobuf::int32 setype_;
  ::std::string* templatename_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sid_;
  ::std::string* urlparapack_;
  ::std::string* gssqa_;
  ::std::string* cookie_;
  ::std::string* province_name_;
  ::std::string* city_name_;
  ::std::string* isp_name_;
  static ::std::string* _default_from_;
  ::std::string* from_;
  static ::std::string* _default_fmt_;
  ::std::string* fmt_;
  ::google::protobuf::uint32 srcnum_;
  ::google::protobuf::int32 needhilightstr_;
  ::std::string* highlight_;
  ::google::protobuf::RepeatedPtrField< ::gss::message::gss_src_req_t > srcarr_;
  ::google::protobuf::int64 resultlang_;
  ::google::protobuf::int64 resultlocale_;
  ::google::protobuf::RepeatedPtrField< ::gss::message::app_info_t > appinfoarr_;
  ::gss::message::ua_info_t* uainfo_;
  ::std::string* useragent_full_;
  ::std::string* uname_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 open_gssda_recall_;
  ::std::string* service_name_;
  ::std::string* caller_;
  ::gss::message::UserAgent* user_agent_;
  ::google::protobuf::int32 prefetch_flag_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static us_gss_req_t* default_instance_;
};
// -------------------------------------------------------------------

class UserAgent : public ::google::protobuf::Message {
 public:
  UserAgent();
  virtual ~UserAgent();

  UserAgent(const UserAgent& from);

  inline UserAgent& operator=(const UserAgent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAgent& default_instance();

  void Swap(UserAgent* other);

  // implements Message ----------------------------------------------

  UserAgent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserAgent& from);
  void MergeFrom(const UserAgent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dsp = 1;
  inline bool has_dsp() const;
  inline void clear_dsp();
  static const int kDspFieldNumber = 1;
  inline const ::std::string& dsp() const;
  inline void set_dsp(const ::std::string& value);
  inline void set_dsp(const char* value);
  inline void set_dsp(const char* value, size_t size);
  inline ::std::string* mutable_dsp();
  inline ::std::string* release_dsp();
  inline void set_allocated_dsp(::std::string* dsp);

  // optional string os = 2;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 2;
  inline const ::std::string& os() const;
  inline void set_os(const ::std::string& value);
  inline void set_os(const char* value);
  inline void set_os(const char* value, size_t size);
  inline ::std::string* mutable_os();
  inline ::std::string* release_os();
  inline void set_allocated_os(::std::string* os);

  // optional string osv = 3;
  inline bool has_osv() const;
  inline void clear_osv();
  static const int kOsvFieldNumber = 3;
  inline const ::std::string& osv() const;
  inline void set_osv(const ::std::string& value);
  inline void set_osv(const char* value);
  inline void set_osv(const char* value, size_t size);
  inline ::std::string* mutable_osv();
  inline ::std::string* release_osv();
  inline void set_allocated_osv(::std::string* osv);

  // optional string mb = 4;
  inline bool has_mb() const;
  inline void clear_mb();
  static const int kMbFieldNumber = 4;
  inline const ::std::string& mb() const;
  inline void set_mb(const ::std::string& value);
  inline void set_mb(const char* value);
  inline void set_mb(const char* value, size_t size);
  inline ::std::string* mutable_mb();
  inline ::std::string* release_mb();
  inline void set_allocated_mb(::std::string* mb);

  // optional string mbv = 5;
  inline bool has_mbv() const;
  inline void clear_mbv();
  static const int kMbvFieldNumber = 5;
  inline const ::std::string& mbv() const;
  inline void set_mbv(const ::std::string& value);
  inline void set_mbv(const char* value);
  inline void set_mbv(const char* value, size_t size);
  inline ::std::string* mutable_mbv();
  inline ::std::string* release_mbv();
  inline void set_allocated_mbv(::std::string* mbv);

  // optional int32 apn = 6;
  inline bool has_apn() const;
  inline void clear_apn();
  static const int kApnFieldNumber = 6;
  inline ::google::protobuf::int32 apn() const;
  inline void set_apn(::google::protobuf::int32 value);

  // optional int32 arn = 7;
  inline bool has_arn() const;
  inline void clear_arn();
  static const int kArnFieldNumber = 7;
  inline ::google::protobuf::int32 arn() const;
  inline void set_arn(::google::protobuf::int32 value);

  // optional string cuid = 8;
  inline bool has_cuid() const;
  inline void clear_cuid();
  static const int kCuidFieldNumber = 8;
  inline const ::std::string& cuid() const;
  inline void set_cuid(const ::std::string& value);
  inline void set_cuid(const char* value);
  inline void set_cuid(const char* value, size_t size);
  inline ::std::string* mutable_cuid();
  inline ::std::string* release_cuid();
  inline void set_allocated_cuid(::std::string* cuid);

  // optional string net_type = 9;
  inline bool has_net_type() const;
  inline void clear_net_type();
  static const int kNetTypeFieldNumber = 9;
  inline const ::std::string& net_type() const;
  inline void set_net_type(const ::std::string& value);
  inline void set_net_type(const char* value);
  inline void set_net_type(const char* value, size_t size);
  inline ::std::string* mutable_net_type();
  inline ::std::string* release_net_type();
  inline void set_allocated_net_type(::std::string* net_type);

  // @@protoc_insertion_point(class_scope:gss.message.UserAgent)
 private:
  inline void set_has_dsp();
  inline void clear_has_dsp();
  inline void set_has_os();
  inline void clear_has_os();
  inline void set_has_osv();
  inline void clear_has_osv();
  inline void set_has_mb();
  inline void clear_has_mb();
  inline void set_has_mbv();
  inline void clear_has_mbv();
  inline void set_has_apn();
  inline void clear_has_apn();
  inline void set_has_arn();
  inline void clear_has_arn();
  inline void set_has_cuid();
  inline void clear_has_cuid();
  inline void set_has_net_type();
  inline void clear_has_net_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dsp_;
  ::std::string* os_;
  ::std::string* osv_;
  ::std::string* mb_;
  ::std::string* mbv_;
  ::google::protobuf::int32 apn_;
  ::google::protobuf::int32 arn_;
  ::std::string* cuid_;
  ::std::string* net_type_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static UserAgent* default_instance_;
};
// -------------------------------------------------------------------

class sub_url_t : public ::google::protobuf::Message {
 public:
  sub_url_t();
  virtual ~sub_url_t();

  sub_url_t(const sub_url_t& from);

  inline sub_url_t& operator=(const sub_url_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sub_url_t& default_instance();

  void Swap(sub_url_t* other);

  // implements Message ----------------------------------------------

  sub_url_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sub_url_t& from);
  void MergeFrom(const sub_url_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string SubURL = 1;
  inline bool has_suburl() const;
  inline void clear_suburl();
  static const int kSubURLFieldNumber = 1;
  inline const ::std::string& suburl() const;
  inline void set_suburl(const ::std::string& value);
  inline void set_suburl(const char* value);
  inline void set_suburl(const char* value, size_t size);
  inline ::std::string* mutable_suburl();
  inline ::std::string* release_suburl();
  inline void set_allocated_suburl(::std::string* suburl);

  // optional string SubURI = 2;
  inline bool has_suburi() const;
  inline void clear_suburi();
  static const int kSubURIFieldNumber = 2;
  inline const ::std::string& suburi() const;
  inline void set_suburi(const ::std::string& value);
  inline void set_suburi(const char* value);
  inline void set_suburi(const char* value, size_t size);
  inline ::std::string* mutable_suburi();
  inline ::std::string* release_suburi();
  inline void set_allocated_suburi(::std::string* suburi);

  // optional string SubName = 3;
  inline bool has_subname() const;
  inline void clear_subname();
  static const int kSubNameFieldNumber = 3;
  inline const ::std::string& subname() const;
  inline void set_subname(const ::std::string& value);
  inline void set_subname(const char* value);
  inline void set_subname(const char* value, size_t size);
  inline ::std::string* mutable_subname();
  inline ::std::string* release_subname();
  inline void set_allocated_subname(::std::string* subname);

  // optional string SubPath = 4;
  inline bool has_subpath() const;
  inline void clear_subpath();
  static const int kSubPathFieldNumber = 4;
  inline const ::std::string& subpath() const;
  inline void set_subpath(const ::std::string& value);
  inline void set_subpath(const char* value);
  inline void set_subpath(const char* value, size_t size);
  inline ::std::string* mutable_subpath();
  inline ::std::string* release_subpath();
  inline void set_allocated_subpath(::std::string* subpath);

  // optional int32 SiteId = 5;
  inline bool has_siteid() const;
  inline void clear_siteid();
  static const int kSiteIdFieldNumber = 5;
  inline ::google::protobuf::int32 siteid() const;
  inline void set_siteid(::google::protobuf::int32 value);

  // optional string SubEx = 6;
  inline bool has_subex() const;
  inline void clear_subex();
  static const int kSubExFieldNumber = 6;
  inline const ::std::string& subex() const;
  inline void set_subex(const ::std::string& value);
  inline void set_subex(const char* value);
  inline void set_subex(const char* value, size_t size);
  inline ::std::string* mutable_subex();
  inline ::std::string* release_subex();
  inline void set_allocated_subex(::std::string* subex);

  // @@protoc_insertion_point(class_scope:gss.message.sub_url_t)
 private:
  inline void set_has_suburl();
  inline void clear_has_suburl();
  inline void set_has_suburi();
  inline void clear_has_suburi();
  inline void set_has_subname();
  inline void clear_has_subname();
  inline void set_has_subpath();
  inline void clear_has_subpath();
  inline void set_has_siteid();
  inline void clear_has_siteid();
  inline void set_has_subex();
  inline void clear_has_subex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* suburl_;
  ::std::string* suburi_;
  ::std::string* subname_;
  ::std::string* subpath_;
  ::std::string* subex_;
  ::google::protobuf::int32 siteid_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static sub_url_t* default_instance_;
};
// -------------------------------------------------------------------

class gss_res_t : public ::google::protobuf::Message {
 public:
  gss_res_t();
  virtual ~gss_res_t();

  gss_res_t(const gss_res_t& from);

  inline gss_res_t& operator=(const gss_res_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gss_res_t& default_instance();

  void Swap(gss_res_t* other);

  // implements Message ----------------------------------------------

  gss_res_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gss_res_t& from);
  void MergeFrom(const gss_res_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ResultURL = 2;
  inline bool has_resulturl() const;
  inline void clear_resulturl();
  static const int kResultURLFieldNumber = 2;
  inline const ::std::string& resulturl() const;
  inline void set_resulturl(const ::std::string& value);
  inline void set_resulturl(const char* value);
  inline void set_resulturl(const char* value, size_t size);
  inline ::std::string* mutable_resulturl();
  inline ::std::string* release_resulturl();
  inline void set_allocated_resulturl(::std::string* resulturl);

  // optional string Display = 3;
  inline bool has_display() const;
  inline void clear_display();
  static const int kDisplayFieldNumber = 3;
  inline const ::std::string& display() const;
  inline void set_display(const ::std::string& value);
  inline void set_display(const char* value);
  inline void set_display(const char* value, size_t size);
  inline ::std::string* mutable_display();
  inline ::std::string* release_display();
  inline void set_allocated_display(::std::string* display);

  // required int32 Weight = 4;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 4;
  inline ::google::protobuf::int32 weight() const;
  inline void set_weight(::google::protobuf::int32 value);

  // optional int32 Sort = 5;
  inline bool has_sort() const;
  inline void clear_sort();
  static const int kSortFieldNumber = 5;
  inline ::google::protobuf::int32 sort() const;
  inline void set_sort(::google::protobuf::int32 value);

  // optional int32 SrcID = 6;
  inline bool has_srcid() const;
  inline void clear_srcid();
  static const int kSrcIDFieldNumber = 6;
  inline ::google::protobuf::int32 srcid() const;
  inline void set_srcid(::google::protobuf::int32 value);

  // required int32 TimingNeed = 7;
  inline bool has_timingneed() const;
  inline void clear_timingneed();
  static const int kTimingNeedFieldNumber = 7;
  inline ::google::protobuf::int32 timingneed() const;
  inline void set_timingneed(::google::protobuf::int32 value);

  // optional uint32 WiseStrategyFlag = 8;
  inline bool has_wisestrategyflag() const;
  inline void clear_wisestrategyflag();
  static const int kWiseStrategyFlagFieldNumber = 8;
  inline ::google::protobuf::uint32 wisestrategyflag() const;
  inline void set_wisestrategyflag(::google::protobuf::uint32 value);

  // optional int32 Degree = 9;
  inline bool has_degree() const;
  inline void clear_degree();
  static const int kDegreeFieldNumber = 9;
  inline ::google::protobuf::int32 degree() const;
  inline void set_degree(::google::protobuf::int32 value);

  // optional int32 ClickNeed = 10;
  inline bool has_clickneed() const;
  inline void clear_clickneed();
  static const int kClickNeedFieldNumber = 10;
  inline ::google::protobuf::int32 clickneed() const;
  inline void set_clickneed(::google::protobuf::int32 value);

  // optional int32 StrategyInfo = 11;
  inline bool has_strategyinfo() const;
  inline void clear_strategyinfo();
  static const int kStrategyInfoFieldNumber = 11;
  inline ::google::protobuf::int32 strategyinfo() const;
  inline void set_strategyinfo(::google::protobuf::int32 value);

  // optional int32 SpReqType = 12;
  inline bool has_spreqtype() const;
  inline void clear_spreqtype();
  static const int kSpReqTypeFieldNumber = 12;
  inline ::google::protobuf::int32 spreqtype() const;
  inline void set_spreqtype(::google::protobuf::int32 value);

  // optional string UriKey = 13;
  inline bool has_urikey() const;
  inline void clear_urikey();
  static const int kUriKeyFieldNumber = 13;
  inline const ::std::string& urikey() const;
  inline void set_urikey(const ::std::string& value);
  inline void set_urikey(const char* value);
  inline void set_urikey(const char* value, size_t size);
  inline ::std::string* mutable_urikey();
  inline ::std::string* release_urikey();
  inline void set_allocated_urikey(::std::string* urikey);

  // optional string EntityName = 14;
  inline bool has_entityname() const;
  inline void clear_entityname();
  static const int kEntityNameFieldNumber = 14;
  inline const ::std::string& entityname() const;
  inline void set_entityname(const ::std::string& value);
  inline void set_entityname(const char* value);
  inline void set_entityname(const char* value, size_t size);
  inline ::std::string* mutable_entityname();
  inline ::std::string* release_entityname();
  inline void set_allocated_entityname(::std::string* entityname);

  // repeated .gss.message.sub_url_t SubResult = 15;
  inline int subresult_size() const;
  inline void clear_subresult();
  static const int kSubResultFieldNumber = 15;
  inline const ::gss::message::sub_url_t& subresult(int index) const;
  inline ::gss::message::sub_url_t* mutable_subresult(int index);
  inline ::gss::message::sub_url_t* add_subresult();
  inline const ::google::protobuf::RepeatedPtrField< ::gss::message::sub_url_t >&
      subresult() const;
  inline ::google::protobuf::RepeatedPtrField< ::gss::message::sub_url_t >*
      mutable_subresult();

  // optional int32 SubResNum = 16;
  inline bool has_subresnum() const;
  inline void clear_subresnum();
  static const int kSubResNumFieldNumber = 16;
  inline ::google::protobuf::int32 subresnum() const;
  inline void set_subresnum(::google::protobuf::int32 value);

  // optional string DisplayLog = 17;
  inline bool has_displaylog() const;
  inline void clear_displaylog();
  static const int kDisplayLogFieldNumber = 17;
  inline const ::std::string& displaylog() const;
  inline void set_displaylog(const ::std::string& value);
  inline void set_displaylog(const char* value);
  inline void set_displaylog(const char* value, size_t size);
  inline ::std::string* mutable_displaylog();
  inline ::std::string* release_displaylog();
  inline void set_allocated_displaylog(::std::string* displaylog);

  // optional bytes DisplayData = 18;
  inline bool has_displaydata() const;
  inline void clear_displaydata();
  static const int kDisplayDataFieldNumber = 18;
  inline const ::std::string& displaydata() const;
  inline void set_displaydata(const ::std::string& value);
  inline void set_displaydata(const char* value);
  inline void set_displaydata(const void* value, size_t size);
  inline ::std::string* mutable_displaydata();
  inline ::std::string* release_displaydata();
  inline void set_allocated_displaydata(::std::string* displaydata);

  // optional uint32 ResType = 19;
  inline bool has_restype() const;
  inline void clear_restype();
  static const int kResTypeFieldNumber = 19;
  inline ::google::protobuf::uint32 restype() const;
  inline void set_restype(::google::protobuf::uint32 value);

  // optional string Title = 20;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 20;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional int32 RecoverCacheTime = 21;
  inline bool has_recovercachetime() const;
  inline void clear_recovercachetime();
  static const int kRecoverCacheTimeFieldNumber = 21;
  inline ::google::protobuf::int32 recovercachetime() const;
  inline void set_recovercachetime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gss.message.gss_res_t)
 private:
  inline void set_has_resulturl();
  inline void clear_has_resulturl();
  inline void set_has_display();
  inline void clear_has_display();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_sort();
  inline void clear_has_sort();
  inline void set_has_srcid();
  inline void clear_has_srcid();
  inline void set_has_timingneed();
  inline void clear_has_timingneed();
  inline void set_has_wisestrategyflag();
  inline void clear_has_wisestrategyflag();
  inline void set_has_degree();
  inline void clear_has_degree();
  inline void set_has_clickneed();
  inline void clear_has_clickneed();
  inline void set_has_strategyinfo();
  inline void clear_has_strategyinfo();
  inline void set_has_spreqtype();
  inline void clear_has_spreqtype();
  inline void set_has_urikey();
  inline void clear_has_urikey();
  inline void set_has_entityname();
  inline void clear_has_entityname();
  inline void set_has_subresnum();
  inline void clear_has_subresnum();
  inline void set_has_displaylog();
  inline void clear_has_displaylog();
  inline void set_has_displaydata();
  inline void clear_has_displaydata();
  inline void set_has_restype();
  inline void clear_has_restype();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_recovercachetime();
  inline void clear_has_recovercachetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* resulturl_;
  ::std::string* display_;
  ::google::protobuf::int32 weight_;
  ::google::protobuf::int32 sort_;
  ::google::protobuf::int32 srcid_;
  ::google::protobuf::int32 timingneed_;
  ::google::protobuf::uint32 wisestrategyflag_;
  ::google::protobuf::int32 degree_;
  ::google::protobuf::int32 clickneed_;
  ::google::protobuf::int32 strategyinfo_;
  ::std::string* urikey_;
  ::std::string* entityname_;
  ::google::protobuf::int32 spreqtype_;
  ::google::protobuf::int32 subresnum_;
  ::google::protobuf::RepeatedPtrField< ::gss::message::sub_url_t > subresult_;
  ::std::string* displaylog_;
  ::std::string* displaydata_;
  ::std::string* title_;
  ::google::protobuf::uint32 restype_;
  ::google::protobuf::int32 recovercachetime_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static gss_res_t* default_instance_;
};
// -------------------------------------------------------------------

class item_t : public ::google::protobuf::Message {
 public:
  item_t();
  virtual ~item_t();

  item_t(const item_t& from);

  inline item_t& operator=(const item_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const item_t& default_instance();

  void Swap(item_t* other);

  // implements Message ----------------------------------------------

  item_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const item_t& from);
  void MergeFrom(const item_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // required int32 parent = 3;
  inline bool has_parent() const;
  inline void clear_parent();
  static const int kParentFieldNumber = 3;
  inline ::google::protobuf::int32 parent() const;
  inline void set_parent(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gss.message.item_t)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_parent();
  inline void clear_has_parent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* title_;
  ::std::string* content_;
  ::google::protobuf::int32 parent_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static item_t* default_instance_;
};
// -------------------------------------------------------------------

class debug_info_t : public ::google::protobuf::Message {
 public:
  debug_info_t();
  virtual ~debug_info_t();

  debug_info_t(const debug_info_t& from);

  inline debug_info_t& operator=(const debug_info_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const debug_info_t& default_instance();

  void Swap(debug_info_t* other);

  // implements Message ----------------------------------------------

  debug_info_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const debug_info_t& from);
  void MergeFrom(const debug_info_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes idebug = 1;
  inline bool has_idebug() const;
  inline void clear_idebug();
  static const int kIdebugFieldNumber = 1;
  inline const ::std::string& idebug() const;
  inline void set_idebug(const ::std::string& value);
  inline void set_idebug(const char* value);
  inline void set_idebug(const void* value, size_t size);
  inline ::std::string* mutable_idebug();
  inline ::std::string* release_idebug();
  inline void set_allocated_idebug(::std::string* idebug);

  // repeated string item_info = 2;
  inline int item_info_size() const;
  inline void clear_item_info();
  static const int kItemInfoFieldNumber = 2;
  inline const ::std::string& item_info(int index) const;
  inline ::std::string* mutable_item_info(int index);
  inline void set_item_info(int index, const ::std::string& value);
  inline void set_item_info(int index, const char* value);
  inline void set_item_info(int index, const char* value, size_t size);
  inline ::std::string* add_item_info();
  inline void add_item_info(const ::std::string& value);
  inline void add_item_info(const char* value);
  inline void add_item_info(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& item_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_item_info();

  // repeated string anchor_info = 3;
  inline int anchor_info_size() const;
  inline void clear_anchor_info();
  static const int kAnchorInfoFieldNumber = 3;
  inline const ::std::string& anchor_info(int index) const;
  inline ::std::string* mutable_anchor_info(int index);
  inline void set_anchor_info(int index, const ::std::string& value);
  inline void set_anchor_info(int index, const char* value);
  inline void set_anchor_info(int index, const char* value, size_t size);
  inline ::std::string* add_anchor_info();
  inline void add_anchor_info(const ::std::string& value);
  inline void add_anchor_info(const char* value);
  inline void add_anchor_info(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& anchor_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_anchor_info();

  // repeated .gss.message.item_t debug_info = 4 [deprecated = true];
  inline int debug_info_size() const PROTOBUF_DEPRECATED;
  inline void clear_debug_info() PROTOBUF_DEPRECATED;
  static const int kDebugInfoFieldNumber = 4;
  inline const ::gss::message::item_t& debug_info(int index) const PROTOBUF_DEPRECATED;
  inline ::gss::message::item_t* mutable_debug_info(int index) PROTOBUF_DEPRECATED;
  inline ::gss::message::item_t* add_debug_info() PROTOBUF_DEPRECATED;
  inline const ::google::protobuf::RepeatedPtrField< ::gss::message::item_t >&
      debug_info() const PROTOBUF_DEPRECATED;
  inline ::google::protobuf::RepeatedPtrField< ::gss::message::item_t >*
      mutable_debug_info() PROTOBUF_DEPRECATED;

  // @@protoc_insertion_point(class_scope:gss.message.debug_info_t)
 private:
  inline void set_has_idebug();
  inline void clear_has_idebug();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* idebug_;
  ::google::protobuf::RepeatedPtrField< ::std::string> item_info_;
  ::google::protobuf::RepeatedPtrField< ::std::string> anchor_info_;
  ::google::protobuf::RepeatedPtrField< ::gss::message::item_t > debug_info_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static debug_info_t* default_instance_;
};
// -------------------------------------------------------------------

class gss_us_res_t : public ::google::protobuf::Message {
 public:
  gss_us_res_t();
  virtual ~gss_us_res_t();

  gss_us_res_t(const gss_us_res_t& from);

  inline gss_us_res_t& operator=(const gss_us_res_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gss_us_res_t& default_instance();

  void Swap(gss_us_res_t* other);

  // implements Message ----------------------------------------------

  gss_us_res_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gss_us_res_t& from);
  void MergeFrom(const gss_us_res_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ResultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 resultcode() const;
  inline void set_resultcode(::google::protobuf::int32 value);

  // required uint64 QueryID = 2;
  inline bool has_queryid() const;
  inline void clear_queryid();
  static const int kQueryIDFieldNumber = 2;
  inline ::google::protobuf::uint64 queryid() const;
  inline void set_queryid(::google::protobuf::uint64 value);

  // repeated .gss.message.gss_res_t Result = 3;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline const ::gss::message::gss_res_t& result(int index) const;
  inline ::gss::message::gss_res_t* mutable_result(int index);
  inline ::gss::message::gss_res_t* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::gss::message::gss_res_t >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::gss::message::gss_res_t >*
      mutable_result();

  // required uint32 ResultNum = 4;
  inline bool has_resultnum() const;
  inline void clear_resultnum();
  static const int kResultNumFieldNumber = 4;
  inline ::google::protobuf::uint32 resultnum() const;
  inline void set_resultnum(::google::protobuf::uint32 value);

  // optional .gss.message.debug_info_t info = 5;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 5;
  inline const ::gss::message::debug_info_t& info() const;
  inline ::gss::message::debug_info_t* mutable_info();
  inline ::gss::message::debug_info_t* release_info();
  inline void set_allocated_info(::gss::message::debug_info_t* info);

  // optional int32 bfe_cached_time = 6;
  inline bool has_bfe_cached_time() const;
  inline void clear_bfe_cached_time();
  static const int kBfeCachedTimeFieldNumber = 6;
  inline ::google::protobuf::int32 bfe_cached_time() const;
  inline void set_bfe_cached_time(::google::protobuf::int32 value);

  // optional int32 bfe_cached_islocate = 7;
  inline bool has_bfe_cached_islocate() const;
  inline void clear_bfe_cached_islocate();
  static const int kBfeCachedIslocateFieldNumber = 7;
  inline ::google::protobuf::int32 bfe_cached_islocate() const;
  inline void set_bfe_cached_islocate(::google::protobuf::int32 value);

  // optional bytes disp_data_url_ex = 8;
  inline bool has_disp_data_url_ex() const;
  inline void clear_disp_data_url_ex();
  static const int kDispDataUrlExFieldNumber = 8;
  inline const ::std::string& disp_data_url_ex() const;
  inline void set_disp_data_url_ex(const ::std::string& value);
  inline void set_disp_data_url_ex(const char* value);
  inline void set_disp_data_url_ex(const void* value, size_t size);
  inline ::std::string* mutable_disp_data_url_ex();
  inline ::std::string* release_disp_data_url_ex();
  inline void set_allocated_disp_data_url_ex(::std::string* disp_data_url_ex);

  // optional bytes disp_data_query_ex = 9;
  inline bool has_disp_data_query_ex() const;
  inline void clear_disp_data_query_ex();
  static const int kDispDataQueryExFieldNumber = 9;
  inline const ::std::string& disp_data_query_ex() const;
  inline void set_disp_data_query_ex(const ::std::string& value);
  inline void set_disp_data_query_ex(const char* value);
  inline void set_disp_data_query_ex(const void* value, size_t size);
  inline ::std::string* mutable_disp_data_query_ex();
  inline ::std::string* release_disp_data_query_ex();
  inline void set_allocated_disp_data_query_ex(::std::string* disp_data_query_ex);

  // optional string name = 20;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 20;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:gss.message.gss_us_res_t)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();
  inline void set_has_queryid();
  inline void clear_has_queryid();
  inline void set_has_resultnum();
  inline void clear_has_resultnum();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_bfe_cached_time();
  inline void clear_has_bfe_cached_time();
  inline void set_has_bfe_cached_islocate();
  inline void clear_has_bfe_cached_islocate();
  inline void set_has_disp_data_url_ex();
  inline void clear_has_disp_data_url_ex();
  inline void set_has_disp_data_query_ex();
  inline void clear_has_disp_data_query_ex();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 queryid_;
  ::google::protobuf::int32 resultcode_;
  ::google::protobuf::uint32 resultnum_;
  ::google::protobuf::RepeatedPtrField< ::gss::message::gss_res_t > result_;
  ::gss::message::debug_info_t* info_;
  ::google::protobuf::int32 bfe_cached_time_;
  ::google::protobuf::int32 bfe_cached_islocate_;
  ::std::string* disp_data_url_ex_;
  ::std::string* disp_data_query_ex_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static gss_us_res_t* default_instance_;
};
// ===================================================================


// ===================================================================

// gss_src_req_t

// repeated string TransQuery = 1;
inline int gss_src_req_t::transquery_size() const {
  return transquery_.size();
}
inline void gss_src_req_t::clear_transquery() {
  transquery_.Clear();
}
inline const ::std::string& gss_src_req_t::transquery(int index) const {
  // @@protoc_insertion_point(field_get:gss.message.gss_src_req_t.TransQuery)
  return transquery_.Get(index);
}
inline ::std::string* gss_src_req_t::mutable_transquery(int index) {
  // @@protoc_insertion_point(field_mutable:gss.message.gss_src_req_t.TransQuery)
  return transquery_.Mutable(index);
}
inline void gss_src_req_t::set_transquery(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gss.message.gss_src_req_t.TransQuery)
  transquery_.Mutable(index)->assign(value);
}
inline void gss_src_req_t::set_transquery(int index, const char* value) {
  transquery_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.gss_src_req_t.TransQuery)
}
inline void gss_src_req_t::set_transquery(int index, const char* value, size_t size) {
  transquery_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.gss_src_req_t.TransQuery)
}
inline ::std::string* gss_src_req_t::add_transquery() {
  return transquery_.Add();
}
inline void gss_src_req_t::add_transquery(const ::std::string& value) {
  transquery_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gss.message.gss_src_req_t.TransQuery)
}
inline void gss_src_req_t::add_transquery(const char* value) {
  transquery_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gss.message.gss_src_req_t.TransQuery)
}
inline void gss_src_req_t::add_transquery(const char* value, size_t size) {
  transquery_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gss.message.gss_src_req_t.TransQuery)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
gss_src_req_t::transquery() const {
  // @@protoc_insertion_point(field_list:gss.message.gss_src_req_t.TransQuery)
  return transquery_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
gss_src_req_t::mutable_transquery() {
  // @@protoc_insertion_point(field_mutable_list:gss.message.gss_src_req_t.TransQuery)
  return &transquery_;
}

// repeated int32 ExtType = 2;
inline int gss_src_req_t::exttype_size() const {
  return exttype_.size();
}
inline void gss_src_req_t::clear_exttype() {
  exttype_.Clear();
}
inline ::google::protobuf::int32 gss_src_req_t::exttype(int index) const {
  // @@protoc_insertion_point(field_get:gss.message.gss_src_req_t.ExtType)
  return exttype_.Get(index);
}
inline void gss_src_req_t::set_exttype(int index, ::google::protobuf::int32 value) {
  exttype_.Set(index, value);
  // @@protoc_insertion_point(field_set:gss.message.gss_src_req_t.ExtType)
}
inline void gss_src_req_t::add_exttype(::google::protobuf::int32 value) {
  exttype_.Add(value);
  // @@protoc_insertion_point(field_add:gss.message.gss_src_req_t.ExtType)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gss_src_req_t::exttype() const {
  // @@protoc_insertion_point(field_list:gss.message.gss_src_req_t.ExtType)
  return exttype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gss_src_req_t::mutable_exttype() {
  // @@protoc_insertion_point(field_mutable_list:gss.message.gss_src_req_t.ExtType)
  return &exttype_;
}

// optional int32 SrcID = 3;
inline bool gss_src_req_t::has_srcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gss_src_req_t::set_has_srcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gss_src_req_t::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gss_src_req_t::clear_srcid() {
  srcid_ = 0;
  clear_has_srcid();
}
inline ::google::protobuf::int32 gss_src_req_t::srcid() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_src_req_t.SrcID)
  return srcid_;
}
inline void gss_src_req_t::set_srcid(::google::protobuf::int32 value) {
  set_has_srcid();
  srcid_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_src_req_t.SrcID)
}

// optional int32 Pos = 5;
inline bool gss_src_req_t::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gss_src_req_t::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gss_src_req_t::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gss_src_req_t::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 gss_src_req_t::pos() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_src_req_t.Pos)
  return pos_;
}
inline void gss_src_req_t::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_src_req_t.Pos)
}

// optional int32 Place = 6;
inline bool gss_src_req_t::has_place() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gss_src_req_t::set_has_place() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gss_src_req_t::clear_has_place() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gss_src_req_t::clear_place() {
  place_ = 0;
  clear_has_place();
}
inline ::google::protobuf::int32 gss_src_req_t::place() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_src_req_t.Place)
  return place_;
}
inline void gss_src_req_t::set_place(::google::protobuf::int32 value) {
  set_has_place();
  place_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_src_req_t.Place)
}

// optional int32 Degree = 7;
inline bool gss_src_req_t::has_degree() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gss_src_req_t::set_has_degree() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gss_src_req_t::clear_has_degree() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gss_src_req_t::clear_degree() {
  degree_ = 0;
  clear_has_degree();
}
inline ::google::protobuf::int32 gss_src_req_t::degree() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_src_req_t.Degree)
  return degree_;
}
inline void gss_src_req_t::set_degree(::google::protobuf::int32 value) {
  set_has_degree();
  degree_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_src_req_t.Degree)
}

// optional string Key = 8;
inline bool gss_src_req_t::has_key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gss_src_req_t::set_has_key() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gss_src_req_t::clear_has_key() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gss_src_req_t::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& gss_src_req_t::key() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_src_req_t.Key)
  return *key_;
}
inline void gss_src_req_t::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.gss_src_req_t.Key)
}
inline void gss_src_req_t::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.gss_src_req_t.Key)
}
inline void gss_src_req_t::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.gss_src_req_t.Key)
}
inline ::std::string* gss_src_req_t::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.gss_src_req_t.Key)
  return key_;
}
inline ::std::string* gss_src_req_t::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void gss_src_req_t::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.gss_src_req_t.Key)
}

// optional string ReqKey = 9;
inline bool gss_src_req_t::has_reqkey() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gss_src_req_t::set_has_reqkey() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gss_src_req_t::clear_has_reqkey() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gss_src_req_t::clear_reqkey() {
  if (reqkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reqkey_->clear();
  }
  clear_has_reqkey();
}
inline const ::std::string& gss_src_req_t::reqkey() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_src_req_t.ReqKey)
  return *reqkey_;
}
inline void gss_src_req_t::set_reqkey(const ::std::string& value) {
  set_has_reqkey();
  if (reqkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reqkey_ = new ::std::string;
  }
  reqkey_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.gss_src_req_t.ReqKey)
}
inline void gss_src_req_t::set_reqkey(const char* value) {
  set_has_reqkey();
  if (reqkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reqkey_ = new ::std::string;
  }
  reqkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.gss_src_req_t.ReqKey)
}
inline void gss_src_req_t::set_reqkey(const char* value, size_t size) {
  set_has_reqkey();
  if (reqkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reqkey_ = new ::std::string;
  }
  reqkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.gss_src_req_t.ReqKey)
}
inline ::std::string* gss_src_req_t::mutable_reqkey() {
  set_has_reqkey();
  if (reqkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reqkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.gss_src_req_t.ReqKey)
  return reqkey_;
}
inline ::std::string* gss_src_req_t::release_reqkey() {
  clear_has_reqkey();
  if (reqkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reqkey_;
    reqkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void gss_src_req_t::set_allocated_reqkey(::std::string* reqkey) {
  if (reqkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reqkey_;
  }
  if (reqkey) {
    set_has_reqkey();
    reqkey_ = reqkey;
  } else {
    clear_has_reqkey();
    reqkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.gss_src_req_t.ReqKey)
}

// optional int32 QueryType = 10;
inline bool gss_src_req_t::has_querytype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void gss_src_req_t::set_has_querytype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void gss_src_req_t::clear_has_querytype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void gss_src_req_t::clear_querytype() {
  querytype_ = 0;
  clear_has_querytype();
}
inline ::google::protobuf::int32 gss_src_req_t::querytype() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_src_req_t.QueryType)
  return querytype_;
}
inline void gss_src_req_t::set_querytype(::google::protobuf::int32 value) {
  set_has_querytype();
  querytype_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_src_req_t.QueryType)
}

// optional bytes HighLight = 11;
inline bool gss_src_req_t::has_highlight() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void gss_src_req_t::set_has_highlight() {
  _has_bits_[0] |= 0x00000200u;
}
inline void gss_src_req_t::clear_has_highlight() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void gss_src_req_t::clear_highlight() {
  if (highlight_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    highlight_->clear();
  }
  clear_has_highlight();
}
inline const ::std::string& gss_src_req_t::highlight() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_src_req_t.HighLight)
  return *highlight_;
}
inline void gss_src_req_t::set_highlight(const ::std::string& value) {
  set_has_highlight();
  if (highlight_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    highlight_ = new ::std::string;
  }
  highlight_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.gss_src_req_t.HighLight)
}
inline void gss_src_req_t::set_highlight(const char* value) {
  set_has_highlight();
  if (highlight_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    highlight_ = new ::std::string;
  }
  highlight_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.gss_src_req_t.HighLight)
}
inline void gss_src_req_t::set_highlight(const void* value, size_t size) {
  set_has_highlight();
  if (highlight_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    highlight_ = new ::std::string;
  }
  highlight_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.gss_src_req_t.HighLight)
}
inline ::std::string* gss_src_req_t::mutable_highlight() {
  set_has_highlight();
  if (highlight_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    highlight_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.gss_src_req_t.HighLight)
  return highlight_;
}
inline ::std::string* gss_src_req_t::release_highlight() {
  clear_has_highlight();
  if (highlight_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = highlight_;
    highlight_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void gss_src_req_t::set_allocated_highlight(::std::string* highlight) {
  if (highlight_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete highlight_;
  }
  if (highlight) {
    set_has_highlight();
    highlight_ = highlight;
  } else {
    clear_has_highlight();
    highlight_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.gss_src_req_t.HighLight)
}

// optional string RetFormat = 12 [default = "html"];
inline bool gss_src_req_t::has_retformat() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void gss_src_req_t::set_has_retformat() {
  _has_bits_[0] |= 0x00000400u;
}
inline void gss_src_req_t::clear_has_retformat() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void gss_src_req_t::clear_retformat() {
  if (retformat_ != _default_retformat_) {
    retformat_->assign(*_default_retformat_);
  }
  clear_has_retformat();
}
inline const ::std::string& gss_src_req_t::retformat() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_src_req_t.RetFormat)
  return *retformat_;
}
inline void gss_src_req_t::set_retformat(const ::std::string& value) {
  set_has_retformat();
  if (retformat_ == _default_retformat_) {
    retformat_ = new ::std::string;
  }
  retformat_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.gss_src_req_t.RetFormat)
}
inline void gss_src_req_t::set_retformat(const char* value) {
  set_has_retformat();
  if (retformat_ == _default_retformat_) {
    retformat_ = new ::std::string;
  }
  retformat_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.gss_src_req_t.RetFormat)
}
inline void gss_src_req_t::set_retformat(const char* value, size_t size) {
  set_has_retformat();
  if (retformat_ == _default_retformat_) {
    retformat_ = new ::std::string;
  }
  retformat_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.gss_src_req_t.RetFormat)
}
inline ::std::string* gss_src_req_t::mutable_retformat() {
  set_has_retformat();
  if (retformat_ == _default_retformat_) {
    retformat_ = new ::std::string(*_default_retformat_);
  }
  // @@protoc_insertion_point(field_mutable:gss.message.gss_src_req_t.RetFormat)
  return retformat_;
}
inline ::std::string* gss_src_req_t::release_retformat() {
  clear_has_retformat();
  if (retformat_ == _default_retformat_) {
    return NULL;
  } else {
    ::std::string* temp = retformat_;
    retformat_ = const_cast< ::std::string*>(_default_retformat_);
    return temp;
  }
}
inline void gss_src_req_t::set_allocated_retformat(::std::string* retformat) {
  if (retformat_ != _default_retformat_) {
    delete retformat_;
  }
  if (retformat) {
    set_has_retformat();
    retformat_ = retformat;
  } else {
    clear_has_retformat();
    retformat_ = const_cast< ::std::string*>(_default_retformat_);
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.gss_src_req_t.RetFormat)
}

// optional string TagFilter = 13;
inline bool gss_src_req_t::has_tagfilter() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void gss_src_req_t::set_has_tagfilter() {
  _has_bits_[0] |= 0x00000800u;
}
inline void gss_src_req_t::clear_has_tagfilter() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void gss_src_req_t::clear_tagfilter() {
  if (tagfilter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tagfilter_->clear();
  }
  clear_has_tagfilter();
}
inline const ::std::string& gss_src_req_t::tagfilter() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_src_req_t.TagFilter)
  return *tagfilter_;
}
inline void gss_src_req_t::set_tagfilter(const ::std::string& value) {
  set_has_tagfilter();
  if (tagfilter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tagfilter_ = new ::std::string;
  }
  tagfilter_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.gss_src_req_t.TagFilter)
}
inline void gss_src_req_t::set_tagfilter(const char* value) {
  set_has_tagfilter();
  if (tagfilter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tagfilter_ = new ::std::string;
  }
  tagfilter_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.gss_src_req_t.TagFilter)
}
inline void gss_src_req_t::set_tagfilter(const char* value, size_t size) {
  set_has_tagfilter();
  if (tagfilter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tagfilter_ = new ::std::string;
  }
  tagfilter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.gss_src_req_t.TagFilter)
}
inline ::std::string* gss_src_req_t::mutable_tagfilter() {
  set_has_tagfilter();
  if (tagfilter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tagfilter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.gss_src_req_t.TagFilter)
  return tagfilter_;
}
inline ::std::string* gss_src_req_t::release_tagfilter() {
  clear_has_tagfilter();
  if (tagfilter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tagfilter_;
    tagfilter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void gss_src_req_t::set_allocated_tagfilter(::std::string* tagfilter) {
  if (tagfilter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tagfilter_;
  }
  if (tagfilter) {
    set_has_tagfilter();
    tagfilter_ = tagfilter;
  } else {
    clear_has_tagfilter();
    tagfilter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.gss_src_req_t.TagFilter)
}

// optional int32 SpReqType = 14;
inline bool gss_src_req_t::has_spreqtype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void gss_src_req_t::set_has_spreqtype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void gss_src_req_t::clear_has_spreqtype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void gss_src_req_t::clear_spreqtype() {
  spreqtype_ = 0;
  clear_has_spreqtype();
}
inline ::google::protobuf::int32 gss_src_req_t::spreqtype() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_src_req_t.SpReqType)
  return spreqtype_;
}
inline void gss_src_req_t::set_spreqtype(::google::protobuf::int32 value) {
  set_has_spreqtype();
  spreqtype_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_src_req_t.SpReqType)
}

// optional string UriKey = 15;
inline bool gss_src_req_t::has_urikey() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void gss_src_req_t::set_has_urikey() {
  _has_bits_[0] |= 0x00002000u;
}
inline void gss_src_req_t::clear_has_urikey() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void gss_src_req_t::clear_urikey() {
  if (urikey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urikey_->clear();
  }
  clear_has_urikey();
}
inline const ::std::string& gss_src_req_t::urikey() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_src_req_t.UriKey)
  return *urikey_;
}
inline void gss_src_req_t::set_urikey(const ::std::string& value) {
  set_has_urikey();
  if (urikey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urikey_ = new ::std::string;
  }
  urikey_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.gss_src_req_t.UriKey)
}
inline void gss_src_req_t::set_urikey(const char* value) {
  set_has_urikey();
  if (urikey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urikey_ = new ::std::string;
  }
  urikey_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.gss_src_req_t.UriKey)
}
inline void gss_src_req_t::set_urikey(const char* value, size_t size) {
  set_has_urikey();
  if (urikey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urikey_ = new ::std::string;
  }
  urikey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.gss_src_req_t.UriKey)
}
inline ::std::string* gss_src_req_t::mutable_urikey() {
  set_has_urikey();
  if (urikey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urikey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.gss_src_req_t.UriKey)
  return urikey_;
}
inline ::std::string* gss_src_req_t::release_urikey() {
  clear_has_urikey();
  if (urikey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = urikey_;
    urikey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void gss_src_req_t::set_allocated_urikey(::std::string* urikey) {
  if (urikey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete urikey_;
  }
  if (urikey) {
    set_has_urikey();
    urikey_ = urikey;
  } else {
    clear_has_urikey();
    urikey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.gss_src_req_t.UriKey)
}

// optional string EntityName = 16;
inline bool gss_src_req_t::has_entityname() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void gss_src_req_t::set_has_entityname() {
  _has_bits_[0] |= 0x00004000u;
}
inline void gss_src_req_t::clear_has_entityname() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void gss_src_req_t::clear_entityname() {
  if (entityname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entityname_->clear();
  }
  clear_has_entityname();
}
inline const ::std::string& gss_src_req_t::entityname() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_src_req_t.EntityName)
  return *entityname_;
}
inline void gss_src_req_t::set_entityname(const ::std::string& value) {
  set_has_entityname();
  if (entityname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entityname_ = new ::std::string;
  }
  entityname_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.gss_src_req_t.EntityName)
}
inline void gss_src_req_t::set_entityname(const char* value) {
  set_has_entityname();
  if (entityname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entityname_ = new ::std::string;
  }
  entityname_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.gss_src_req_t.EntityName)
}
inline void gss_src_req_t::set_entityname(const char* value, size_t size) {
  set_has_entityname();
  if (entityname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entityname_ = new ::std::string;
  }
  entityname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.gss_src_req_t.EntityName)
}
inline ::std::string* gss_src_req_t::mutable_entityname() {
  set_has_entityname();
  if (entityname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entityname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.gss_src_req_t.EntityName)
  return entityname_;
}
inline ::std::string* gss_src_req_t::release_entityname() {
  clear_has_entityname();
  if (entityname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = entityname_;
    entityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void gss_src_req_t::set_allocated_entityname(::std::string* entityname) {
  if (entityname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete entityname_;
  }
  if (entityname) {
    set_has_entityname();
    entityname_ = entityname;
  } else {
    clear_has_entityname();
    entityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.gss_src_req_t.EntityName)
}

// -------------------------------------------------------------------

// ua_info_t

// optional string ua_os = 1;
inline bool ua_info_t::has_ua_os() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ua_info_t::set_has_ua_os() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ua_info_t::clear_has_ua_os() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ua_info_t::clear_ua_os() {
  if (ua_os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_os_->clear();
  }
  clear_has_ua_os();
}
inline const ::std::string& ua_info_t::ua_os() const {
  // @@protoc_insertion_point(field_get:gss.message.ua_info_t.ua_os)
  return *ua_os_;
}
inline void ua_info_t::set_ua_os(const ::std::string& value) {
  set_has_ua_os();
  if (ua_os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_os_ = new ::std::string;
  }
  ua_os_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.ua_info_t.ua_os)
}
inline void ua_info_t::set_ua_os(const char* value) {
  set_has_ua_os();
  if (ua_os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_os_ = new ::std::string;
  }
  ua_os_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.ua_info_t.ua_os)
}
inline void ua_info_t::set_ua_os(const char* value, size_t size) {
  set_has_ua_os();
  if (ua_os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_os_ = new ::std::string;
  }
  ua_os_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.ua_info_t.ua_os)
}
inline ::std::string* ua_info_t::mutable_ua_os() {
  set_has_ua_os();
  if (ua_os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_os_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.ua_info_t.ua_os)
  return ua_os_;
}
inline ::std::string* ua_info_t::release_ua_os() {
  clear_has_ua_os();
  if (ua_os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ua_os_;
    ua_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ua_info_t::set_allocated_ua_os(::std::string* ua_os) {
  if (ua_os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ua_os_;
  }
  if (ua_os) {
    set_has_ua_os();
    ua_os_ = ua_os;
  } else {
    clear_has_ua_os();
    ua_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.ua_info_t.ua_os)
}

// optional string ua_browser = 2;
inline bool ua_info_t::has_ua_browser() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ua_info_t::set_has_ua_browser() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ua_info_t::clear_has_ua_browser() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ua_info_t::clear_ua_browser() {
  if (ua_browser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_browser_->clear();
  }
  clear_has_ua_browser();
}
inline const ::std::string& ua_info_t::ua_browser() const {
  // @@protoc_insertion_point(field_get:gss.message.ua_info_t.ua_browser)
  return *ua_browser_;
}
inline void ua_info_t::set_ua_browser(const ::std::string& value) {
  set_has_ua_browser();
  if (ua_browser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_browser_ = new ::std::string;
  }
  ua_browser_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.ua_info_t.ua_browser)
}
inline void ua_info_t::set_ua_browser(const char* value) {
  set_has_ua_browser();
  if (ua_browser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_browser_ = new ::std::string;
  }
  ua_browser_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.ua_info_t.ua_browser)
}
inline void ua_info_t::set_ua_browser(const char* value, size_t size) {
  set_has_ua_browser();
  if (ua_browser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_browser_ = new ::std::string;
  }
  ua_browser_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.ua_info_t.ua_browser)
}
inline ::std::string* ua_info_t::mutable_ua_browser() {
  set_has_ua_browser();
  if (ua_browser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_browser_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.ua_info_t.ua_browser)
  return ua_browser_;
}
inline ::std::string* ua_info_t::release_ua_browser() {
  clear_has_ua_browser();
  if (ua_browser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ua_browser_;
    ua_browser_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ua_info_t::set_allocated_ua_browser(::std::string* ua_browser) {
  if (ua_browser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ua_browser_;
  }
  if (ua_browser) {
    set_has_ua_browser();
    ua_browser_ = ua_browser;
  } else {
    clear_has_ua_browser();
    ua_browser_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.ua_info_t.ua_browser)
}

// optional string ua_modal = 3;
inline bool ua_info_t::has_ua_modal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ua_info_t::set_has_ua_modal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ua_info_t::clear_has_ua_modal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ua_info_t::clear_ua_modal() {
  if (ua_modal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_modal_->clear();
  }
  clear_has_ua_modal();
}
inline const ::std::string& ua_info_t::ua_modal() const {
  // @@protoc_insertion_point(field_get:gss.message.ua_info_t.ua_modal)
  return *ua_modal_;
}
inline void ua_info_t::set_ua_modal(const ::std::string& value) {
  set_has_ua_modal();
  if (ua_modal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_modal_ = new ::std::string;
  }
  ua_modal_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.ua_info_t.ua_modal)
}
inline void ua_info_t::set_ua_modal(const char* value) {
  set_has_ua_modal();
  if (ua_modal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_modal_ = new ::std::string;
  }
  ua_modal_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.ua_info_t.ua_modal)
}
inline void ua_info_t::set_ua_modal(const char* value, size_t size) {
  set_has_ua_modal();
  if (ua_modal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_modal_ = new ::std::string;
  }
  ua_modal_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.ua_info_t.ua_modal)
}
inline ::std::string* ua_info_t::mutable_ua_modal() {
  set_has_ua_modal();
  if (ua_modal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_modal_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.ua_info_t.ua_modal)
  return ua_modal_;
}
inline ::std::string* ua_info_t::release_ua_modal() {
  clear_has_ua_modal();
  if (ua_modal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ua_modal_;
    ua_modal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ua_info_t::set_allocated_ua_modal(::std::string* ua_modal) {
  if (ua_modal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ua_modal_;
  }
  if (ua_modal) {
    set_has_ua_modal();
    ua_modal_ = ua_modal;
  } else {
    clear_has_ua_modal();
    ua_modal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.ua_info_t.ua_modal)
}

// optional string ua_measure = 4;
inline bool ua_info_t::has_ua_measure() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ua_info_t::set_has_ua_measure() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ua_info_t::clear_has_ua_measure() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ua_info_t::clear_ua_measure() {
  if (ua_measure_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_measure_->clear();
  }
  clear_has_ua_measure();
}
inline const ::std::string& ua_info_t::ua_measure() const {
  // @@protoc_insertion_point(field_get:gss.message.ua_info_t.ua_measure)
  return *ua_measure_;
}
inline void ua_info_t::set_ua_measure(const ::std::string& value) {
  set_has_ua_measure();
  if (ua_measure_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_measure_ = new ::std::string;
  }
  ua_measure_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.ua_info_t.ua_measure)
}
inline void ua_info_t::set_ua_measure(const char* value) {
  set_has_ua_measure();
  if (ua_measure_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_measure_ = new ::std::string;
  }
  ua_measure_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.ua_info_t.ua_measure)
}
inline void ua_info_t::set_ua_measure(const char* value, size_t size) {
  set_has_ua_measure();
  if (ua_measure_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_measure_ = new ::std::string;
  }
  ua_measure_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.ua_info_t.ua_measure)
}
inline ::std::string* ua_info_t::mutable_ua_measure() {
  set_has_ua_measure();
  if (ua_measure_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_measure_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.ua_info_t.ua_measure)
  return ua_measure_;
}
inline ::std::string* ua_info_t::release_ua_measure() {
  clear_has_ua_measure();
  if (ua_measure_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ua_measure_;
    ua_measure_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ua_info_t::set_allocated_ua_measure(::std::string* ua_measure) {
  if (ua_measure_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ua_measure_;
  }
  if (ua_measure) {
    set_has_ua_measure();
    ua_measure_ = ua_measure;
  } else {
    clear_has_ua_measure();
    ua_measure_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.ua_info_t.ua_measure)
}

// optional int32 ua_res_x = 5;
inline bool ua_info_t::has_ua_res_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ua_info_t::set_has_ua_res_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ua_info_t::clear_has_ua_res_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ua_info_t::clear_ua_res_x() {
  ua_res_x_ = 0;
  clear_has_ua_res_x();
}
inline ::google::protobuf::int32 ua_info_t::ua_res_x() const {
  // @@protoc_insertion_point(field_get:gss.message.ua_info_t.ua_res_x)
  return ua_res_x_;
}
inline void ua_info_t::set_ua_res_x(::google::protobuf::int32 value) {
  set_has_ua_res_x();
  ua_res_x_ = value;
  // @@protoc_insertion_point(field_set:gss.message.ua_info_t.ua_res_x)
}

// optional int32 ua_res_y = 6;
inline bool ua_info_t::has_ua_res_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ua_info_t::set_has_ua_res_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ua_info_t::clear_has_ua_res_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ua_info_t::clear_ua_res_y() {
  ua_res_y_ = 0;
  clear_has_ua_res_y();
}
inline ::google::protobuf::int32 ua_info_t::ua_res_y() const {
  // @@protoc_insertion_point(field_get:gss.message.ua_info_t.ua_res_y)
  return ua_res_y_;
}
inline void ua_info_t::set_ua_res_y(::google::protobuf::int32 value) {
  set_has_ua_res_y();
  ua_res_y_ = value;
  // @@protoc_insertion_point(field_set:gss.message.ua_info_t.ua_res_y)
}

// optional bytes ua_ext = 7;
inline bool ua_info_t::has_ua_ext() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ua_info_t::set_has_ua_ext() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ua_info_t::clear_has_ua_ext() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ua_info_t::clear_ua_ext() {
  if (ua_ext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ext_->clear();
  }
  clear_has_ua_ext();
}
inline const ::std::string& ua_info_t::ua_ext() const {
  // @@protoc_insertion_point(field_get:gss.message.ua_info_t.ua_ext)
  return *ua_ext_;
}
inline void ua_info_t::set_ua_ext(const ::std::string& value) {
  set_has_ua_ext();
  if (ua_ext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ext_ = new ::std::string;
  }
  ua_ext_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.ua_info_t.ua_ext)
}
inline void ua_info_t::set_ua_ext(const char* value) {
  set_has_ua_ext();
  if (ua_ext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ext_ = new ::std::string;
  }
  ua_ext_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.ua_info_t.ua_ext)
}
inline void ua_info_t::set_ua_ext(const void* value, size_t size) {
  set_has_ua_ext();
  if (ua_ext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ext_ = new ::std::string;
  }
  ua_ext_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.ua_info_t.ua_ext)
}
inline ::std::string* ua_info_t::mutable_ua_ext() {
  set_has_ua_ext();
  if (ua_ext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ua_ext_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.ua_info_t.ua_ext)
  return ua_ext_;
}
inline ::std::string* ua_info_t::release_ua_ext() {
  clear_has_ua_ext();
  if (ua_ext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ua_ext_;
    ua_ext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ua_info_t::set_allocated_ua_ext(::std::string* ua_ext) {
  if (ua_ext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ua_ext_;
  }
  if (ua_ext) {
    set_has_ua_ext();
    ua_ext_ = ua_ext;
  } else {
    clear_has_ua_ext();
    ua_ext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.ua_info_t.ua_ext)
}

// -------------------------------------------------------------------

// app_info_t

// required string package = 1;
inline bool app_info_t::has_package() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void app_info_t::set_has_package() {
  _has_bits_[0] |= 0x00000001u;
}
inline void app_info_t::clear_has_package() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void app_info_t::clear_package() {
  if (package_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    package_->clear();
  }
  clear_has_package();
}
inline const ::std::string& app_info_t::package() const {
  // @@protoc_insertion_point(field_get:gss.message.app_info_t.package)
  return *package_;
}
inline void app_info_t::set_package(const ::std::string& value) {
  set_has_package();
  if (package_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    package_ = new ::std::string;
  }
  package_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.app_info_t.package)
}
inline void app_info_t::set_package(const char* value) {
  set_has_package();
  if (package_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    package_ = new ::std::string;
  }
  package_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.app_info_t.package)
}
inline void app_info_t::set_package(const char* value, size_t size) {
  set_has_package();
  if (package_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    package_ = new ::std::string;
  }
  package_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.app_info_t.package)
}
inline ::std::string* app_info_t::mutable_package() {
  set_has_package();
  if (package_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    package_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.app_info_t.package)
  return package_;
}
inline ::std::string* app_info_t::release_package() {
  clear_has_package();
  if (package_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = package_;
    package_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void app_info_t::set_allocated_package(::std::string* package) {
  if (package_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete package_;
  }
  if (package) {
    set_has_package();
    package_ = package;
  } else {
    clear_has_package();
    package_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.app_info_t.package)
}

// required int32 version = 2;
inline bool app_info_t::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void app_info_t::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void app_info_t::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void app_info_t::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 app_info_t::version() const {
  // @@protoc_insertion_point(field_get:gss.message.app_info_t.version)
  return version_;
}
inline void app_info_t::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:gss.message.app_info_t.version)
}

// required uint32 signmd5 = 3;
inline bool app_info_t::has_signmd5() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void app_info_t::set_has_signmd5() {
  _has_bits_[0] |= 0x00000004u;
}
inline void app_info_t::clear_has_signmd5() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void app_info_t::clear_signmd5() {
  signmd5_ = 0u;
  clear_has_signmd5();
}
inline ::google::protobuf::uint32 app_info_t::signmd5() const {
  // @@protoc_insertion_point(field_get:gss.message.app_info_t.signmd5)
  return signmd5_;
}
inline void app_info_t::set_signmd5(::google::protobuf::uint32 value) {
  set_has_signmd5();
  signmd5_ = value;
  // @@protoc_insertion_point(field_set:gss.message.app_info_t.signmd5)
}

// -------------------------------------------------------------------

// us_gss_req_t

// required string OriginQuery = 1;
inline bool us_gss_req_t::has_originquery() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void us_gss_req_t::set_has_originquery() {
  _has_bits_[0] |= 0x00000001u;
}
inline void us_gss_req_t::clear_has_originquery() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void us_gss_req_t::clear_originquery() {
  if (originquery_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    originquery_->clear();
  }
  clear_has_originquery();
}
inline const ::std::string& us_gss_req_t::originquery() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.OriginQuery)
  return *originquery_;
}
inline void us_gss_req_t::set_originquery(const ::std::string& value) {
  set_has_originquery();
  if (originquery_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    originquery_ = new ::std::string;
  }
  originquery_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.OriginQuery)
}
inline void us_gss_req_t::set_originquery(const char* value) {
  set_has_originquery();
  if (originquery_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    originquery_ = new ::std::string;
  }
  originquery_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.us_gss_req_t.OriginQuery)
}
inline void us_gss_req_t::set_originquery(const char* value, size_t size) {
  set_has_originquery();
  if (originquery_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    originquery_ = new ::std::string;
  }
  originquery_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.us_gss_req_t.OriginQuery)
}
inline ::std::string* us_gss_req_t::mutable_originquery() {
  set_has_originquery();
  if (originquery_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    originquery_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.us_gss_req_t.OriginQuery)
  return originquery_;
}
inline ::std::string* us_gss_req_t::release_originquery() {
  clear_has_originquery();
  if (originquery_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = originquery_;
    originquery_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void us_gss_req_t::set_allocated_originquery(::std::string* originquery) {
  if (originquery_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete originquery_;
  }
  if (originquery) {
    set_has_originquery();
    originquery_ = originquery;
  } else {
    clear_has_originquery();
    originquery_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.us_gss_req_t.OriginQuery)
}

// required int32 UserIP = 2;
inline bool us_gss_req_t::has_userip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void us_gss_req_t::set_has_userip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void us_gss_req_t::clear_has_userip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void us_gss_req_t::clear_userip() {
  userip_ = 0;
  clear_has_userip();
}
inline ::google::protobuf::int32 us_gss_req_t::userip() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.UserIP)
  return userip_;
}
inline void us_gss_req_t::set_userip(::google::protobuf::int32 value) {
  set_has_userip();
  userip_ = value;
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.UserIP)
}

// required int32 TimingNeed = 3;
inline bool us_gss_req_t::has_timingneed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void us_gss_req_t::set_has_timingneed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void us_gss_req_t::clear_has_timingneed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void us_gss_req_t::clear_timingneed() {
  timingneed_ = 0;
  clear_has_timingneed();
}
inline ::google::protobuf::int32 us_gss_req_t::timingneed() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.TimingNeed)
  return timingneed_;
}
inline void us_gss_req_t::set_timingneed(::google::protobuf::int32 value) {
  set_has_timingneed();
  timingneed_ = value;
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.TimingNeed)
}

// optional uint64 QueryID64 = 4 [default = 0];
inline bool us_gss_req_t::has_queryid64() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void us_gss_req_t::set_has_queryid64() {
  _has_bits_[0] |= 0x00000008u;
}
inline void us_gss_req_t::clear_has_queryid64() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void us_gss_req_t::clear_queryid64() {
  queryid64_ = GOOGLE_ULONGLONG(0);
  clear_has_queryid64();
}
inline ::google::protobuf::uint64 us_gss_req_t::queryid64() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.QueryID64)
  return queryid64_;
}
inline void us_gss_req_t::set_queryid64(::google::protobuf::uint64 value) {
  set_has_queryid64();
  queryid64_ = value;
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.QueryID64)
}

// optional string ClientName = 5 [default = "unknow"];
inline bool us_gss_req_t::has_clientname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void us_gss_req_t::set_has_clientname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void us_gss_req_t::clear_has_clientname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void us_gss_req_t::clear_clientname() {
  if (clientname_ != _default_clientname_) {
    clientname_->assign(*_default_clientname_);
  }
  clear_has_clientname();
}
inline const ::std::string& us_gss_req_t::clientname() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.ClientName)
  return *clientname_;
}
inline void us_gss_req_t::set_clientname(const ::std::string& value) {
  set_has_clientname();
  if (clientname_ == _default_clientname_) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.ClientName)
}
inline void us_gss_req_t::set_clientname(const char* value) {
  set_has_clientname();
  if (clientname_ == _default_clientname_) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.us_gss_req_t.ClientName)
}
inline void us_gss_req_t::set_clientname(const char* value, size_t size) {
  set_has_clientname();
  if (clientname_ == _default_clientname_) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.us_gss_req_t.ClientName)
}
inline ::std::string* us_gss_req_t::mutable_clientname() {
  set_has_clientname();
  if (clientname_ == _default_clientname_) {
    clientname_ = new ::std::string(*_default_clientname_);
  }
  // @@protoc_insertion_point(field_mutable:gss.message.us_gss_req_t.ClientName)
  return clientname_;
}
inline ::std::string* us_gss_req_t::release_clientname() {
  clear_has_clientname();
  if (clientname_ == _default_clientname_) {
    return NULL;
  } else {
    ::std::string* temp = clientname_;
    clientname_ = const_cast< ::std::string*>(_default_clientname_);
    return temp;
  }
}
inline void us_gss_req_t::set_allocated_clientname(::std::string* clientname) {
  if (clientname_ != _default_clientname_) {
    delete clientname_;
  }
  if (clientname) {
    set_has_clientname();
    clientname_ = clientname;
  } else {
    clear_has_clientname();
    clientname_ = const_cast< ::std::string*>(_default_clientname_);
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.us_gss_req_t.ClientName)
}

// optional int32 ResNum = 11 [default = 20];
inline bool us_gss_req_t::has_resnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void us_gss_req_t::set_has_resnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void us_gss_req_t::clear_has_resnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void us_gss_req_t::clear_resnum() {
  resnum_ = 20;
  clear_has_resnum();
}
inline ::google::protobuf::int32 us_gss_req_t::resnum() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.ResNum)
  return resnum_;
}
inline void us_gss_req_t::set_resnum(::google::protobuf::int32 value) {
  set_has_resnum();
  resnum_ = value;
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.ResNum)
}

// optional int32 PageNum = 12 [default = 0];
inline bool us_gss_req_t::has_pagenum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void us_gss_req_t::set_has_pagenum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void us_gss_req_t::clear_has_pagenum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void us_gss_req_t::clear_pagenum() {
  pagenum_ = 0;
  clear_has_pagenum();
}
inline ::google::protobuf::int32 us_gss_req_t::pagenum() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.PageNum)
  return pagenum_;
}
inline void us_gss_req_t::set_pagenum(::google::protobuf::int32 value) {
  set_has_pagenum();
  pagenum_ = value;
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.PageNum)
}

// optional int32 ctpl_or_php = 13 [default = 0];
inline bool us_gss_req_t::has_ctpl_or_php() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void us_gss_req_t::set_has_ctpl_or_php() {
  _has_bits_[0] |= 0x00000080u;
}
inline void us_gss_req_t::clear_has_ctpl_or_php() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void us_gss_req_t::clear_ctpl_or_php() {
  ctpl_or_php_ = 0;
  clear_has_ctpl_or_php();
}
inline ::google::protobuf::int32 us_gss_req_t::ctpl_or_php() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.ctpl_or_php)
  return ctpl_or_php_;
}
inline void us_gss_req_t::set_ctpl_or_php(::google::protobuf::int32 value) {
  set_has_ctpl_or_php();
  ctpl_or_php_ = value;
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.ctpl_or_php)
}

// optional int32 SeType = 14 [default = 0];
inline bool us_gss_req_t::has_setype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void us_gss_req_t::set_has_setype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void us_gss_req_t::clear_has_setype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void us_gss_req_t::clear_setype() {
  setype_ = 0;
  clear_has_setype();
}
inline ::google::protobuf::int32 us_gss_req_t::setype() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.SeType)
  return setype_;
}
inline void us_gss_req_t::set_setype(::google::protobuf::int32 value) {
  set_has_setype();
  setype_ = value;
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.SeType)
}

// required string TemplateName = 15;
inline bool us_gss_req_t::has_templatename() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void us_gss_req_t::set_has_templatename() {
  _has_bits_[0] |= 0x00000200u;
}
inline void us_gss_req_t::clear_has_templatename() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void us_gss_req_t::clear_templatename() {
  if (templatename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    templatename_->clear();
  }
  clear_has_templatename();
}
inline const ::std::string& us_gss_req_t::templatename() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.TemplateName)
  return *templatename_;
}
inline void us_gss_req_t::set_templatename(const ::std::string& value) {
  set_has_templatename();
  if (templatename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    templatename_ = new ::std::string;
  }
  templatename_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.TemplateName)
}
inline void us_gss_req_t::set_templatename(const char* value) {
  set_has_templatename();
  if (templatename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    templatename_ = new ::std::string;
  }
  templatename_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.us_gss_req_t.TemplateName)
}
inline void us_gss_req_t::set_templatename(const char* value, size_t size) {
  set_has_templatename();
  if (templatename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    templatename_ = new ::std::string;
  }
  templatename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.us_gss_req_t.TemplateName)
}
inline ::std::string* us_gss_req_t::mutable_templatename() {
  set_has_templatename();
  if (templatename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    templatename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.us_gss_req_t.TemplateName)
  return templatename_;
}
inline ::std::string* us_gss_req_t::release_templatename() {
  clear_has_templatename();
  if (templatename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = templatename_;
    templatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void us_gss_req_t::set_allocated_templatename(::std::string* templatename) {
  if (templatename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete templatename_;
  }
  if (templatename) {
    set_has_templatename();
    templatename_ = templatename;
  } else {
    clear_has_templatename();
    templatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.us_gss_req_t.TemplateName)
}

// repeated int32 sid = 16;
inline int us_gss_req_t::sid_size() const {
  return sid_.size();
}
inline void us_gss_req_t::clear_sid() {
  sid_.Clear();
}
inline ::google::protobuf::int32 us_gss_req_t::sid(int index) const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.sid)
  return sid_.Get(index);
}
inline void us_gss_req_t::set_sid(int index, ::google::protobuf::int32 value) {
  sid_.Set(index, value);
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.sid)
}
inline void us_gss_req_t::add_sid(::google::protobuf::int32 value) {
  sid_.Add(value);
  // @@protoc_insertion_point(field_add:gss.message.us_gss_req_t.sid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
us_gss_req_t::sid() const {
  // @@protoc_insertion_point(field_list:gss.message.us_gss_req_t.sid)
  return sid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
us_gss_req_t::mutable_sid() {
  // @@protoc_insertion_point(field_mutable_list:gss.message.us_gss_req_t.sid)
  return &sid_;
}

// optional bytes UrlParaPack = 17;
inline bool us_gss_req_t::has_urlparapack() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void us_gss_req_t::set_has_urlparapack() {
  _has_bits_[0] |= 0x00000800u;
}
inline void us_gss_req_t::clear_has_urlparapack() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void us_gss_req_t::clear_urlparapack() {
  if (urlparapack_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urlparapack_->clear();
  }
  clear_has_urlparapack();
}
inline const ::std::string& us_gss_req_t::urlparapack() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.UrlParaPack)
  return *urlparapack_;
}
inline void us_gss_req_t::set_urlparapack(const ::std::string& value) {
  set_has_urlparapack();
  if (urlparapack_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urlparapack_ = new ::std::string;
  }
  urlparapack_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.UrlParaPack)
}
inline void us_gss_req_t::set_urlparapack(const char* value) {
  set_has_urlparapack();
  if (urlparapack_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urlparapack_ = new ::std::string;
  }
  urlparapack_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.us_gss_req_t.UrlParaPack)
}
inline void us_gss_req_t::set_urlparapack(const void* value, size_t size) {
  set_has_urlparapack();
  if (urlparapack_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urlparapack_ = new ::std::string;
  }
  urlparapack_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.us_gss_req_t.UrlParaPack)
}
inline ::std::string* us_gss_req_t::mutable_urlparapack() {
  set_has_urlparapack();
  if (urlparapack_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urlparapack_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.us_gss_req_t.UrlParaPack)
  return urlparapack_;
}
inline ::std::string* us_gss_req_t::release_urlparapack() {
  clear_has_urlparapack();
  if (urlparapack_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = urlparapack_;
    urlparapack_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void us_gss_req_t::set_allocated_urlparapack(::std::string* urlparapack) {
  if (urlparapack_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete urlparapack_;
  }
  if (urlparapack) {
    set_has_urlparapack();
    urlparapack_ = urlparapack;
  } else {
    clear_has_urlparapack();
    urlparapack_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.us_gss_req_t.UrlParaPack)
}

// optional bytes gssqa = 18;
inline bool us_gss_req_t::has_gssqa() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void us_gss_req_t::set_has_gssqa() {
  _has_bits_[0] |= 0x00001000u;
}
inline void us_gss_req_t::clear_has_gssqa() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void us_gss_req_t::clear_gssqa() {
  if (gssqa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gssqa_->clear();
  }
  clear_has_gssqa();
}
inline const ::std::string& us_gss_req_t::gssqa() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.gssqa)
  return *gssqa_;
}
inline void us_gss_req_t::set_gssqa(const ::std::string& value) {
  set_has_gssqa();
  if (gssqa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gssqa_ = new ::std::string;
  }
  gssqa_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.gssqa)
}
inline void us_gss_req_t::set_gssqa(const char* value) {
  set_has_gssqa();
  if (gssqa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gssqa_ = new ::std::string;
  }
  gssqa_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.us_gss_req_t.gssqa)
}
inline void us_gss_req_t::set_gssqa(const void* value, size_t size) {
  set_has_gssqa();
  if (gssqa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gssqa_ = new ::std::string;
  }
  gssqa_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.us_gss_req_t.gssqa)
}
inline ::std::string* us_gss_req_t::mutable_gssqa() {
  set_has_gssqa();
  if (gssqa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gssqa_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.us_gss_req_t.gssqa)
  return gssqa_;
}
inline ::std::string* us_gss_req_t::release_gssqa() {
  clear_has_gssqa();
  if (gssqa_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gssqa_;
    gssqa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void us_gss_req_t::set_allocated_gssqa(::std::string* gssqa) {
  if (gssqa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gssqa_;
  }
  if (gssqa) {
    set_has_gssqa();
    gssqa_ = gssqa;
  } else {
    clear_has_gssqa();
    gssqa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.us_gss_req_t.gssqa)
}

// optional string Cookie = 19;
inline bool us_gss_req_t::has_cookie() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void us_gss_req_t::set_has_cookie() {
  _has_bits_[0] |= 0x00002000u;
}
inline void us_gss_req_t::clear_has_cookie() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void us_gss_req_t::clear_cookie() {
  if (cookie_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_->clear();
  }
  clear_has_cookie();
}
inline const ::std::string& us_gss_req_t::cookie() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.Cookie)
  return *cookie_;
}
inline void us_gss_req_t::set_cookie(const ::std::string& value) {
  set_has_cookie();
  if (cookie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_ = new ::std::string;
  }
  cookie_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.Cookie)
}
inline void us_gss_req_t::set_cookie(const char* value) {
  set_has_cookie();
  if (cookie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_ = new ::std::string;
  }
  cookie_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.us_gss_req_t.Cookie)
}
inline void us_gss_req_t::set_cookie(const char* value, size_t size) {
  set_has_cookie();
  if (cookie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_ = new ::std::string;
  }
  cookie_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.us_gss_req_t.Cookie)
}
inline ::std::string* us_gss_req_t::mutable_cookie() {
  set_has_cookie();
  if (cookie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.us_gss_req_t.Cookie)
  return cookie_;
}
inline ::std::string* us_gss_req_t::release_cookie() {
  clear_has_cookie();
  if (cookie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cookie_;
    cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void us_gss_req_t::set_allocated_cookie(::std::string* cookie) {
  if (cookie_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cookie_;
  }
  if (cookie) {
    set_has_cookie();
    cookie_ = cookie;
  } else {
    clear_has_cookie();
    cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.us_gss_req_t.Cookie)
}

// optional string province_name = 31;
inline bool us_gss_req_t::has_province_name() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void us_gss_req_t::set_has_province_name() {
  _has_bits_[0] |= 0x00004000u;
}
inline void us_gss_req_t::clear_has_province_name() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void us_gss_req_t::clear_province_name() {
  if (province_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_name_->clear();
  }
  clear_has_province_name();
}
inline const ::std::string& us_gss_req_t::province_name() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.province_name)
  return *province_name_;
}
inline void us_gss_req_t::set_province_name(const ::std::string& value) {
  set_has_province_name();
  if (province_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_name_ = new ::std::string;
  }
  province_name_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.province_name)
}
inline void us_gss_req_t::set_province_name(const char* value) {
  set_has_province_name();
  if (province_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_name_ = new ::std::string;
  }
  province_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.us_gss_req_t.province_name)
}
inline void us_gss_req_t::set_province_name(const char* value, size_t size) {
  set_has_province_name();
  if (province_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_name_ = new ::std::string;
  }
  province_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.us_gss_req_t.province_name)
}
inline ::std::string* us_gss_req_t::mutable_province_name() {
  set_has_province_name();
  if (province_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.us_gss_req_t.province_name)
  return province_name_;
}
inline ::std::string* us_gss_req_t::release_province_name() {
  clear_has_province_name();
  if (province_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = province_name_;
    province_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void us_gss_req_t::set_allocated_province_name(::std::string* province_name) {
  if (province_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete province_name_;
  }
  if (province_name) {
    set_has_province_name();
    province_name_ = province_name;
  } else {
    clear_has_province_name();
    province_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.us_gss_req_t.province_name)
}

// optional string city_name = 32;
inline bool us_gss_req_t::has_city_name() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void us_gss_req_t::set_has_city_name() {
  _has_bits_[0] |= 0x00008000u;
}
inline void us_gss_req_t::clear_has_city_name() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void us_gss_req_t::clear_city_name() {
  if (city_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_name_->clear();
  }
  clear_has_city_name();
}
inline const ::std::string& us_gss_req_t::city_name() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.city_name)
  return *city_name_;
}
inline void us_gss_req_t::set_city_name(const ::std::string& value) {
  set_has_city_name();
  if (city_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_name_ = new ::std::string;
  }
  city_name_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.city_name)
}
inline void us_gss_req_t::set_city_name(const char* value) {
  set_has_city_name();
  if (city_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_name_ = new ::std::string;
  }
  city_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.us_gss_req_t.city_name)
}
inline void us_gss_req_t::set_city_name(const char* value, size_t size) {
  set_has_city_name();
  if (city_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_name_ = new ::std::string;
  }
  city_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.us_gss_req_t.city_name)
}
inline ::std::string* us_gss_req_t::mutable_city_name() {
  set_has_city_name();
  if (city_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.us_gss_req_t.city_name)
  return city_name_;
}
inline ::std::string* us_gss_req_t::release_city_name() {
  clear_has_city_name();
  if (city_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = city_name_;
    city_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void us_gss_req_t::set_allocated_city_name(::std::string* city_name) {
  if (city_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_name_;
  }
  if (city_name) {
    set_has_city_name();
    city_name_ = city_name;
  } else {
    clear_has_city_name();
    city_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.us_gss_req_t.city_name)
}

// optional string isp_name = 33;
inline bool us_gss_req_t::has_isp_name() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void us_gss_req_t::set_has_isp_name() {
  _has_bits_[0] |= 0x00010000u;
}
inline void us_gss_req_t::clear_has_isp_name() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void us_gss_req_t::clear_isp_name() {
  if (isp_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    isp_name_->clear();
  }
  clear_has_isp_name();
}
inline const ::std::string& us_gss_req_t::isp_name() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.isp_name)
  return *isp_name_;
}
inline void us_gss_req_t::set_isp_name(const ::std::string& value) {
  set_has_isp_name();
  if (isp_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    isp_name_ = new ::std::string;
  }
  isp_name_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.isp_name)
}
inline void us_gss_req_t::set_isp_name(const char* value) {
  set_has_isp_name();
  if (isp_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    isp_name_ = new ::std::string;
  }
  isp_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.us_gss_req_t.isp_name)
}
inline void us_gss_req_t::set_isp_name(const char* value, size_t size) {
  set_has_isp_name();
  if (isp_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    isp_name_ = new ::std::string;
  }
  isp_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.us_gss_req_t.isp_name)
}
inline ::std::string* us_gss_req_t::mutable_isp_name() {
  set_has_isp_name();
  if (isp_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    isp_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.us_gss_req_t.isp_name)
  return isp_name_;
}
inline ::std::string* us_gss_req_t::release_isp_name() {
  clear_has_isp_name();
  if (isp_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = isp_name_;
    isp_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void us_gss_req_t::set_allocated_isp_name(::std::string* isp_name) {
  if (isp_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete isp_name_;
  }
  if (isp_name) {
    set_has_isp_name();
    isp_name_ = isp_name;
  } else {
    clear_has_isp_name();
    isp_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.us_gss_req_t.isp_name)
}

// required uint32 SrcNum = 34;
inline bool us_gss_req_t::has_srcnum() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void us_gss_req_t::set_has_srcnum() {
  _has_bits_[0] |= 0x00020000u;
}
inline void us_gss_req_t::clear_has_srcnum() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void us_gss_req_t::clear_srcnum() {
  srcnum_ = 0u;
  clear_has_srcnum();
}
inline ::google::protobuf::uint32 us_gss_req_t::srcnum() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.SrcNum)
  return srcnum_;
}
inline void us_gss_req_t::set_srcnum(::google::protobuf::uint32 value) {
  set_has_srcnum();
  srcnum_ = value;
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.SrcNum)
}

// optional string From = 35 [default = "www"];
inline bool us_gss_req_t::has_from() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void us_gss_req_t::set_has_from() {
  _has_bits_[0] |= 0x00040000u;
}
inline void us_gss_req_t::clear_has_from() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void us_gss_req_t::clear_from() {
  if (from_ != _default_from_) {
    from_->assign(*_default_from_);
  }
  clear_has_from();
}
inline const ::std::string& us_gss_req_t::from() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.From)
  return *from_;
}
inline void us_gss_req_t::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == _default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.From)
}
inline void us_gss_req_t::set_from(const char* value) {
  set_has_from();
  if (from_ == _default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.us_gss_req_t.From)
}
inline void us_gss_req_t::set_from(const char* value, size_t size) {
  set_has_from();
  if (from_ == _default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.us_gss_req_t.From)
}
inline ::std::string* us_gss_req_t::mutable_from() {
  set_has_from();
  if (from_ == _default_from_) {
    from_ = new ::std::string(*_default_from_);
  }
  // @@protoc_insertion_point(field_mutable:gss.message.us_gss_req_t.From)
  return from_;
}
inline ::std::string* us_gss_req_t::release_from() {
  clear_has_from();
  if (from_ == _default_from_) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(_default_from_);
    return temp;
  }
}
inline void us_gss_req_t::set_allocated_from(::std::string* from) {
  if (from_ != _default_from_) {
    delete from_;
  }
  if (from) {
    set_has_from();
    from_ = from;
  } else {
    clear_has_from();
    from_ = const_cast< ::std::string*>(_default_from_);
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.us_gss_req_t.From)
}

// optional string Fmt = 36 [default = "html"];
inline bool us_gss_req_t::has_fmt() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void us_gss_req_t::set_has_fmt() {
  _has_bits_[0] |= 0x00080000u;
}
inline void us_gss_req_t::clear_has_fmt() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void us_gss_req_t::clear_fmt() {
  if (fmt_ != _default_fmt_) {
    fmt_->assign(*_default_fmt_);
  }
  clear_has_fmt();
}
inline const ::std::string& us_gss_req_t::fmt() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.Fmt)
  return *fmt_;
}
inline void us_gss_req_t::set_fmt(const ::std::string& value) {
  set_has_fmt();
  if (fmt_ == _default_fmt_) {
    fmt_ = new ::std::string;
  }
  fmt_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.Fmt)
}
inline void us_gss_req_t::set_fmt(const char* value) {
  set_has_fmt();
  if (fmt_ == _default_fmt_) {
    fmt_ = new ::std::string;
  }
  fmt_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.us_gss_req_t.Fmt)
}
inline void us_gss_req_t::set_fmt(const char* value, size_t size) {
  set_has_fmt();
  if (fmt_ == _default_fmt_) {
    fmt_ = new ::std::string;
  }
  fmt_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.us_gss_req_t.Fmt)
}
inline ::std::string* us_gss_req_t::mutable_fmt() {
  set_has_fmt();
  if (fmt_ == _default_fmt_) {
    fmt_ = new ::std::string(*_default_fmt_);
  }
  // @@protoc_insertion_point(field_mutable:gss.message.us_gss_req_t.Fmt)
  return fmt_;
}
inline ::std::string* us_gss_req_t::release_fmt() {
  clear_has_fmt();
  if (fmt_ == _default_fmt_) {
    return NULL;
  } else {
    ::std::string* temp = fmt_;
    fmt_ = const_cast< ::std::string*>(_default_fmt_);
    return temp;
  }
}
inline void us_gss_req_t::set_allocated_fmt(::std::string* fmt) {
  if (fmt_ != _default_fmt_) {
    delete fmt_;
  }
  if (fmt) {
    set_has_fmt();
    fmt_ = fmt;
  } else {
    clear_has_fmt();
    fmt_ = const_cast< ::std::string*>(_default_fmt_);
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.us_gss_req_t.Fmt)
}

// optional bytes HighLight = 37;
inline bool us_gss_req_t::has_highlight() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void us_gss_req_t::set_has_highlight() {
  _has_bits_[0] |= 0x00100000u;
}
inline void us_gss_req_t::clear_has_highlight() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void us_gss_req_t::clear_highlight() {
  if (highlight_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    highlight_->clear();
  }
  clear_has_highlight();
}
inline const ::std::string& us_gss_req_t::highlight() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.HighLight)
  return *highlight_;
}
inline void us_gss_req_t::set_highlight(const ::std::string& value) {
  set_has_highlight();
  if (highlight_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    highlight_ = new ::std::string;
  }
  highlight_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.HighLight)
}
inline void us_gss_req_t::set_highlight(const char* value) {
  set_has_highlight();
  if (highlight_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    highlight_ = new ::std::string;
  }
  highlight_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.us_gss_req_t.HighLight)
}
inline void us_gss_req_t::set_highlight(const void* value, size_t size) {
  set_has_highlight();
  if (highlight_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    highlight_ = new ::std::string;
  }
  highlight_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.us_gss_req_t.HighLight)
}
inline ::std::string* us_gss_req_t::mutable_highlight() {
  set_has_highlight();
  if (highlight_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    highlight_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.us_gss_req_t.HighLight)
  return highlight_;
}
inline ::std::string* us_gss_req_t::release_highlight() {
  clear_has_highlight();
  if (highlight_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = highlight_;
    highlight_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void us_gss_req_t::set_allocated_highlight(::std::string* highlight) {
  if (highlight_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete highlight_;
  }
  if (highlight) {
    set_has_highlight();
    highlight_ = highlight;
  } else {
    clear_has_highlight();
    highlight_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.us_gss_req_t.HighLight)
}

// optional int32 NeedHilightStr = 38 [default = 0];
inline bool us_gss_req_t::has_needhilightstr() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void us_gss_req_t::set_has_needhilightstr() {
  _has_bits_[0] |= 0x00200000u;
}
inline void us_gss_req_t::clear_has_needhilightstr() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void us_gss_req_t::clear_needhilightstr() {
  needhilightstr_ = 0;
  clear_has_needhilightstr();
}
inline ::google::protobuf::int32 us_gss_req_t::needhilightstr() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.NeedHilightStr)
  return needhilightstr_;
}
inline void us_gss_req_t::set_needhilightstr(::google::protobuf::int32 value) {
  set_has_needhilightstr();
  needhilightstr_ = value;
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.NeedHilightStr)
}

// repeated .gss.message.gss_src_req_t SrcArr = 39;
inline int us_gss_req_t::srcarr_size() const {
  return srcarr_.size();
}
inline void us_gss_req_t::clear_srcarr() {
  srcarr_.Clear();
}
inline const ::gss::message::gss_src_req_t& us_gss_req_t::srcarr(int index) const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.SrcArr)
  return srcarr_.Get(index);
}
inline ::gss::message::gss_src_req_t* us_gss_req_t::mutable_srcarr(int index) {
  // @@protoc_insertion_point(field_mutable:gss.message.us_gss_req_t.SrcArr)
  return srcarr_.Mutable(index);
}
inline ::gss::message::gss_src_req_t* us_gss_req_t::add_srcarr() {
  // @@protoc_insertion_point(field_add:gss.message.us_gss_req_t.SrcArr)
  return srcarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gss::message::gss_src_req_t >&
us_gss_req_t::srcarr() const {
  // @@protoc_insertion_point(field_list:gss.message.us_gss_req_t.SrcArr)
  return srcarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::gss::message::gss_src_req_t >*
us_gss_req_t::mutable_srcarr() {
  // @@protoc_insertion_point(field_mutable_list:gss.message.us_gss_req_t.SrcArr)
  return &srcarr_;
}

// optional int64 resultLang = 40;
inline bool us_gss_req_t::has_resultlang() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void us_gss_req_t::set_has_resultlang() {
  _has_bits_[0] |= 0x00800000u;
}
inline void us_gss_req_t::clear_has_resultlang() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void us_gss_req_t::clear_resultlang() {
  resultlang_ = GOOGLE_LONGLONG(0);
  clear_has_resultlang();
}
inline ::google::protobuf::int64 us_gss_req_t::resultlang() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.resultLang)
  return resultlang_;
}
inline void us_gss_req_t::set_resultlang(::google::protobuf::int64 value) {
  set_has_resultlang();
  resultlang_ = value;
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.resultLang)
}

// optional int64 resultLocale = 41;
inline bool us_gss_req_t::has_resultlocale() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void us_gss_req_t::set_has_resultlocale() {
  _has_bits_[0] |= 0x01000000u;
}
inline void us_gss_req_t::clear_has_resultlocale() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void us_gss_req_t::clear_resultlocale() {
  resultlocale_ = GOOGLE_LONGLONG(0);
  clear_has_resultlocale();
}
inline ::google::protobuf::int64 us_gss_req_t::resultlocale() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.resultLocale)
  return resultlocale_;
}
inline void us_gss_req_t::set_resultlocale(::google::protobuf::int64 value) {
  set_has_resultlocale();
  resultlocale_ = value;
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.resultLocale)
}

// repeated .gss.message.app_info_t AppInfoArr = 42;
inline int us_gss_req_t::appinfoarr_size() const {
  return appinfoarr_.size();
}
inline void us_gss_req_t::clear_appinfoarr() {
  appinfoarr_.Clear();
}
inline const ::gss::message::app_info_t& us_gss_req_t::appinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.AppInfoArr)
  return appinfoarr_.Get(index);
}
inline ::gss::message::app_info_t* us_gss_req_t::mutable_appinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:gss.message.us_gss_req_t.AppInfoArr)
  return appinfoarr_.Mutable(index);
}
inline ::gss::message::app_info_t* us_gss_req_t::add_appinfoarr() {
  // @@protoc_insertion_point(field_add:gss.message.us_gss_req_t.AppInfoArr)
  return appinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gss::message::app_info_t >&
us_gss_req_t::appinfoarr() const {
  // @@protoc_insertion_point(field_list:gss.message.us_gss_req_t.AppInfoArr)
  return appinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::gss::message::app_info_t >*
us_gss_req_t::mutable_appinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:gss.message.us_gss_req_t.AppInfoArr)
  return &appinfoarr_;
}

// optional .gss.message.ua_info_t uaInfo = 43;
inline bool us_gss_req_t::has_uainfo() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void us_gss_req_t::set_has_uainfo() {
  _has_bits_[0] |= 0x04000000u;
}
inline void us_gss_req_t::clear_has_uainfo() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void us_gss_req_t::clear_uainfo() {
  if (uainfo_ != NULL) uainfo_->::gss::message::ua_info_t::Clear();
  clear_has_uainfo();
}
inline const ::gss::message::ua_info_t& us_gss_req_t::uainfo() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.uaInfo)
  return uainfo_ != NULL ? *uainfo_ : *default_instance_->uainfo_;
}
inline ::gss::message::ua_info_t* us_gss_req_t::mutable_uainfo() {
  set_has_uainfo();
  if (uainfo_ == NULL) uainfo_ = new ::gss::message::ua_info_t;
  // @@protoc_insertion_point(field_mutable:gss.message.us_gss_req_t.uaInfo)
  return uainfo_;
}
inline ::gss::message::ua_info_t* us_gss_req_t::release_uainfo() {
  clear_has_uainfo();
  ::gss::message::ua_info_t* temp = uainfo_;
  uainfo_ = NULL;
  return temp;
}
inline void us_gss_req_t::set_allocated_uainfo(::gss::message::ua_info_t* uainfo) {
  delete uainfo_;
  uainfo_ = uainfo;
  if (uainfo) {
    set_has_uainfo();
  } else {
    clear_has_uainfo();
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.us_gss_req_t.uaInfo)
}

// optional string useragent_full = 44;
inline bool us_gss_req_t::has_useragent_full() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void us_gss_req_t::set_has_useragent_full() {
  _has_bits_[0] |= 0x08000000u;
}
inline void us_gss_req_t::clear_has_useragent_full() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void us_gss_req_t::clear_useragent_full() {
  if (useragent_full_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    useragent_full_->clear();
  }
  clear_has_useragent_full();
}
inline const ::std::string& us_gss_req_t::useragent_full() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.useragent_full)
  return *useragent_full_;
}
inline void us_gss_req_t::set_useragent_full(const ::std::string& value) {
  set_has_useragent_full();
  if (useragent_full_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    useragent_full_ = new ::std::string;
  }
  useragent_full_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.useragent_full)
}
inline void us_gss_req_t::set_useragent_full(const char* value) {
  set_has_useragent_full();
  if (useragent_full_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    useragent_full_ = new ::std::string;
  }
  useragent_full_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.us_gss_req_t.useragent_full)
}
inline void us_gss_req_t::set_useragent_full(const char* value, size_t size) {
  set_has_useragent_full();
  if (useragent_full_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    useragent_full_ = new ::std::string;
  }
  useragent_full_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.us_gss_req_t.useragent_full)
}
inline ::std::string* us_gss_req_t::mutable_useragent_full() {
  set_has_useragent_full();
  if (useragent_full_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    useragent_full_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.us_gss_req_t.useragent_full)
  return useragent_full_;
}
inline ::std::string* us_gss_req_t::release_useragent_full() {
  clear_has_useragent_full();
  if (useragent_full_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = useragent_full_;
    useragent_full_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void us_gss_req_t::set_allocated_useragent_full(::std::string* useragent_full) {
  if (useragent_full_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete useragent_full_;
  }
  if (useragent_full) {
    set_has_useragent_full();
    useragent_full_ = useragent_full;
  } else {
    clear_has_useragent_full();
    useragent_full_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.us_gss_req_t.useragent_full)
}

// optional int32 uid = 45;
inline bool us_gss_req_t::has_uid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void us_gss_req_t::set_has_uid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void us_gss_req_t::clear_has_uid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void us_gss_req_t::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 us_gss_req_t::uid() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.uid)
  return uid_;
}
inline void us_gss_req_t::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.uid)
}

// optional string uname = 46;
inline bool us_gss_req_t::has_uname() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void us_gss_req_t::set_has_uname() {
  _has_bits_[0] |= 0x20000000u;
}
inline void us_gss_req_t::clear_has_uname() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void us_gss_req_t::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& us_gss_req_t::uname() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.uname)
  return *uname_;
}
inline void us_gss_req_t::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.uname)
}
inline void us_gss_req_t::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.us_gss_req_t.uname)
}
inline void us_gss_req_t::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.us_gss_req_t.uname)
}
inline ::std::string* us_gss_req_t::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.us_gss_req_t.uname)
  return uname_;
}
inline ::std::string* us_gss_req_t::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void us_gss_req_t::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.us_gss_req_t.uname)
}

// optional int32 open_gssda_recall = 47;
inline bool us_gss_req_t::has_open_gssda_recall() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void us_gss_req_t::set_has_open_gssda_recall() {
  _has_bits_[0] |= 0x40000000u;
}
inline void us_gss_req_t::clear_has_open_gssda_recall() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void us_gss_req_t::clear_open_gssda_recall() {
  open_gssda_recall_ = 0;
  clear_has_open_gssda_recall();
}
inline ::google::protobuf::int32 us_gss_req_t::open_gssda_recall() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.open_gssda_recall)
  return open_gssda_recall_;
}
inline void us_gss_req_t::set_open_gssda_recall(::google::protobuf::int32 value) {
  set_has_open_gssda_recall();
  open_gssda_recall_ = value;
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.open_gssda_recall)
}

// optional int32 prefetch_flag = 48;
inline bool us_gss_req_t::has_prefetch_flag() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void us_gss_req_t::set_has_prefetch_flag() {
  _has_bits_[0] |= 0x80000000u;
}
inline void us_gss_req_t::clear_has_prefetch_flag() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void us_gss_req_t::clear_prefetch_flag() {
  prefetch_flag_ = 0;
  clear_has_prefetch_flag();
}
inline ::google::protobuf::int32 us_gss_req_t::prefetch_flag() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.prefetch_flag)
  return prefetch_flag_;
}
inline void us_gss_req_t::set_prefetch_flag(::google::protobuf::int32 value) {
  set_has_prefetch_flag();
  prefetch_flag_ = value;
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.prefetch_flag)
}

// optional string service_name = 71;
inline bool us_gss_req_t::has_service_name() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void us_gss_req_t::set_has_service_name() {
  _has_bits_[1] |= 0x00000001u;
}
inline void us_gss_req_t::clear_has_service_name() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void us_gss_req_t::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& us_gss_req_t::service_name() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.service_name)
  return *service_name_;
}
inline void us_gss_req_t::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.service_name)
}
inline void us_gss_req_t::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.us_gss_req_t.service_name)
}
inline void us_gss_req_t::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.us_gss_req_t.service_name)
}
inline ::std::string* us_gss_req_t::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.us_gss_req_t.service_name)
  return service_name_;
}
inline ::std::string* us_gss_req_t::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void us_gss_req_t::set_allocated_service_name(::std::string* service_name) {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (service_name) {
    set_has_service_name();
    service_name_ = service_name;
  } else {
    clear_has_service_name();
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.us_gss_req_t.service_name)
}

// optional string caller = 72;
inline bool us_gss_req_t::has_caller() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void us_gss_req_t::set_has_caller() {
  _has_bits_[1] |= 0x00000002u;
}
inline void us_gss_req_t::clear_has_caller() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void us_gss_req_t::clear_caller() {
  if (caller_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    caller_->clear();
  }
  clear_has_caller();
}
inline const ::std::string& us_gss_req_t::caller() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.caller)
  return *caller_;
}
inline void us_gss_req_t::set_caller(const ::std::string& value) {
  set_has_caller();
  if (caller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    caller_ = new ::std::string;
  }
  caller_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.us_gss_req_t.caller)
}
inline void us_gss_req_t::set_caller(const char* value) {
  set_has_caller();
  if (caller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    caller_ = new ::std::string;
  }
  caller_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.us_gss_req_t.caller)
}
inline void us_gss_req_t::set_caller(const char* value, size_t size) {
  set_has_caller();
  if (caller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    caller_ = new ::std::string;
  }
  caller_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.us_gss_req_t.caller)
}
inline ::std::string* us_gss_req_t::mutable_caller() {
  set_has_caller();
  if (caller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    caller_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.us_gss_req_t.caller)
  return caller_;
}
inline ::std::string* us_gss_req_t::release_caller() {
  clear_has_caller();
  if (caller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = caller_;
    caller_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void us_gss_req_t::set_allocated_caller(::std::string* caller) {
  if (caller_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete caller_;
  }
  if (caller) {
    set_has_caller();
    caller_ = caller;
  } else {
    clear_has_caller();
    caller_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.us_gss_req_t.caller)
}

// optional .gss.message.UserAgent user_agent = 73;
inline bool us_gss_req_t::has_user_agent() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void us_gss_req_t::set_has_user_agent() {
  _has_bits_[1] |= 0x00000004u;
}
inline void us_gss_req_t::clear_has_user_agent() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void us_gss_req_t::clear_user_agent() {
  if (user_agent_ != NULL) user_agent_->::gss::message::UserAgent::Clear();
  clear_has_user_agent();
}
inline const ::gss::message::UserAgent& us_gss_req_t::user_agent() const {
  // @@protoc_insertion_point(field_get:gss.message.us_gss_req_t.user_agent)
  return user_agent_ != NULL ? *user_agent_ : *default_instance_->user_agent_;
}
inline ::gss::message::UserAgent* us_gss_req_t::mutable_user_agent() {
  set_has_user_agent();
  if (user_agent_ == NULL) user_agent_ = new ::gss::message::UserAgent;
  // @@protoc_insertion_point(field_mutable:gss.message.us_gss_req_t.user_agent)
  return user_agent_;
}
inline ::gss::message::UserAgent* us_gss_req_t::release_user_agent() {
  clear_has_user_agent();
  ::gss::message::UserAgent* temp = user_agent_;
  user_agent_ = NULL;
  return temp;
}
inline void us_gss_req_t::set_allocated_user_agent(::gss::message::UserAgent* user_agent) {
  delete user_agent_;
  user_agent_ = user_agent;
  if (user_agent) {
    set_has_user_agent();
  } else {
    clear_has_user_agent();
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.us_gss_req_t.user_agent)
}

// -------------------------------------------------------------------

// UserAgent

// optional string dsp = 1;
inline bool UserAgent::has_dsp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserAgent::set_has_dsp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserAgent::clear_has_dsp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserAgent::clear_dsp() {
  if (dsp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dsp_->clear();
  }
  clear_has_dsp();
}
inline const ::std::string& UserAgent::dsp() const {
  // @@protoc_insertion_point(field_get:gss.message.UserAgent.dsp)
  return *dsp_;
}
inline void UserAgent::set_dsp(const ::std::string& value) {
  set_has_dsp();
  if (dsp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dsp_ = new ::std::string;
  }
  dsp_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.UserAgent.dsp)
}
inline void UserAgent::set_dsp(const char* value) {
  set_has_dsp();
  if (dsp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dsp_ = new ::std::string;
  }
  dsp_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.UserAgent.dsp)
}
inline void UserAgent::set_dsp(const char* value, size_t size) {
  set_has_dsp();
  if (dsp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dsp_ = new ::std::string;
  }
  dsp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.UserAgent.dsp)
}
inline ::std::string* UserAgent::mutable_dsp() {
  set_has_dsp();
  if (dsp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dsp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.UserAgent.dsp)
  return dsp_;
}
inline ::std::string* UserAgent::release_dsp() {
  clear_has_dsp();
  if (dsp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dsp_;
    dsp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserAgent::set_allocated_dsp(::std::string* dsp) {
  if (dsp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dsp_;
  }
  if (dsp) {
    set_has_dsp();
    dsp_ = dsp;
  } else {
    clear_has_dsp();
    dsp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.UserAgent.dsp)
}

// optional string os = 2;
inline bool UserAgent::has_os() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserAgent::set_has_os() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserAgent::clear_has_os() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserAgent::clear_os() {
  if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_->clear();
  }
  clear_has_os();
}
inline const ::std::string& UserAgent::os() const {
  // @@protoc_insertion_point(field_get:gss.message.UserAgent.os)
  return *os_;
}
inline void UserAgent::set_os(const ::std::string& value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_ = new ::std::string;
  }
  os_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.UserAgent.os)
}
inline void UserAgent::set_os(const char* value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_ = new ::std::string;
  }
  os_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.UserAgent.os)
}
inline void UserAgent::set_os(const char* value, size_t size) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_ = new ::std::string;
  }
  os_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.UserAgent.os)
}
inline ::std::string* UserAgent::mutable_os() {
  set_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.UserAgent.os)
  return os_;
}
inline ::std::string* UserAgent::release_os() {
  clear_has_os();
  if (os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = os_;
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserAgent::set_allocated_os(::std::string* os) {
  if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_;
  }
  if (os) {
    set_has_os();
    os_ = os;
  } else {
    clear_has_os();
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.UserAgent.os)
}

// optional string osv = 3;
inline bool UserAgent::has_osv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserAgent::set_has_osv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserAgent::clear_has_osv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserAgent::clear_osv() {
  if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_->clear();
  }
  clear_has_osv();
}
inline const ::std::string& UserAgent::osv() const {
  // @@protoc_insertion_point(field_get:gss.message.UserAgent.osv)
  return *osv_;
}
inline void UserAgent::set_osv(const ::std::string& value) {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  osv_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.UserAgent.osv)
}
inline void UserAgent::set_osv(const char* value) {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  osv_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.UserAgent.osv)
}
inline void UserAgent::set_osv(const char* value, size_t size) {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  osv_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.UserAgent.osv)
}
inline ::std::string* UserAgent::mutable_osv() {
  set_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    osv_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.UserAgent.osv)
  return osv_;
}
inline ::std::string* UserAgent::release_osv() {
  clear_has_osv();
  if (osv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = osv_;
    osv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserAgent::set_allocated_osv(::std::string* osv) {
  if (osv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete osv_;
  }
  if (osv) {
    set_has_osv();
    osv_ = osv;
  } else {
    clear_has_osv();
    osv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.UserAgent.osv)
}

// optional string mb = 4;
inline bool UserAgent::has_mb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserAgent::set_has_mb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserAgent::clear_has_mb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserAgent::clear_mb() {
  if (mb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mb_->clear();
  }
  clear_has_mb();
}
inline const ::std::string& UserAgent::mb() const {
  // @@protoc_insertion_point(field_get:gss.message.UserAgent.mb)
  return *mb_;
}
inline void UserAgent::set_mb(const ::std::string& value) {
  set_has_mb();
  if (mb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mb_ = new ::std::string;
  }
  mb_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.UserAgent.mb)
}
inline void UserAgent::set_mb(const char* value) {
  set_has_mb();
  if (mb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mb_ = new ::std::string;
  }
  mb_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.UserAgent.mb)
}
inline void UserAgent::set_mb(const char* value, size_t size) {
  set_has_mb();
  if (mb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mb_ = new ::std::string;
  }
  mb_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.UserAgent.mb)
}
inline ::std::string* UserAgent::mutable_mb() {
  set_has_mb();
  if (mb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mb_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.UserAgent.mb)
  return mb_;
}
inline ::std::string* UserAgent::release_mb() {
  clear_has_mb();
  if (mb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mb_;
    mb_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserAgent::set_allocated_mb(::std::string* mb) {
  if (mb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mb_;
  }
  if (mb) {
    set_has_mb();
    mb_ = mb;
  } else {
    clear_has_mb();
    mb_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.UserAgent.mb)
}

// optional string mbv = 5;
inline bool UserAgent::has_mbv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserAgent::set_has_mbv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserAgent::clear_has_mbv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserAgent::clear_mbv() {
  if (mbv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mbv_->clear();
  }
  clear_has_mbv();
}
inline const ::std::string& UserAgent::mbv() const {
  // @@protoc_insertion_point(field_get:gss.message.UserAgent.mbv)
  return *mbv_;
}
inline void UserAgent::set_mbv(const ::std::string& value) {
  set_has_mbv();
  if (mbv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mbv_ = new ::std::string;
  }
  mbv_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.UserAgent.mbv)
}
inline void UserAgent::set_mbv(const char* value) {
  set_has_mbv();
  if (mbv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mbv_ = new ::std::string;
  }
  mbv_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.UserAgent.mbv)
}
inline void UserAgent::set_mbv(const char* value, size_t size) {
  set_has_mbv();
  if (mbv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mbv_ = new ::std::string;
  }
  mbv_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.UserAgent.mbv)
}
inline ::std::string* UserAgent::mutable_mbv() {
  set_has_mbv();
  if (mbv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mbv_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.UserAgent.mbv)
  return mbv_;
}
inline ::std::string* UserAgent::release_mbv() {
  clear_has_mbv();
  if (mbv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mbv_;
    mbv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserAgent::set_allocated_mbv(::std::string* mbv) {
  if (mbv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mbv_;
  }
  if (mbv) {
    set_has_mbv();
    mbv_ = mbv;
  } else {
    clear_has_mbv();
    mbv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.UserAgent.mbv)
}

// optional int32 apn = 6;
inline bool UserAgent::has_apn() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserAgent::set_has_apn() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserAgent::clear_has_apn() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserAgent::clear_apn() {
  apn_ = 0;
  clear_has_apn();
}
inline ::google::protobuf::int32 UserAgent::apn() const {
  // @@protoc_insertion_point(field_get:gss.message.UserAgent.apn)
  return apn_;
}
inline void UserAgent::set_apn(::google::protobuf::int32 value) {
  set_has_apn();
  apn_ = value;
  // @@protoc_insertion_point(field_set:gss.message.UserAgent.apn)
}

// optional int32 arn = 7;
inline bool UserAgent::has_arn() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserAgent::set_has_arn() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserAgent::clear_has_arn() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserAgent::clear_arn() {
  arn_ = 0;
  clear_has_arn();
}
inline ::google::protobuf::int32 UserAgent::arn() const {
  // @@protoc_insertion_point(field_get:gss.message.UserAgent.arn)
  return arn_;
}
inline void UserAgent::set_arn(::google::protobuf::int32 value) {
  set_has_arn();
  arn_ = value;
  // @@protoc_insertion_point(field_set:gss.message.UserAgent.arn)
}

// optional string cuid = 8;
inline bool UserAgent::has_cuid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserAgent::set_has_cuid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserAgent::clear_has_cuid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserAgent::clear_cuid() {
  if (cuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cuid_->clear();
  }
  clear_has_cuid();
}
inline const ::std::string& UserAgent::cuid() const {
  // @@protoc_insertion_point(field_get:gss.message.UserAgent.cuid)
  return *cuid_;
}
inline void UserAgent::set_cuid(const ::std::string& value) {
  set_has_cuid();
  if (cuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cuid_ = new ::std::string;
  }
  cuid_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.UserAgent.cuid)
}
inline void UserAgent::set_cuid(const char* value) {
  set_has_cuid();
  if (cuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cuid_ = new ::std::string;
  }
  cuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.UserAgent.cuid)
}
inline void UserAgent::set_cuid(const char* value, size_t size) {
  set_has_cuid();
  if (cuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cuid_ = new ::std::string;
  }
  cuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.UserAgent.cuid)
}
inline ::std::string* UserAgent::mutable_cuid() {
  set_has_cuid();
  if (cuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.UserAgent.cuid)
  return cuid_;
}
inline ::std::string* UserAgent::release_cuid() {
  clear_has_cuid();
  if (cuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cuid_;
    cuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserAgent::set_allocated_cuid(::std::string* cuid) {
  if (cuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cuid_;
  }
  if (cuid) {
    set_has_cuid();
    cuid_ = cuid;
  } else {
    clear_has_cuid();
    cuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.UserAgent.cuid)
}

// optional string net_type = 9;
inline bool UserAgent::has_net_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserAgent::set_has_net_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserAgent::clear_has_net_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserAgent::clear_net_type() {
  if (net_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_type_->clear();
  }
  clear_has_net_type();
}
inline const ::std::string& UserAgent::net_type() const {
  // @@protoc_insertion_point(field_get:gss.message.UserAgent.net_type)
  return *net_type_;
}
inline void UserAgent::set_net_type(const ::std::string& value) {
  set_has_net_type();
  if (net_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_type_ = new ::std::string;
  }
  net_type_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.UserAgent.net_type)
}
inline void UserAgent::set_net_type(const char* value) {
  set_has_net_type();
  if (net_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_type_ = new ::std::string;
  }
  net_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.UserAgent.net_type)
}
inline void UserAgent::set_net_type(const char* value, size_t size) {
  set_has_net_type();
  if (net_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_type_ = new ::std::string;
  }
  net_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.UserAgent.net_type)
}
inline ::std::string* UserAgent::mutable_net_type() {
  set_has_net_type();
  if (net_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.UserAgent.net_type)
  return net_type_;
}
inline ::std::string* UserAgent::release_net_type() {
  clear_has_net_type();
  if (net_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = net_type_;
    net_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserAgent::set_allocated_net_type(::std::string* net_type) {
  if (net_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete net_type_;
  }
  if (net_type) {
    set_has_net_type();
    net_type_ = net_type;
  } else {
    clear_has_net_type();
    net_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.UserAgent.net_type)
}

// -------------------------------------------------------------------

// sub_url_t

// required string SubURL = 1;
inline bool sub_url_t::has_suburl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sub_url_t::set_has_suburl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sub_url_t::clear_has_suburl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sub_url_t::clear_suburl() {
  if (suburl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suburl_->clear();
  }
  clear_has_suburl();
}
inline const ::std::string& sub_url_t::suburl() const {
  // @@protoc_insertion_point(field_get:gss.message.sub_url_t.SubURL)
  return *suburl_;
}
inline void sub_url_t::set_suburl(const ::std::string& value) {
  set_has_suburl();
  if (suburl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suburl_ = new ::std::string;
  }
  suburl_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.sub_url_t.SubURL)
}
inline void sub_url_t::set_suburl(const char* value) {
  set_has_suburl();
  if (suburl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suburl_ = new ::std::string;
  }
  suburl_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.sub_url_t.SubURL)
}
inline void sub_url_t::set_suburl(const char* value, size_t size) {
  set_has_suburl();
  if (suburl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suburl_ = new ::std::string;
  }
  suburl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.sub_url_t.SubURL)
}
inline ::std::string* sub_url_t::mutable_suburl() {
  set_has_suburl();
  if (suburl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suburl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.sub_url_t.SubURL)
  return suburl_;
}
inline ::std::string* sub_url_t::release_suburl() {
  clear_has_suburl();
  if (suburl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = suburl_;
    suburl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void sub_url_t::set_allocated_suburl(::std::string* suburl) {
  if (suburl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete suburl_;
  }
  if (suburl) {
    set_has_suburl();
    suburl_ = suburl;
  } else {
    clear_has_suburl();
    suburl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.sub_url_t.SubURL)
}

// optional string SubURI = 2;
inline bool sub_url_t::has_suburi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sub_url_t::set_has_suburi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sub_url_t::clear_has_suburi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sub_url_t::clear_suburi() {
  if (suburi_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suburi_->clear();
  }
  clear_has_suburi();
}
inline const ::std::string& sub_url_t::suburi() const {
  // @@protoc_insertion_point(field_get:gss.message.sub_url_t.SubURI)
  return *suburi_;
}
inline void sub_url_t::set_suburi(const ::std::string& value) {
  set_has_suburi();
  if (suburi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suburi_ = new ::std::string;
  }
  suburi_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.sub_url_t.SubURI)
}
inline void sub_url_t::set_suburi(const char* value) {
  set_has_suburi();
  if (suburi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suburi_ = new ::std::string;
  }
  suburi_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.sub_url_t.SubURI)
}
inline void sub_url_t::set_suburi(const char* value, size_t size) {
  set_has_suburi();
  if (suburi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suburi_ = new ::std::string;
  }
  suburi_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.sub_url_t.SubURI)
}
inline ::std::string* sub_url_t::mutable_suburi() {
  set_has_suburi();
  if (suburi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suburi_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.sub_url_t.SubURI)
  return suburi_;
}
inline ::std::string* sub_url_t::release_suburi() {
  clear_has_suburi();
  if (suburi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = suburi_;
    suburi_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void sub_url_t::set_allocated_suburi(::std::string* suburi) {
  if (suburi_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete suburi_;
  }
  if (suburi) {
    set_has_suburi();
    suburi_ = suburi;
  } else {
    clear_has_suburi();
    suburi_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.sub_url_t.SubURI)
}

// optional string SubName = 3;
inline bool sub_url_t::has_subname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sub_url_t::set_has_subname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sub_url_t::clear_has_subname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sub_url_t::clear_subname() {
  if (subname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subname_->clear();
  }
  clear_has_subname();
}
inline const ::std::string& sub_url_t::subname() const {
  // @@protoc_insertion_point(field_get:gss.message.sub_url_t.SubName)
  return *subname_;
}
inline void sub_url_t::set_subname(const ::std::string& value) {
  set_has_subname();
  if (subname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subname_ = new ::std::string;
  }
  subname_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.sub_url_t.SubName)
}
inline void sub_url_t::set_subname(const char* value) {
  set_has_subname();
  if (subname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subname_ = new ::std::string;
  }
  subname_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.sub_url_t.SubName)
}
inline void sub_url_t::set_subname(const char* value, size_t size) {
  set_has_subname();
  if (subname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subname_ = new ::std::string;
  }
  subname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.sub_url_t.SubName)
}
inline ::std::string* sub_url_t::mutable_subname() {
  set_has_subname();
  if (subname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.sub_url_t.SubName)
  return subname_;
}
inline ::std::string* sub_url_t::release_subname() {
  clear_has_subname();
  if (subname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = subname_;
    subname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void sub_url_t::set_allocated_subname(::std::string* subname) {
  if (subname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subname_;
  }
  if (subname) {
    set_has_subname();
    subname_ = subname;
  } else {
    clear_has_subname();
    subname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.sub_url_t.SubName)
}

// optional string SubPath = 4;
inline bool sub_url_t::has_subpath() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sub_url_t::set_has_subpath() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sub_url_t::clear_has_subpath() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sub_url_t::clear_subpath() {
  if (subpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subpath_->clear();
  }
  clear_has_subpath();
}
inline const ::std::string& sub_url_t::subpath() const {
  // @@protoc_insertion_point(field_get:gss.message.sub_url_t.SubPath)
  return *subpath_;
}
inline void sub_url_t::set_subpath(const ::std::string& value) {
  set_has_subpath();
  if (subpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subpath_ = new ::std::string;
  }
  subpath_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.sub_url_t.SubPath)
}
inline void sub_url_t::set_subpath(const char* value) {
  set_has_subpath();
  if (subpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subpath_ = new ::std::string;
  }
  subpath_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.sub_url_t.SubPath)
}
inline void sub_url_t::set_subpath(const char* value, size_t size) {
  set_has_subpath();
  if (subpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subpath_ = new ::std::string;
  }
  subpath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.sub_url_t.SubPath)
}
inline ::std::string* sub_url_t::mutable_subpath() {
  set_has_subpath();
  if (subpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subpath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.sub_url_t.SubPath)
  return subpath_;
}
inline ::std::string* sub_url_t::release_subpath() {
  clear_has_subpath();
  if (subpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = subpath_;
    subpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void sub_url_t::set_allocated_subpath(::std::string* subpath) {
  if (subpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subpath_;
  }
  if (subpath) {
    set_has_subpath();
    subpath_ = subpath;
  } else {
    clear_has_subpath();
    subpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.sub_url_t.SubPath)
}

// optional int32 SiteId = 5;
inline bool sub_url_t::has_siteid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sub_url_t::set_has_siteid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sub_url_t::clear_has_siteid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sub_url_t::clear_siteid() {
  siteid_ = 0;
  clear_has_siteid();
}
inline ::google::protobuf::int32 sub_url_t::siteid() const {
  // @@protoc_insertion_point(field_get:gss.message.sub_url_t.SiteId)
  return siteid_;
}
inline void sub_url_t::set_siteid(::google::protobuf::int32 value) {
  set_has_siteid();
  siteid_ = value;
  // @@protoc_insertion_point(field_set:gss.message.sub_url_t.SiteId)
}

// optional string SubEx = 6;
inline bool sub_url_t::has_subex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sub_url_t::set_has_subex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sub_url_t::clear_has_subex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sub_url_t::clear_subex() {
  if (subex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subex_->clear();
  }
  clear_has_subex();
}
inline const ::std::string& sub_url_t::subex() const {
  // @@protoc_insertion_point(field_get:gss.message.sub_url_t.SubEx)
  return *subex_;
}
inline void sub_url_t::set_subex(const ::std::string& value) {
  set_has_subex();
  if (subex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subex_ = new ::std::string;
  }
  subex_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.sub_url_t.SubEx)
}
inline void sub_url_t::set_subex(const char* value) {
  set_has_subex();
  if (subex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subex_ = new ::std::string;
  }
  subex_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.sub_url_t.SubEx)
}
inline void sub_url_t::set_subex(const char* value, size_t size) {
  set_has_subex();
  if (subex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subex_ = new ::std::string;
  }
  subex_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.sub_url_t.SubEx)
}
inline ::std::string* sub_url_t::mutable_subex() {
  set_has_subex();
  if (subex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subex_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.sub_url_t.SubEx)
  return subex_;
}
inline ::std::string* sub_url_t::release_subex() {
  clear_has_subex();
  if (subex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = subex_;
    subex_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void sub_url_t::set_allocated_subex(::std::string* subex) {
  if (subex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subex_;
  }
  if (subex) {
    set_has_subex();
    subex_ = subex;
  } else {
    clear_has_subex();
    subex_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.sub_url_t.SubEx)
}

// -------------------------------------------------------------------

// gss_res_t

// required string ResultURL = 2;
inline bool gss_res_t::has_resulturl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gss_res_t::set_has_resulturl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gss_res_t::clear_has_resulturl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gss_res_t::clear_resulturl() {
  if (resulturl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulturl_->clear();
  }
  clear_has_resulturl();
}
inline const ::std::string& gss_res_t::resulturl() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_res_t.ResultURL)
  return *resulturl_;
}
inline void gss_res_t::set_resulturl(const ::std::string& value) {
  set_has_resulturl();
  if (resulturl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulturl_ = new ::std::string;
  }
  resulturl_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.gss_res_t.ResultURL)
}
inline void gss_res_t::set_resulturl(const char* value) {
  set_has_resulturl();
  if (resulturl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulturl_ = new ::std::string;
  }
  resulturl_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.gss_res_t.ResultURL)
}
inline void gss_res_t::set_resulturl(const char* value, size_t size) {
  set_has_resulturl();
  if (resulturl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulturl_ = new ::std::string;
  }
  resulturl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.gss_res_t.ResultURL)
}
inline ::std::string* gss_res_t::mutable_resulturl() {
  set_has_resulturl();
  if (resulturl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resulturl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.gss_res_t.ResultURL)
  return resulturl_;
}
inline ::std::string* gss_res_t::release_resulturl() {
  clear_has_resulturl();
  if (resulturl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resulturl_;
    resulturl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void gss_res_t::set_allocated_resulturl(::std::string* resulturl) {
  if (resulturl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resulturl_;
  }
  if (resulturl) {
    set_has_resulturl();
    resulturl_ = resulturl;
  } else {
    clear_has_resulturl();
    resulturl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.gss_res_t.ResultURL)
}

// optional string Display = 3;
inline bool gss_res_t::has_display() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gss_res_t::set_has_display() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gss_res_t::clear_has_display() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gss_res_t::clear_display() {
  if (display_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_->clear();
  }
  clear_has_display();
}
inline const ::std::string& gss_res_t::display() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_res_t.Display)
  return *display_;
}
inline void gss_res_t::set_display(const ::std::string& value) {
  set_has_display();
  if (display_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_ = new ::std::string;
  }
  display_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.gss_res_t.Display)
}
inline void gss_res_t::set_display(const char* value) {
  set_has_display();
  if (display_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_ = new ::std::string;
  }
  display_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.gss_res_t.Display)
}
inline void gss_res_t::set_display(const char* value, size_t size) {
  set_has_display();
  if (display_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_ = new ::std::string;
  }
  display_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.gss_res_t.Display)
}
inline ::std::string* gss_res_t::mutable_display() {
  set_has_display();
  if (display_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.gss_res_t.Display)
  return display_;
}
inline ::std::string* gss_res_t::release_display() {
  clear_has_display();
  if (display_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = display_;
    display_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void gss_res_t::set_allocated_display(::std::string* display) {
  if (display_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete display_;
  }
  if (display) {
    set_has_display();
    display_ = display;
  } else {
    clear_has_display();
    display_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.gss_res_t.Display)
}

// required int32 Weight = 4;
inline bool gss_res_t::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gss_res_t::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gss_res_t::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gss_res_t::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline ::google::protobuf::int32 gss_res_t::weight() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_res_t.Weight)
  return weight_;
}
inline void gss_res_t::set_weight(::google::protobuf::int32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_res_t.Weight)
}

// optional int32 Sort = 5;
inline bool gss_res_t::has_sort() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gss_res_t::set_has_sort() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gss_res_t::clear_has_sort() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gss_res_t::clear_sort() {
  sort_ = 0;
  clear_has_sort();
}
inline ::google::protobuf::int32 gss_res_t::sort() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_res_t.Sort)
  return sort_;
}
inline void gss_res_t::set_sort(::google::protobuf::int32 value) {
  set_has_sort();
  sort_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_res_t.Sort)
}

// optional int32 SrcID = 6;
inline bool gss_res_t::has_srcid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gss_res_t::set_has_srcid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gss_res_t::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gss_res_t::clear_srcid() {
  srcid_ = 0;
  clear_has_srcid();
}
inline ::google::protobuf::int32 gss_res_t::srcid() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_res_t.SrcID)
  return srcid_;
}
inline void gss_res_t::set_srcid(::google::protobuf::int32 value) {
  set_has_srcid();
  srcid_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_res_t.SrcID)
}

// required int32 TimingNeed = 7;
inline bool gss_res_t::has_timingneed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gss_res_t::set_has_timingneed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gss_res_t::clear_has_timingneed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gss_res_t::clear_timingneed() {
  timingneed_ = 0;
  clear_has_timingneed();
}
inline ::google::protobuf::int32 gss_res_t::timingneed() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_res_t.TimingNeed)
  return timingneed_;
}
inline void gss_res_t::set_timingneed(::google::protobuf::int32 value) {
  set_has_timingneed();
  timingneed_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_res_t.TimingNeed)
}

// optional uint32 WiseStrategyFlag = 8;
inline bool gss_res_t::has_wisestrategyflag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gss_res_t::set_has_wisestrategyflag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gss_res_t::clear_has_wisestrategyflag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gss_res_t::clear_wisestrategyflag() {
  wisestrategyflag_ = 0u;
  clear_has_wisestrategyflag();
}
inline ::google::protobuf::uint32 gss_res_t::wisestrategyflag() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_res_t.WiseStrategyFlag)
  return wisestrategyflag_;
}
inline void gss_res_t::set_wisestrategyflag(::google::protobuf::uint32 value) {
  set_has_wisestrategyflag();
  wisestrategyflag_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_res_t.WiseStrategyFlag)
}

// optional int32 Degree = 9;
inline bool gss_res_t::has_degree() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gss_res_t::set_has_degree() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gss_res_t::clear_has_degree() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gss_res_t::clear_degree() {
  degree_ = 0;
  clear_has_degree();
}
inline ::google::protobuf::int32 gss_res_t::degree() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_res_t.Degree)
  return degree_;
}
inline void gss_res_t::set_degree(::google::protobuf::int32 value) {
  set_has_degree();
  degree_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_res_t.Degree)
}

// optional int32 ClickNeed = 10;
inline bool gss_res_t::has_clickneed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void gss_res_t::set_has_clickneed() {
  _has_bits_[0] |= 0x00000100u;
}
inline void gss_res_t::clear_has_clickneed() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void gss_res_t::clear_clickneed() {
  clickneed_ = 0;
  clear_has_clickneed();
}
inline ::google::protobuf::int32 gss_res_t::clickneed() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_res_t.ClickNeed)
  return clickneed_;
}
inline void gss_res_t::set_clickneed(::google::protobuf::int32 value) {
  set_has_clickneed();
  clickneed_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_res_t.ClickNeed)
}

// optional int32 StrategyInfo = 11;
inline bool gss_res_t::has_strategyinfo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void gss_res_t::set_has_strategyinfo() {
  _has_bits_[0] |= 0x00000200u;
}
inline void gss_res_t::clear_has_strategyinfo() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void gss_res_t::clear_strategyinfo() {
  strategyinfo_ = 0;
  clear_has_strategyinfo();
}
inline ::google::protobuf::int32 gss_res_t::strategyinfo() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_res_t.StrategyInfo)
  return strategyinfo_;
}
inline void gss_res_t::set_strategyinfo(::google::protobuf::int32 value) {
  set_has_strategyinfo();
  strategyinfo_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_res_t.StrategyInfo)
}

// optional int32 SpReqType = 12;
inline bool gss_res_t::has_spreqtype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void gss_res_t::set_has_spreqtype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void gss_res_t::clear_has_spreqtype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void gss_res_t::clear_spreqtype() {
  spreqtype_ = 0;
  clear_has_spreqtype();
}
inline ::google::protobuf::int32 gss_res_t::spreqtype() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_res_t.SpReqType)
  return spreqtype_;
}
inline void gss_res_t::set_spreqtype(::google::protobuf::int32 value) {
  set_has_spreqtype();
  spreqtype_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_res_t.SpReqType)
}

// optional string UriKey = 13;
inline bool gss_res_t::has_urikey() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void gss_res_t::set_has_urikey() {
  _has_bits_[0] |= 0x00000800u;
}
inline void gss_res_t::clear_has_urikey() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void gss_res_t::clear_urikey() {
  if (urikey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urikey_->clear();
  }
  clear_has_urikey();
}
inline const ::std::string& gss_res_t::urikey() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_res_t.UriKey)
  return *urikey_;
}
inline void gss_res_t::set_urikey(const ::std::string& value) {
  set_has_urikey();
  if (urikey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urikey_ = new ::std::string;
  }
  urikey_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.gss_res_t.UriKey)
}
inline void gss_res_t::set_urikey(const char* value) {
  set_has_urikey();
  if (urikey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urikey_ = new ::std::string;
  }
  urikey_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.gss_res_t.UriKey)
}
inline void gss_res_t::set_urikey(const char* value, size_t size) {
  set_has_urikey();
  if (urikey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urikey_ = new ::std::string;
  }
  urikey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.gss_res_t.UriKey)
}
inline ::std::string* gss_res_t::mutable_urikey() {
  set_has_urikey();
  if (urikey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urikey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.gss_res_t.UriKey)
  return urikey_;
}
inline ::std::string* gss_res_t::release_urikey() {
  clear_has_urikey();
  if (urikey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = urikey_;
    urikey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void gss_res_t::set_allocated_urikey(::std::string* urikey) {
  if (urikey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete urikey_;
  }
  if (urikey) {
    set_has_urikey();
    urikey_ = urikey;
  } else {
    clear_has_urikey();
    urikey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.gss_res_t.UriKey)
}

// optional string EntityName = 14;
inline bool gss_res_t::has_entityname() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void gss_res_t::set_has_entityname() {
  _has_bits_[0] |= 0x00001000u;
}
inline void gss_res_t::clear_has_entityname() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void gss_res_t::clear_entityname() {
  if (entityname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entityname_->clear();
  }
  clear_has_entityname();
}
inline const ::std::string& gss_res_t::entityname() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_res_t.EntityName)
  return *entityname_;
}
inline void gss_res_t::set_entityname(const ::std::string& value) {
  set_has_entityname();
  if (entityname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entityname_ = new ::std::string;
  }
  entityname_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.gss_res_t.EntityName)
}
inline void gss_res_t::set_entityname(const char* value) {
  set_has_entityname();
  if (entityname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entityname_ = new ::std::string;
  }
  entityname_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.gss_res_t.EntityName)
}
inline void gss_res_t::set_entityname(const char* value, size_t size) {
  set_has_entityname();
  if (entityname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entityname_ = new ::std::string;
  }
  entityname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.gss_res_t.EntityName)
}
inline ::std::string* gss_res_t::mutable_entityname() {
  set_has_entityname();
  if (entityname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entityname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.gss_res_t.EntityName)
  return entityname_;
}
inline ::std::string* gss_res_t::release_entityname() {
  clear_has_entityname();
  if (entityname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = entityname_;
    entityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void gss_res_t::set_allocated_entityname(::std::string* entityname) {
  if (entityname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete entityname_;
  }
  if (entityname) {
    set_has_entityname();
    entityname_ = entityname;
  } else {
    clear_has_entityname();
    entityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.gss_res_t.EntityName)
}

// repeated .gss.message.sub_url_t SubResult = 15;
inline int gss_res_t::subresult_size() const {
  return subresult_.size();
}
inline void gss_res_t::clear_subresult() {
  subresult_.Clear();
}
inline const ::gss::message::sub_url_t& gss_res_t::subresult(int index) const {
  // @@protoc_insertion_point(field_get:gss.message.gss_res_t.SubResult)
  return subresult_.Get(index);
}
inline ::gss::message::sub_url_t* gss_res_t::mutable_subresult(int index) {
  // @@protoc_insertion_point(field_mutable:gss.message.gss_res_t.SubResult)
  return subresult_.Mutable(index);
}
inline ::gss::message::sub_url_t* gss_res_t::add_subresult() {
  // @@protoc_insertion_point(field_add:gss.message.gss_res_t.SubResult)
  return subresult_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gss::message::sub_url_t >&
gss_res_t::subresult() const {
  // @@protoc_insertion_point(field_list:gss.message.gss_res_t.SubResult)
  return subresult_;
}
inline ::google::protobuf::RepeatedPtrField< ::gss::message::sub_url_t >*
gss_res_t::mutable_subresult() {
  // @@protoc_insertion_point(field_mutable_list:gss.message.gss_res_t.SubResult)
  return &subresult_;
}

// optional int32 SubResNum = 16;
inline bool gss_res_t::has_subresnum() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void gss_res_t::set_has_subresnum() {
  _has_bits_[0] |= 0x00004000u;
}
inline void gss_res_t::clear_has_subresnum() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void gss_res_t::clear_subresnum() {
  subresnum_ = 0;
  clear_has_subresnum();
}
inline ::google::protobuf::int32 gss_res_t::subresnum() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_res_t.SubResNum)
  return subresnum_;
}
inline void gss_res_t::set_subresnum(::google::protobuf::int32 value) {
  set_has_subresnum();
  subresnum_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_res_t.SubResNum)
}

// optional string DisplayLog = 17;
inline bool gss_res_t::has_displaylog() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void gss_res_t::set_has_displaylog() {
  _has_bits_[0] |= 0x00008000u;
}
inline void gss_res_t::clear_has_displaylog() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void gss_res_t::clear_displaylog() {
  if (displaylog_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displaylog_->clear();
  }
  clear_has_displaylog();
}
inline const ::std::string& gss_res_t::displaylog() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_res_t.DisplayLog)
  return *displaylog_;
}
inline void gss_res_t::set_displaylog(const ::std::string& value) {
  set_has_displaylog();
  if (displaylog_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displaylog_ = new ::std::string;
  }
  displaylog_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.gss_res_t.DisplayLog)
}
inline void gss_res_t::set_displaylog(const char* value) {
  set_has_displaylog();
  if (displaylog_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displaylog_ = new ::std::string;
  }
  displaylog_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.gss_res_t.DisplayLog)
}
inline void gss_res_t::set_displaylog(const char* value, size_t size) {
  set_has_displaylog();
  if (displaylog_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displaylog_ = new ::std::string;
  }
  displaylog_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.gss_res_t.DisplayLog)
}
inline ::std::string* gss_res_t::mutable_displaylog() {
  set_has_displaylog();
  if (displaylog_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displaylog_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.gss_res_t.DisplayLog)
  return displaylog_;
}
inline ::std::string* gss_res_t::release_displaylog() {
  clear_has_displaylog();
  if (displaylog_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = displaylog_;
    displaylog_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void gss_res_t::set_allocated_displaylog(::std::string* displaylog) {
  if (displaylog_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete displaylog_;
  }
  if (displaylog) {
    set_has_displaylog();
    displaylog_ = displaylog;
  } else {
    clear_has_displaylog();
    displaylog_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.gss_res_t.DisplayLog)
}

// optional bytes DisplayData = 18;
inline bool gss_res_t::has_displaydata() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void gss_res_t::set_has_displaydata() {
  _has_bits_[0] |= 0x00010000u;
}
inline void gss_res_t::clear_has_displaydata() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void gss_res_t::clear_displaydata() {
  if (displaydata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displaydata_->clear();
  }
  clear_has_displaydata();
}
inline const ::std::string& gss_res_t::displaydata() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_res_t.DisplayData)
  return *displaydata_;
}
inline void gss_res_t::set_displaydata(const ::std::string& value) {
  set_has_displaydata();
  if (displaydata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displaydata_ = new ::std::string;
  }
  displaydata_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.gss_res_t.DisplayData)
}
inline void gss_res_t::set_displaydata(const char* value) {
  set_has_displaydata();
  if (displaydata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displaydata_ = new ::std::string;
  }
  displaydata_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.gss_res_t.DisplayData)
}
inline void gss_res_t::set_displaydata(const void* value, size_t size) {
  set_has_displaydata();
  if (displaydata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displaydata_ = new ::std::string;
  }
  displaydata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.gss_res_t.DisplayData)
}
inline ::std::string* gss_res_t::mutable_displaydata() {
  set_has_displaydata();
  if (displaydata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displaydata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.gss_res_t.DisplayData)
  return displaydata_;
}
inline ::std::string* gss_res_t::release_displaydata() {
  clear_has_displaydata();
  if (displaydata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = displaydata_;
    displaydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void gss_res_t::set_allocated_displaydata(::std::string* displaydata) {
  if (displaydata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete displaydata_;
  }
  if (displaydata) {
    set_has_displaydata();
    displaydata_ = displaydata;
  } else {
    clear_has_displaydata();
    displaydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.gss_res_t.DisplayData)
}

// optional uint32 ResType = 19;
inline bool gss_res_t::has_restype() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void gss_res_t::set_has_restype() {
  _has_bits_[0] |= 0x00020000u;
}
inline void gss_res_t::clear_has_restype() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void gss_res_t::clear_restype() {
  restype_ = 0u;
  clear_has_restype();
}
inline ::google::protobuf::uint32 gss_res_t::restype() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_res_t.ResType)
  return restype_;
}
inline void gss_res_t::set_restype(::google::protobuf::uint32 value) {
  set_has_restype();
  restype_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_res_t.ResType)
}

// optional string Title = 20;
inline bool gss_res_t::has_title() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void gss_res_t::set_has_title() {
  _has_bits_[0] |= 0x00040000u;
}
inline void gss_res_t::clear_has_title() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void gss_res_t::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& gss_res_t::title() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_res_t.Title)
  return *title_;
}
inline void gss_res_t::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.gss_res_t.Title)
}
inline void gss_res_t::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.gss_res_t.Title)
}
inline void gss_res_t::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.gss_res_t.Title)
}
inline ::std::string* gss_res_t::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.gss_res_t.Title)
  return title_;
}
inline ::std::string* gss_res_t::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void gss_res_t::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.gss_res_t.Title)
}

// optional int32 RecoverCacheTime = 21;
inline bool gss_res_t::has_recovercachetime() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void gss_res_t::set_has_recovercachetime() {
  _has_bits_[0] |= 0x00080000u;
}
inline void gss_res_t::clear_has_recovercachetime() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void gss_res_t::clear_recovercachetime() {
  recovercachetime_ = 0;
  clear_has_recovercachetime();
}
inline ::google::protobuf::int32 gss_res_t::recovercachetime() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_res_t.RecoverCacheTime)
  return recovercachetime_;
}
inline void gss_res_t::set_recovercachetime(::google::protobuf::int32 value) {
  set_has_recovercachetime();
  recovercachetime_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_res_t.RecoverCacheTime)
}

// -------------------------------------------------------------------

// item_t

// required string title = 1;
inline bool item_t::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void item_t::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void item_t::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void item_t::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& item_t::title() const {
  // @@protoc_insertion_point(field_get:gss.message.item_t.title)
  return *title_;
}
inline void item_t::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.item_t.title)
}
inline void item_t::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.item_t.title)
}
inline void item_t::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.item_t.title)
}
inline ::std::string* item_t::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.item_t.title)
  return title_;
}
inline ::std::string* item_t::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void item_t::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.item_t.title)
}

// required string content = 2;
inline bool item_t::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void item_t::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void item_t::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void item_t::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& item_t::content() const {
  // @@protoc_insertion_point(field_get:gss.message.item_t.content)
  return *content_;
}
inline void item_t::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.item_t.content)
}
inline void item_t::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.item_t.content)
}
inline void item_t::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.item_t.content)
}
inline ::std::string* item_t::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.item_t.content)
  return content_;
}
inline ::std::string* item_t::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void item_t::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.item_t.content)
}

// required int32 parent = 3;
inline bool item_t::has_parent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void item_t::set_has_parent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void item_t::clear_has_parent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void item_t::clear_parent() {
  parent_ = 0;
  clear_has_parent();
}
inline ::google::protobuf::int32 item_t::parent() const {
  // @@protoc_insertion_point(field_get:gss.message.item_t.parent)
  return parent_;
}
inline void item_t::set_parent(::google::protobuf::int32 value) {
  set_has_parent();
  parent_ = value;
  // @@protoc_insertion_point(field_set:gss.message.item_t.parent)
}

// -------------------------------------------------------------------

// debug_info_t

// optional bytes idebug = 1;
inline bool debug_info_t::has_idebug() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void debug_info_t::set_has_idebug() {
  _has_bits_[0] |= 0x00000001u;
}
inline void debug_info_t::clear_has_idebug() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void debug_info_t::clear_idebug() {
  if (idebug_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idebug_->clear();
  }
  clear_has_idebug();
}
inline const ::std::string& debug_info_t::idebug() const {
  // @@protoc_insertion_point(field_get:gss.message.debug_info_t.idebug)
  return *idebug_;
}
inline void debug_info_t::set_idebug(const ::std::string& value) {
  set_has_idebug();
  if (idebug_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idebug_ = new ::std::string;
  }
  idebug_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.debug_info_t.idebug)
}
inline void debug_info_t::set_idebug(const char* value) {
  set_has_idebug();
  if (idebug_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idebug_ = new ::std::string;
  }
  idebug_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.debug_info_t.idebug)
}
inline void debug_info_t::set_idebug(const void* value, size_t size) {
  set_has_idebug();
  if (idebug_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idebug_ = new ::std::string;
  }
  idebug_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.debug_info_t.idebug)
}
inline ::std::string* debug_info_t::mutable_idebug() {
  set_has_idebug();
  if (idebug_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idebug_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.debug_info_t.idebug)
  return idebug_;
}
inline ::std::string* debug_info_t::release_idebug() {
  clear_has_idebug();
  if (idebug_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = idebug_;
    idebug_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void debug_info_t::set_allocated_idebug(::std::string* idebug) {
  if (idebug_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete idebug_;
  }
  if (idebug) {
    set_has_idebug();
    idebug_ = idebug;
  } else {
    clear_has_idebug();
    idebug_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.debug_info_t.idebug)
}

// repeated string item_info = 2;
inline int debug_info_t::item_info_size() const {
  return item_info_.size();
}
inline void debug_info_t::clear_item_info() {
  item_info_.Clear();
}
inline const ::std::string& debug_info_t::item_info(int index) const {
  // @@protoc_insertion_point(field_get:gss.message.debug_info_t.item_info)
  return item_info_.Get(index);
}
inline ::std::string* debug_info_t::mutable_item_info(int index) {
  // @@protoc_insertion_point(field_mutable:gss.message.debug_info_t.item_info)
  return item_info_.Mutable(index);
}
inline void debug_info_t::set_item_info(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gss.message.debug_info_t.item_info)
  item_info_.Mutable(index)->assign(value);
}
inline void debug_info_t::set_item_info(int index, const char* value) {
  item_info_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.debug_info_t.item_info)
}
inline void debug_info_t::set_item_info(int index, const char* value, size_t size) {
  item_info_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.debug_info_t.item_info)
}
inline ::std::string* debug_info_t::add_item_info() {
  return item_info_.Add();
}
inline void debug_info_t::add_item_info(const ::std::string& value) {
  item_info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gss.message.debug_info_t.item_info)
}
inline void debug_info_t::add_item_info(const char* value) {
  item_info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gss.message.debug_info_t.item_info)
}
inline void debug_info_t::add_item_info(const char* value, size_t size) {
  item_info_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gss.message.debug_info_t.item_info)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
debug_info_t::item_info() const {
  // @@protoc_insertion_point(field_list:gss.message.debug_info_t.item_info)
  return item_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
debug_info_t::mutable_item_info() {
  // @@protoc_insertion_point(field_mutable_list:gss.message.debug_info_t.item_info)
  return &item_info_;
}

// repeated string anchor_info = 3;
inline int debug_info_t::anchor_info_size() const {
  return anchor_info_.size();
}
inline void debug_info_t::clear_anchor_info() {
  anchor_info_.Clear();
}
inline const ::std::string& debug_info_t::anchor_info(int index) const {
  // @@protoc_insertion_point(field_get:gss.message.debug_info_t.anchor_info)
  return anchor_info_.Get(index);
}
inline ::std::string* debug_info_t::mutable_anchor_info(int index) {
  // @@protoc_insertion_point(field_mutable:gss.message.debug_info_t.anchor_info)
  return anchor_info_.Mutable(index);
}
inline void debug_info_t::set_anchor_info(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gss.message.debug_info_t.anchor_info)
  anchor_info_.Mutable(index)->assign(value);
}
inline void debug_info_t::set_anchor_info(int index, const char* value) {
  anchor_info_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.debug_info_t.anchor_info)
}
inline void debug_info_t::set_anchor_info(int index, const char* value, size_t size) {
  anchor_info_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.debug_info_t.anchor_info)
}
inline ::std::string* debug_info_t::add_anchor_info() {
  return anchor_info_.Add();
}
inline void debug_info_t::add_anchor_info(const ::std::string& value) {
  anchor_info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gss.message.debug_info_t.anchor_info)
}
inline void debug_info_t::add_anchor_info(const char* value) {
  anchor_info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gss.message.debug_info_t.anchor_info)
}
inline void debug_info_t::add_anchor_info(const char* value, size_t size) {
  anchor_info_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gss.message.debug_info_t.anchor_info)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
debug_info_t::anchor_info() const {
  // @@protoc_insertion_point(field_list:gss.message.debug_info_t.anchor_info)
  return anchor_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
debug_info_t::mutable_anchor_info() {
  // @@protoc_insertion_point(field_mutable_list:gss.message.debug_info_t.anchor_info)
  return &anchor_info_;
}

// repeated .gss.message.item_t debug_info = 4 [deprecated = true];
inline int debug_info_t::debug_info_size() const {
  return debug_info_.size();
}
inline void debug_info_t::clear_debug_info() {
  debug_info_.Clear();
}
inline const ::gss::message::item_t& debug_info_t::debug_info(int index) const {
  // @@protoc_insertion_point(field_get:gss.message.debug_info_t.debug_info)
  return debug_info_.Get(index);
}
inline ::gss::message::item_t* debug_info_t::mutable_debug_info(int index) {
  // @@protoc_insertion_point(field_mutable:gss.message.debug_info_t.debug_info)
  return debug_info_.Mutable(index);
}
inline ::gss::message::item_t* debug_info_t::add_debug_info() {
  // @@protoc_insertion_point(field_add:gss.message.debug_info_t.debug_info)
  return debug_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gss::message::item_t >&
debug_info_t::debug_info() const {
  // @@protoc_insertion_point(field_list:gss.message.debug_info_t.debug_info)
  return debug_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::gss::message::item_t >*
debug_info_t::mutable_debug_info() {
  // @@protoc_insertion_point(field_mutable_list:gss.message.debug_info_t.debug_info)
  return &debug_info_;
}

// -------------------------------------------------------------------

// gss_us_res_t

// required int32 ResultCode = 1;
inline bool gss_us_res_t::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gss_us_res_t::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gss_us_res_t::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gss_us_res_t::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::google::protobuf::int32 gss_us_res_t::resultcode() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_us_res_t.ResultCode)
  return resultcode_;
}
inline void gss_us_res_t::set_resultcode(::google::protobuf::int32 value) {
  set_has_resultcode();
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_us_res_t.ResultCode)
}

// required uint64 QueryID = 2;
inline bool gss_us_res_t::has_queryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gss_us_res_t::set_has_queryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gss_us_res_t::clear_has_queryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gss_us_res_t::clear_queryid() {
  queryid_ = GOOGLE_ULONGLONG(0);
  clear_has_queryid();
}
inline ::google::protobuf::uint64 gss_us_res_t::queryid() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_us_res_t.QueryID)
  return queryid_;
}
inline void gss_us_res_t::set_queryid(::google::protobuf::uint64 value) {
  set_has_queryid();
  queryid_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_us_res_t.QueryID)
}

// repeated .gss.message.gss_res_t Result = 3;
inline int gss_us_res_t::result_size() const {
  return result_.size();
}
inline void gss_us_res_t::clear_result() {
  result_.Clear();
}
inline const ::gss::message::gss_res_t& gss_us_res_t::result(int index) const {
  // @@protoc_insertion_point(field_get:gss.message.gss_us_res_t.Result)
  return result_.Get(index);
}
inline ::gss::message::gss_res_t* gss_us_res_t::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:gss.message.gss_us_res_t.Result)
  return result_.Mutable(index);
}
inline ::gss::message::gss_res_t* gss_us_res_t::add_result() {
  // @@protoc_insertion_point(field_add:gss.message.gss_us_res_t.Result)
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gss::message::gss_res_t >&
gss_us_res_t::result() const {
  // @@protoc_insertion_point(field_list:gss.message.gss_us_res_t.Result)
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::gss::message::gss_res_t >*
gss_us_res_t::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:gss.message.gss_us_res_t.Result)
  return &result_;
}

// required uint32 ResultNum = 4;
inline bool gss_us_res_t::has_resultnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gss_us_res_t::set_has_resultnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gss_us_res_t::clear_has_resultnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gss_us_res_t::clear_resultnum() {
  resultnum_ = 0u;
  clear_has_resultnum();
}
inline ::google::protobuf::uint32 gss_us_res_t::resultnum() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_us_res_t.ResultNum)
  return resultnum_;
}
inline void gss_us_res_t::set_resultnum(::google::protobuf::uint32 value) {
  set_has_resultnum();
  resultnum_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_us_res_t.ResultNum)
}

// optional .gss.message.debug_info_t info = 5;
inline bool gss_us_res_t::has_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gss_us_res_t::set_has_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gss_us_res_t::clear_has_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gss_us_res_t::clear_info() {
  if (info_ != NULL) info_->::gss::message::debug_info_t::Clear();
  clear_has_info();
}
inline const ::gss::message::debug_info_t& gss_us_res_t::info() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_us_res_t.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::gss::message::debug_info_t* gss_us_res_t::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::gss::message::debug_info_t;
  // @@protoc_insertion_point(field_mutable:gss.message.gss_us_res_t.info)
  return info_;
}
inline ::gss::message::debug_info_t* gss_us_res_t::release_info() {
  clear_has_info();
  ::gss::message::debug_info_t* temp = info_;
  info_ = NULL;
  return temp;
}
inline void gss_us_res_t::set_allocated_info(::gss::message::debug_info_t* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.gss_us_res_t.info)
}

// optional int32 bfe_cached_time = 6;
inline bool gss_us_res_t::has_bfe_cached_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gss_us_res_t::set_has_bfe_cached_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gss_us_res_t::clear_has_bfe_cached_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gss_us_res_t::clear_bfe_cached_time() {
  bfe_cached_time_ = 0;
  clear_has_bfe_cached_time();
}
inline ::google::protobuf::int32 gss_us_res_t::bfe_cached_time() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_us_res_t.bfe_cached_time)
  return bfe_cached_time_;
}
inline void gss_us_res_t::set_bfe_cached_time(::google::protobuf::int32 value) {
  set_has_bfe_cached_time();
  bfe_cached_time_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_us_res_t.bfe_cached_time)
}

// optional int32 bfe_cached_islocate = 7;
inline bool gss_us_res_t::has_bfe_cached_islocate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gss_us_res_t::set_has_bfe_cached_islocate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gss_us_res_t::clear_has_bfe_cached_islocate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gss_us_res_t::clear_bfe_cached_islocate() {
  bfe_cached_islocate_ = 0;
  clear_has_bfe_cached_islocate();
}
inline ::google::protobuf::int32 gss_us_res_t::bfe_cached_islocate() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_us_res_t.bfe_cached_islocate)
  return bfe_cached_islocate_;
}
inline void gss_us_res_t::set_bfe_cached_islocate(::google::protobuf::int32 value) {
  set_has_bfe_cached_islocate();
  bfe_cached_islocate_ = value;
  // @@protoc_insertion_point(field_set:gss.message.gss_us_res_t.bfe_cached_islocate)
}

// optional bytes disp_data_url_ex = 8;
inline bool gss_us_res_t::has_disp_data_url_ex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gss_us_res_t::set_has_disp_data_url_ex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gss_us_res_t::clear_has_disp_data_url_ex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gss_us_res_t::clear_disp_data_url_ex() {
  if (disp_data_url_ex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    disp_data_url_ex_->clear();
  }
  clear_has_disp_data_url_ex();
}
inline const ::std::string& gss_us_res_t::disp_data_url_ex() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_us_res_t.disp_data_url_ex)
  return *disp_data_url_ex_;
}
inline void gss_us_res_t::set_disp_data_url_ex(const ::std::string& value) {
  set_has_disp_data_url_ex();
  if (disp_data_url_ex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    disp_data_url_ex_ = new ::std::string;
  }
  disp_data_url_ex_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.gss_us_res_t.disp_data_url_ex)
}
inline void gss_us_res_t::set_disp_data_url_ex(const char* value) {
  set_has_disp_data_url_ex();
  if (disp_data_url_ex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    disp_data_url_ex_ = new ::std::string;
  }
  disp_data_url_ex_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.gss_us_res_t.disp_data_url_ex)
}
inline void gss_us_res_t::set_disp_data_url_ex(const void* value, size_t size) {
  set_has_disp_data_url_ex();
  if (disp_data_url_ex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    disp_data_url_ex_ = new ::std::string;
  }
  disp_data_url_ex_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.gss_us_res_t.disp_data_url_ex)
}
inline ::std::string* gss_us_res_t::mutable_disp_data_url_ex() {
  set_has_disp_data_url_ex();
  if (disp_data_url_ex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    disp_data_url_ex_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.gss_us_res_t.disp_data_url_ex)
  return disp_data_url_ex_;
}
inline ::std::string* gss_us_res_t::release_disp_data_url_ex() {
  clear_has_disp_data_url_ex();
  if (disp_data_url_ex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = disp_data_url_ex_;
    disp_data_url_ex_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void gss_us_res_t::set_allocated_disp_data_url_ex(::std::string* disp_data_url_ex) {
  if (disp_data_url_ex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete disp_data_url_ex_;
  }
  if (disp_data_url_ex) {
    set_has_disp_data_url_ex();
    disp_data_url_ex_ = disp_data_url_ex;
  } else {
    clear_has_disp_data_url_ex();
    disp_data_url_ex_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.gss_us_res_t.disp_data_url_ex)
}

// optional bytes disp_data_query_ex = 9;
inline bool gss_us_res_t::has_disp_data_query_ex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void gss_us_res_t::set_has_disp_data_query_ex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void gss_us_res_t::clear_has_disp_data_query_ex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void gss_us_res_t::clear_disp_data_query_ex() {
  if (disp_data_query_ex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    disp_data_query_ex_->clear();
  }
  clear_has_disp_data_query_ex();
}
inline const ::std::string& gss_us_res_t::disp_data_query_ex() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_us_res_t.disp_data_query_ex)
  return *disp_data_query_ex_;
}
inline void gss_us_res_t::set_disp_data_query_ex(const ::std::string& value) {
  set_has_disp_data_query_ex();
  if (disp_data_query_ex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    disp_data_query_ex_ = new ::std::string;
  }
  disp_data_query_ex_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.gss_us_res_t.disp_data_query_ex)
}
inline void gss_us_res_t::set_disp_data_query_ex(const char* value) {
  set_has_disp_data_query_ex();
  if (disp_data_query_ex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    disp_data_query_ex_ = new ::std::string;
  }
  disp_data_query_ex_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.gss_us_res_t.disp_data_query_ex)
}
inline void gss_us_res_t::set_disp_data_query_ex(const void* value, size_t size) {
  set_has_disp_data_query_ex();
  if (disp_data_query_ex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    disp_data_query_ex_ = new ::std::string;
  }
  disp_data_query_ex_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.gss_us_res_t.disp_data_query_ex)
}
inline ::std::string* gss_us_res_t::mutable_disp_data_query_ex() {
  set_has_disp_data_query_ex();
  if (disp_data_query_ex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    disp_data_query_ex_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.gss_us_res_t.disp_data_query_ex)
  return disp_data_query_ex_;
}
inline ::std::string* gss_us_res_t::release_disp_data_query_ex() {
  clear_has_disp_data_query_ex();
  if (disp_data_query_ex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = disp_data_query_ex_;
    disp_data_query_ex_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void gss_us_res_t::set_allocated_disp_data_query_ex(::std::string* disp_data_query_ex) {
  if (disp_data_query_ex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete disp_data_query_ex_;
  }
  if (disp_data_query_ex) {
    set_has_disp_data_query_ex();
    disp_data_query_ex_ = disp_data_query_ex;
  } else {
    clear_has_disp_data_query_ex();
    disp_data_query_ex_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.gss_us_res_t.disp_data_query_ex)
}

// optional string name = 20;
inline bool gss_us_res_t::has_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void gss_us_res_t::set_has_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void gss_us_res_t::clear_has_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void gss_us_res_t::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& gss_us_res_t::name() const {
  // @@protoc_insertion_point(field_get:gss.message.gss_us_res_t.name)
  return *name_;
}
inline void gss_us_res_t::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:gss.message.gss_us_res_t.name)
}
inline void gss_us_res_t::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:gss.message.gss_us_res_t.name)
}
inline void gss_us_res_t::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gss.message.gss_us_res_t.name)
}
inline ::std::string* gss_us_res_t::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gss.message.gss_us_res_t.name)
  return name_;
}
inline ::std::string* gss_us_res_t::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void gss_us_res_t::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gss.message.gss_us_res_t.name)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace gss

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
